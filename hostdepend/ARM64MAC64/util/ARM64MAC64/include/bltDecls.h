#include "tcl.h"
#include "bltTree.h"
#include "bltVector.h"

#ifndef _BLTDECLS
#define _BLTDECLS

#ifdef BUILD_blt
#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLEXPORT
#endif

/*
* WARNING: This file is automatically generated by the tools/genStubs.tcl
* script.  Any modifications to the function declarations below should be made
* in the generic/blt.decls script.
*/

/* !BEGIN!: Do not edit below this line. */

/*
 * Exported function declarations:
 */

#ifndef Blt_TreeGetKey_TCL_DECLARED
#define Blt_TreeGetKey_TCL_DECLARED
/* 0 */
EXTERN Blt_TreeKey	Blt_TreeGetKey _ANSI_ARGS_((CONST char * string));
#endif
#ifndef Blt_TreeCreateNode_TCL_DECLARED
#define Blt_TreeCreateNode_TCL_DECLARED
/* 1 */
EXTERN Blt_TreeNode	Blt_TreeCreateNode _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode parent, CONST char * name, 
				int position));
#endif
#ifndef Blt_TreeCreateNodeWithId_TCL_DECLARED
#define Blt_TreeCreateNodeWithId_TCL_DECLARED
/* 2 */
EXTERN Blt_TreeNode	Blt_TreeCreateNodeWithId _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode parent, CONST char * name, 
				unsigned int inode, int position));
#endif
#ifndef Blt_TreeDeleteNode_TCL_DECLARED
#define Blt_TreeDeleteNode_TCL_DECLARED
/* 3 */
EXTERN int		Blt_TreeDeleteNode _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node));
#endif
#ifndef Blt_TreeMoveNode_TCL_DECLARED
#define Blt_TreeMoveNode_TCL_DECLARED
/* 4 */
EXTERN int		Blt_TreeMoveNode _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, Blt_TreeNode parent, 
				Blt_TreeNode before));
#endif
#ifndef Blt_TreeGetNode_TCL_DECLARED
#define Blt_TreeGetNode_TCL_DECLARED
/* 5 */
EXTERN Blt_TreeNode	Blt_TreeGetNode _ANSI_ARGS_((Blt_Tree tree, 
				unsigned int inode));
#endif
#ifndef Blt_TreeFindChild_TCL_DECLARED
#define Blt_TreeFindChild_TCL_DECLARED
/* 6 */
EXTERN Blt_TreeNode	Blt_TreeFindChild _ANSI_ARGS_((Blt_TreeNode parent, 
				CONST char * name));
#endif
#ifndef Blt_TreeFindChildRev_TCL_DECLARED
#define Blt_TreeFindChildRev_TCL_DECLARED
/* 7 */
EXTERN Blt_TreeNode	Blt_TreeFindChildRev _ANSI_ARGS_((
				Blt_TreeNode parent, CONST char * name, 
				int firstN));
#endif
#ifndef Blt_TreeFirstChild_TCL_DECLARED
#define Blt_TreeFirstChild_TCL_DECLARED
/* 8 */
EXTERN Blt_TreeNode	Blt_TreeFirstChild _ANSI_ARGS_((Blt_TreeNode parent));
#endif
#ifndef Blt_TreeNextSibling_TCL_DECLARED
#define Blt_TreeNextSibling_TCL_DECLARED
/* 9 */
EXTERN Blt_TreeNode	Blt_TreeNextSibling _ANSI_ARGS_((Blt_TreeNode node));
#endif
#ifndef Blt_TreeLastChild_TCL_DECLARED
#define Blt_TreeLastChild_TCL_DECLARED
/* 10 */
EXTERN Blt_TreeNode	Blt_TreeLastChild _ANSI_ARGS_((Blt_TreeNode parent));
#endif
#ifndef Blt_TreePrevSibling_TCL_DECLARED
#define Blt_TreePrevSibling_TCL_DECLARED
/* 11 */
EXTERN Blt_TreeNode	Blt_TreePrevSibling _ANSI_ARGS_((Blt_TreeNode node));
#endif
#ifndef Blt_TreeNextNode_TCL_DECLARED
#define Blt_TreeNextNode_TCL_DECLARED
/* 12 */
EXTERN Blt_TreeNode	Blt_TreeNextNode _ANSI_ARGS_((Blt_TreeNode root, 
				Blt_TreeNode node));
#endif
#ifndef Blt_TreePrevNode_TCL_DECLARED
#define Blt_TreePrevNode_TCL_DECLARED
/* 13 */
EXTERN Blt_TreeNode	Blt_TreePrevNode _ANSI_ARGS_((Blt_TreeNode root, 
				Blt_TreeNode node));
#endif
#ifndef Blt_TreeChangeRoot_TCL_DECLARED
#define Blt_TreeChangeRoot_TCL_DECLARED
/* 14 */
EXTERN Blt_TreeNode	Blt_TreeChangeRoot _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node));
#endif
#ifndef Blt_TreeEndNode_TCL_DECLARED
#define Blt_TreeEndNode_TCL_DECLARED
/* 15 */
EXTERN Blt_TreeNode	Blt_TreeEndNode _ANSI_ARGS_((Blt_TreeNode node, 
				unsigned int nodeFlags));
#endif
#ifndef Blt_TreeIsBefore_TCL_DECLARED
#define Blt_TreeIsBefore_TCL_DECLARED
/* 16 */
EXTERN int		Blt_TreeIsBefore _ANSI_ARGS_((Blt_TreeNode node1, 
				Blt_TreeNode node2));
#endif
#ifndef Blt_TreeIsAncestor_TCL_DECLARED
#define Blt_TreeIsAncestor_TCL_DECLARED
/* 17 */
EXTERN int		Blt_TreeIsAncestor _ANSI_ARGS_((Blt_TreeNode node1, 
				Blt_TreeNode node2));
#endif
#ifndef Blt_TreePrivateValue_TCL_DECLARED
#define Blt_TreePrivateValue_TCL_DECLARED
/* 18 */
EXTERN int		Blt_TreePrivateValue _ANSI_ARGS_((
				Tcl_Interp * interp, Blt_Tree tree, 
				Blt_TreeNode node, Blt_TreeKey key));
#endif
#ifndef Blt_TreePublicValue_TCL_DECLARED
#define Blt_TreePublicValue_TCL_DECLARED
/* 19 */
EXTERN int		Blt_TreePublicValue _ANSI_ARGS_((Tcl_Interp * interp, 
				Blt_Tree tree, Blt_TreeNode node, 
				Blt_TreeKey key));
#endif
#ifndef Blt_TreeGetValue_TCL_DECLARED
#define Blt_TreeGetValue_TCL_DECLARED
/* 20 */
EXTERN int		Blt_TreeGetValue _ANSI_ARGS_((Tcl_Interp * interp, 
				Blt_Tree tree, Blt_TreeNode node, 
				CONST char * string, Tcl_Obj ** valuePtr));
#endif
#ifndef Blt_TreeValueExists_TCL_DECLARED
#define Blt_TreeValueExists_TCL_DECLARED
/* 21 */
EXTERN int		Blt_TreeValueExists _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, CONST char * string));
#endif
#ifndef Blt_TreeSetValue_TCL_DECLARED
#define Blt_TreeSetValue_TCL_DECLARED
/* 22 */
EXTERN int		Blt_TreeSetValue _ANSI_ARGS_((Tcl_Interp * interp, 
				Blt_Tree tree, Blt_TreeNode node, 
				CONST char * string, Tcl_Obj * valuePtr));
#endif
#ifndef Blt_TreeUnsetValue_TCL_DECLARED
#define Blt_TreeUnsetValue_TCL_DECLARED
/* 23 */
EXTERN int		Blt_TreeUnsetValue _ANSI_ARGS_((Tcl_Interp * interp, 
				Blt_Tree tree, Blt_TreeNode node, 
				CONST char * string));
#endif
#ifndef Blt_TreeGetArrayValue_TCL_DECLARED
#define Blt_TreeGetArrayValue_TCL_DECLARED
/* 24 */
EXTERN int		Blt_TreeGetArrayValue _ANSI_ARGS_((
				Tcl_Interp * interp, Blt_Tree tree, 
				Blt_TreeNode node, CONST char * arrayName, 
				CONST char * elemName, 
				Tcl_Obj ** valueObjPtrPtr));
#endif
#ifndef Blt_TreeSetArrayValue_TCL_DECLARED
#define Blt_TreeSetArrayValue_TCL_DECLARED
/* 25 */
EXTERN int		Blt_TreeSetArrayValue _ANSI_ARGS_((
				Tcl_Interp * interp, Blt_Tree tree, 
				Blt_TreeNode node, CONST char * arrayName, 
				CONST char * elemName, Tcl_Obj * valueObjPtr));
#endif
#ifndef Blt_TreeUnsetArrayValue_TCL_DECLARED
#define Blt_TreeUnsetArrayValue_TCL_DECLARED
/* 26 */
EXTERN int		Blt_TreeUnsetArrayValue _ANSI_ARGS_((
				Tcl_Interp * interp, Blt_Tree tree, 
				Blt_TreeNode node, CONST char * arrayName, 
				CONST char * elemName));
#endif
#ifndef Blt_TreeArrayValueExists_TCL_DECLARED
#define Blt_TreeArrayValueExists_TCL_DECLARED
/* 27 */
EXTERN int		Blt_TreeArrayValueExists _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, CONST char * arrayName, 
				CONST char * elemName));
#endif
#ifndef Blt_TreeArrayNames_TCL_DECLARED
#define Blt_TreeArrayNames_TCL_DECLARED
/* 28 */
EXTERN int		Blt_TreeArrayNames _ANSI_ARGS_((Tcl_Interp * interp, 
				Blt_Tree tree, Blt_TreeNode node, 
				CONST char * arrayName, Tcl_Obj * listObjPtr,
				CONST char * pattern));
#endif
#ifndef Blt_TreeGetValueByKey_TCL_DECLARED
#define Blt_TreeGetValueByKey_TCL_DECLARED
/* 29 */
EXTERN int		Blt_TreeGetValueByKey _ANSI_ARGS_((
				Tcl_Interp * interp, Blt_Tree tree, 
				Blt_TreeNode node, Blt_TreeKey key, 
				Tcl_Obj ** valuePtr));
#endif
#ifndef Blt_TreeSetValueByKey_TCL_DECLARED
#define Blt_TreeSetValueByKey_TCL_DECLARED
/* 30 */
EXTERN int		Blt_TreeSetValueByKey _ANSI_ARGS_((
				Tcl_Interp * interp, Blt_Tree tree, 
				Blt_TreeNode node, Blt_TreeKey key, 
				Tcl_Obj * valuePtr));
#endif
#ifndef Blt_TreeUnsetValueByKey_TCL_DECLARED
#define Blt_TreeUnsetValueByKey_TCL_DECLARED
/* 31 */
EXTERN int		Blt_TreeUnsetValueByKey _ANSI_ARGS_((
				Tcl_Interp * interp, Blt_Tree tree, 
				Blt_TreeNode node, Blt_TreeKey key));
#endif
#ifndef Blt_TreeValueExistsByKey_TCL_DECLARED
#define Blt_TreeValueExistsByKey_TCL_DECLARED
/* 32 */
EXTERN int		Blt_TreeValueExistsByKey _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, Blt_TreeKey key));
#endif
#ifndef Blt_TreeFirstKey_TCL_DECLARED
#define Blt_TreeFirstKey_TCL_DECLARED
/* 33 */
EXTERN Blt_TreeKey	Blt_TreeFirstKey _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, 
				Blt_TreeKeySearch * cursorPtr));
#endif
#ifndef Blt_TreeNextKey_TCL_DECLARED
#define Blt_TreeNextKey_TCL_DECLARED
/* 34 */
EXTERN Blt_TreeKey	Blt_TreeNextKey _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeKeySearch * cursorPtr));
#endif
#ifndef Blt_TreeApply_TCL_DECLARED
#define Blt_TreeApply_TCL_DECLARED
/* 35 */
EXTERN int		Blt_TreeApply _ANSI_ARGS_((Blt_TreeNode root, 
				Blt_TreeApplyProc * proc, 
				ClientData clientData));
#endif
#ifndef Blt_TreeApplyDFS_TCL_DECLARED
#define Blt_TreeApplyDFS_TCL_DECLARED
/* 36 */
EXTERN int		Blt_TreeApplyDFS _ANSI_ARGS_((Blt_TreeNode root, 
				Blt_TreeApplyProc * proc, 
				ClientData clientData, int order));
#endif
#ifndef Blt_TreeApplyBFS_TCL_DECLARED
#define Blt_TreeApplyBFS_TCL_DECLARED
/* 37 */
EXTERN int		Blt_TreeApplyBFS _ANSI_ARGS_((Blt_TreeNode root, 
				Blt_TreeApplyProc * proc, 
				ClientData clientData));
#endif
#ifndef Blt_TreeSortNode_TCL_DECLARED
#define Blt_TreeSortNode_TCL_DECLARED
/* 38 */
EXTERN int		Blt_TreeSortNode _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, 
				Blt_TreeCompareNodesProc * proc));
#endif
#ifndef Blt_TreeCreate_TCL_DECLARED
#define Blt_TreeCreate_TCL_DECLARED
/* 39 */
EXTERN int		Blt_TreeCreate _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * name, Blt_Tree * treePtr));
#endif
#ifndef Blt_TreeExists_TCL_DECLARED
#define Blt_TreeExists_TCL_DECLARED
/* 40 */
EXTERN int		Blt_TreeExists _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * name));
#endif
#ifndef Blt_TreeGetToken_TCL_DECLARED
#define Blt_TreeGetToken_TCL_DECLARED
/* 41 */
EXTERN int		Blt_TreeGetToken _ANSI_ARGS_((Tcl_Interp * interp, 
				CONST char * name, Blt_Tree * treePtr));
#endif
#ifndef Blt_TreeReleaseToken_TCL_DECLARED
#define Blt_TreeReleaseToken_TCL_DECLARED
/* 42 */
EXTERN void		Blt_TreeReleaseToken _ANSI_ARGS_((Blt_Tree tree));
#endif
#ifndef Blt_TreeSize_TCL_DECLARED
#define Blt_TreeSize_TCL_DECLARED
/* 43 */
EXTERN int		Blt_TreeSize _ANSI_ARGS_((Blt_TreeNode node));
#endif
#ifndef Blt_TreeCreateTrace_TCL_DECLARED
#define Blt_TreeCreateTrace_TCL_DECLARED
/* 44 */
EXTERN Blt_TreeTrace	Blt_TreeCreateTrace _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, CONST char * keyPattern, 
				CONST char * tagName, unsigned int mask, 
				Blt_TreeTraceProc * proc, 
				ClientData clientData));
#endif
#ifndef Blt_TreeDeleteTrace_TCL_DECLARED
#define Blt_TreeDeleteTrace_TCL_DECLARED
/* 45 */
EXTERN void		Blt_TreeDeleteTrace _ANSI_ARGS_((Blt_TreeTrace token));
#endif
#ifndef Blt_TreeCreateEventHandler_TCL_DECLARED
#define Blt_TreeCreateEventHandler_TCL_DECLARED
/* 46 */
EXTERN void		Blt_TreeCreateEventHandler _ANSI_ARGS_((
				Blt_Tree tree, unsigned int mask, 
				Blt_TreeNotifyEventProc * proc, 
				ClientData clientData));
#endif
#ifndef Blt_TreeDeleteEventHandler_TCL_DECLARED
#define Blt_TreeDeleteEventHandler_TCL_DECLARED
/* 47 */
EXTERN void		Blt_TreeDeleteEventHandler _ANSI_ARGS_((
				Blt_Tree tree, unsigned int mask, 
				Blt_TreeNotifyEventProc * proc, 
				ClientData clientData));
#endif
#ifndef Blt_TreeRelabelNode_TCL_DECLARED
#define Blt_TreeRelabelNode_TCL_DECLARED
/* 48 */
EXTERN int		Blt_TreeRelabelNode _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, CONST char * string));
#endif
#ifndef Blt_TreeRelabelNode2_TCL_DECLARED
#define Blt_TreeRelabelNode2_TCL_DECLARED
/* 49 */
EXTERN int		Blt_TreeRelabelNode2 _ANSI_ARGS_((Blt_TreeNode node, 
				CONST char * string));
#endif
#ifndef Blt_TreeNodePath_TCL_DECLARED
#define Blt_TreeNodePath_TCL_DECLARED
/* 50 */
EXTERN char *		Blt_TreeNodePath _ANSI_ARGS_((Blt_TreeNode node, 
				Tcl_DString * resultPtr));
#endif
#ifndef Blt_TreeNodePosition_TCL_DECLARED
#define Blt_TreeNodePosition_TCL_DECLARED
/* 51 */
EXTERN int		Blt_TreeNodePosition _ANSI_ARGS_((Blt_TreeNode node));
#endif
#ifndef Blt_TreeClearTags_TCL_DECLARED
#define Blt_TreeClearTags_TCL_DECLARED
/* 52 */
EXTERN void		Blt_TreeClearTags _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node));
#endif
#ifndef Blt_TreeAddTag_TCL_DECLARED
#define Blt_TreeAddTag_TCL_DECLARED
/* 53 */
EXTERN int		Blt_TreeAddTag _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, CONST char * tagName));
#endif
#ifndef Blt_TreeForgetTag_TCL_DECLARED
#define Blt_TreeForgetTag_TCL_DECLARED
/* 54 */
EXTERN int		Blt_TreeForgetTag _ANSI_ARGS_((Blt_Tree tree, 
				CONST char * tagName));
#endif
#ifndef Blt_TreeTagTableIsShared_TCL_DECLARED
#define Blt_TreeTagTableIsShared_TCL_DECLARED
/* 55 */
EXTERN int		Blt_TreeTagTableIsShared _ANSI_ARGS_((Blt_Tree tree));
#endif
#ifndef Blt_TreeShareTagTable_TCL_DECLARED
#define Blt_TreeShareTagTable_TCL_DECLARED
/* 56 */
EXTERN int		Blt_TreeShareTagTable _ANSI_ARGS_((Blt_Tree src, 
				Blt_Tree target));
#endif
#ifndef Blt_TreeFirstTag_TCL_DECLARED
#define Blt_TreeFirstTag_TCL_DECLARED
/* 57 */
EXTERN Blt_HashEntry *	Blt_TreeFirstTag _ANSI_ARGS_((Blt_Tree tree, 
				Blt_HashSearch * searchPtr));
#endif
#ifndef Blt_TreeHasTag_TCL_DECLARED
#define Blt_TreeHasTag_TCL_DECLARED
/* 58 */
EXTERN int		Blt_TreeHasTag _ANSI_ARGS_((Blt_Tree tree, 
				Blt_TreeNode node, CONST char * tagName));
#endif
#ifndef Blt_TreeTagHashTable_TCL_DECLARED
#define Blt_TreeTagHashTable_TCL_DECLARED
/* 59 */
EXTERN Blt_HashTable *	Blt_TreeTagHashTable _ANSI_ARGS_((Blt_Tree tree, 
				CONST char * tagName));
#endif
#ifndef Blt_VecMin_TCL_DECLARED
#define Blt_VecMin_TCL_DECLARED
/* 60 */
EXTERN double		Blt_VecMin _ANSI_ARGS_((Blt_Vector * vPtr));
#endif
#ifndef Blt_VecMax_TCL_DECLARED
#define Blt_VecMax_TCL_DECLARED
/* 61 */
EXTERN double		Blt_VecMax _ANSI_ARGS_((Blt_Vector * vPtr));
#endif
#ifndef Blt_AllocVectorId_TCL_DECLARED
#define Blt_AllocVectorId_TCL_DECLARED
/* 62 */
EXTERN Blt_VectorId	Blt_AllocVectorId _ANSI_ARGS_((Tcl_Interp * interp, 
				char * vecName));
#endif
#ifndef Blt_SetVectorChangedProc_TCL_DECLARED
#define Blt_SetVectorChangedProc_TCL_DECLARED
/* 63 */
EXTERN void		Blt_SetVectorChangedProc _ANSI_ARGS_((
				Blt_VectorId clientId, 
				Blt_VectorChangedProc * proc, 
				ClientData clientData));
#endif
#ifndef Blt_FreeVectorId_TCL_DECLARED
#define Blt_FreeVectorId_TCL_DECLARED
/* 64 */
EXTERN void		Blt_FreeVectorId _ANSI_ARGS_((Blt_VectorId clientId));
#endif
#ifndef Blt_GetVectorById_TCL_DECLARED
#define Blt_GetVectorById_TCL_DECLARED
/* 65 */
EXTERN int		Blt_GetVectorById _ANSI_ARGS_((Tcl_Interp * interp, 
				Blt_VectorId clientId, 
				Blt_Vector ** vecPtrPtr));
#endif
#ifndef Blt_NameOfVectorId_TCL_DECLARED
#define Blt_NameOfVectorId_TCL_DECLARED
/* 66 */
EXTERN char *		Blt_NameOfVectorId _ANSI_ARGS_((
				Blt_VectorId clientId));
#endif
#ifndef Blt_NameOfVector_TCL_DECLARED
#define Blt_NameOfVector_TCL_DECLARED
/* 67 */
EXTERN char *		Blt_NameOfVector _ANSI_ARGS_((Blt_Vector * vecPtr));
#endif
#ifndef Blt_VectorNotifyPending_TCL_DECLARED
#define Blt_VectorNotifyPending_TCL_DECLARED
/* 68 */
EXTERN int		Blt_VectorNotifyPending _ANSI_ARGS_((
				Blt_VectorId clientId));
#endif
#ifndef Blt_CreateVector_TCL_DECLARED
#define Blt_CreateVector_TCL_DECLARED
/* 69 */
EXTERN int		Blt_CreateVector _ANSI_ARGS_((Tcl_Interp * interp, 
				char * vecName, int size, 
				Blt_Vector ** vecPtrPtr));
#endif
#ifndef Blt_GetVector_TCL_DECLARED
#define Blt_GetVector_TCL_DECLARED
/* 70 */
EXTERN int		Blt_GetVector _ANSI_ARGS_((Tcl_Interp * interp, 
				char * vecName, Blt_Vector ** vecPtrPtr));
#endif
#ifndef Blt_VectorExists_TCL_DECLARED
#define Blt_VectorExists_TCL_DECLARED
/* 71 */
EXTERN int		Blt_VectorExists _ANSI_ARGS_((Tcl_Interp * interp, 
				char * vecName));
#endif
#ifndef Blt_ResetVector_TCL_DECLARED
#define Blt_ResetVector_TCL_DECLARED
/* 72 */
EXTERN int		Blt_ResetVector _ANSI_ARGS_((Blt_Vector * vecPtr, 
				double * dataArr, int nValues, int arraySize, 
				Tcl_FreeProc * freeProc));
#endif
#ifndef Blt_ResizeVector_TCL_DECLARED
#define Blt_ResizeVector_TCL_DECLARED
/* 73 */
EXTERN int		Blt_ResizeVector _ANSI_ARGS_((Blt_Vector * vecPtr, 
				int nValues));
#endif
#ifndef Blt_DeleteVectorByName_TCL_DECLARED
#define Blt_DeleteVectorByName_TCL_DECLARED
/* 74 */
EXTERN int		Blt_DeleteVectorByName _ANSI_ARGS_((
				Tcl_Interp * interp, char * vecName));
#endif
#ifndef Blt_DeleteVector_TCL_DECLARED
#define Blt_DeleteVector_TCL_DECLARED
/* 75 */
EXTERN int		Blt_DeleteVector _ANSI_ARGS_((Blt_Vector * vecPtr));
#endif
#ifndef Blt_ExprVector_TCL_DECLARED
#define Blt_ExprVector_TCL_DECLARED
/* 76 */
EXTERN int		Blt_ExprVector _ANSI_ARGS_((Tcl_Interp * interp, 
				char * expression, Blt_Vector * vecPtr));
#endif
#ifndef Blt_InstallIndexProc_TCL_DECLARED
#define Blt_InstallIndexProc_TCL_DECLARED
/* 77 */
EXTERN void		Blt_InstallIndexProc _ANSI_ARGS_((
				Tcl_Interp * interp, char * indexName, 
				Blt_VectorIndexProc * procPtr));
#endif
#ifndef Blt_CreateVector2_TCL_DECLARED
#define Blt_CreateVector2_TCL_DECLARED
/* 78 */
EXTERN int		Blt_CreateVector2 _ANSI_ARGS_((Tcl_Interp * interp, 
				char * vecName, char * cmdName, 
				char * varName, int size, 
				Blt_Vector ** vecPtrPtr));
#endif

typedef struct BltStubs {
    int magic;
    struct BltStubHooks *hooks;

    Blt_TreeKey (*blt_TreeGetKey) _ANSI_ARGS_((CONST char * string)); /* 0 */
    Blt_TreeNode (*blt_TreeCreateNode) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode parent, CONST char * name, int position)); /* 1 */
    Blt_TreeNode (*blt_TreeCreateNodeWithId) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode parent, CONST char * name, int position, int inode)); /* 2 */
    int (*blt_TreeDeleteNode) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node)); /* 3 */
    int (*blt_TreeMoveNode) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, Blt_TreeNode parent, Blt_TreeNode before)); /* 4 */
    Blt_TreeNode (*blt_TreeGetNode) _ANSI_ARGS_((Blt_Tree tree, unsigned int inode)); /* 5 */
    Blt_TreeNode (*blt_TreeFindChild) _ANSI_ARGS_((Blt_TreeNode parent, CONST char * name)); /* 6 */
    Blt_TreeNode (*blt_TreeFindChildRev) _ANSI_ARGS_((Blt_TreeNode parent, CONST char * name, int firstN)); /* 7 */
    Blt_TreeNode (*blt_TreeFirstChild) _ANSI_ARGS_((Blt_TreeNode parent)); /* 8 */
    Blt_TreeNode (*blt_TreeNextSibling) _ANSI_ARGS_((Blt_TreeNode node)); /* 9 */
    Blt_TreeNode (*blt_TreeLastChild) _ANSI_ARGS_((Blt_TreeNode parent)); /* 10 */
    Blt_TreeNode (*blt_TreePrevSibling) _ANSI_ARGS_((Blt_TreeNode node)); /* 11 */
    Blt_TreeNode (*blt_TreeNextNode) _ANSI_ARGS_((Blt_TreeNode root, Blt_TreeNode node)); /* 12 */
    Blt_TreeNode (*blt_TreePrevNode) _ANSI_ARGS_((Blt_TreeNode root, Blt_TreeNode node)); /* 13 */
    Blt_TreeNode (*blt_TreeChangeRoot) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node)); /* 14 */
    Blt_TreeNode (*blt_TreeEndNode) _ANSI_ARGS_((Blt_TreeNode node, unsigned int nodeFlags)); /* 15 */
    int (*blt_TreeIsBefore) _ANSI_ARGS_((Blt_TreeNode node1, Blt_TreeNode node2)); /* 16 */
    int (*blt_TreeIsAncestor) _ANSI_ARGS_((Blt_TreeNode node1, Blt_TreeNode node2)); /* 17 */
    int (*blt_TreePrivateValue) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, Blt_TreeKey key)); /* 18 */
    int (*blt_TreePublicValue) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, Blt_TreeKey key)); /* 19 */
    int (*blt_TreeGetValue) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, CONST char * string, Tcl_Obj ** valuePtr)); /* 20 */
    int (*blt_TreeValueExists) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, CONST char * string)); /* 21 */
    int (*blt_TreeSetValue) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, CONST char * string, Tcl_Obj * valuePtr)); /* 22 */
    int (*blt_TreeUnsetValue) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, CONST char * string)); /* 23 */
    int (*blt_TreeGetArrayValue) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, CONST char * arrayName, CONST char * elemName, Tcl_Obj ** valueObjPtrPtr)); /* 24 */
    int (*blt_TreeSetArrayValue) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, CONST char * arrayName, CONST char * elemName, Tcl_Obj * valueObjPtr)); /* 25 */
    int (*blt_TreeUnsetArrayValue) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, CONST char * arrayName, CONST char * elemName)); /* 26 */
    int (*blt_TreeArrayValueExists) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, CONST char * arrayName, CONST char * elemName)); /* 27 */
    int (*blt_TreeArrayNames) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, CONST char * arrayName, Tcl_Obj * listObjPtr)); /* 28 */
    int (*blt_TreeGetValueByKey) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, Blt_TreeKey key, Tcl_Obj ** valuePtr)); /* 29 */
    int (*blt_TreeSetValueByKey) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, Blt_TreeKey key, Tcl_Obj * valuePtr)); /* 30 */
    int (*blt_TreeUnsetValueByKey) _ANSI_ARGS_((Tcl_Interp * interp, Blt_Tree tree, Blt_TreeNode node, Blt_TreeKey key)); /* 31 */
    int (*blt_TreeValueExistsByKey) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, Blt_TreeKey key)); /* 32 */
    Blt_TreeKey (*blt_TreeFirstKey) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, Blt_TreeKeySearch * cursorPtr)); /* 33 */
    Blt_TreeKey (*blt_TreeNextKey) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeKeySearch * cursorPtr)); /* 34 */
    int (*blt_TreeApply) _ANSI_ARGS_((Blt_TreeNode root, Blt_TreeApplyProc * proc, ClientData clientData)); /* 35 */
    int (*blt_TreeApplyDFS) _ANSI_ARGS_((Blt_TreeNode root, Blt_TreeApplyProc * proc, ClientData clientData, int order)); /* 36 */
    int (*blt_TreeApplyBFS) _ANSI_ARGS_((Blt_TreeNode root, Blt_TreeApplyProc * proc, ClientData clientData)); /* 37 */
    int (*blt_TreeSortNode) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, Blt_TreeCompareNodesProc * proc)); /* 38 */
    int (*blt_TreeCreate) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name, Blt_Tree * treePtr)); /* 39 */
    int (*blt_TreeExists) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name)); /* 40 */
    int (*blt_TreeGetToken) _ANSI_ARGS_((Tcl_Interp * interp, CONST char * name, Blt_Tree * treePtr)); /* 41 */
    void (*blt_TreeReleaseToken) _ANSI_ARGS_((Blt_Tree tree)); /* 42 */
    int (*blt_TreeSize) _ANSI_ARGS_((Blt_TreeNode node)); /* 43 */
    Blt_TreeTrace (*blt_TreeCreateTrace) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, CONST char * keyPattern, CONST char * tagName, unsigned int mask, Blt_TreeTraceProc * proc, ClientData clientData)); /* 44 */
    void (*blt_TreeDeleteTrace) _ANSI_ARGS_((Blt_TreeTrace token)); /* 45 */
    void (*blt_TreeCreateEventHandler) _ANSI_ARGS_((Blt_Tree tree, unsigned int mask, Blt_TreeNotifyEventProc * proc, ClientData clientData)); /* 46 */
    void (*blt_TreeDeleteEventHandler) _ANSI_ARGS_((Blt_Tree tree, unsigned int mask, Blt_TreeNotifyEventProc * proc, ClientData clientData)); /* 47 */
    void (*blt_TreeRelabelNode) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, CONST char * string)); /* 48 */
    void (*blt_TreeRelabelNode2) _ANSI_ARGS_((Blt_TreeNode node, CONST char * string)); /* 49 */
    char * (*blt_TreeNodePath) _ANSI_ARGS_((Blt_TreeNode node, Tcl_DString * resultPtr)); /* 50 */
    int (*blt_TreeNodePosition) _ANSI_ARGS_((Blt_TreeNode node)); /* 51 */
    void (*blt_TreeClearTags) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node)); /* 52 */
    void (*blt_TreeAddTag) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, CONST char * tagName)); /* 53 */
    void (*blt_TreeForgetTag) _ANSI_ARGS_((Blt_Tree tree, CONST char * tagName)); /* 54 */
    int (*blt_TreeTagTableIsShared) _ANSI_ARGS_((Blt_Tree tree)); /* 55 */
    int (*blt_TreeShareTagTable) _ANSI_ARGS_((Blt_Tree src, Blt_Tree target)); /* 56 */
    Blt_HashEntry * (*blt_TreeFirstTag) _ANSI_ARGS_((Blt_Tree tree, Blt_HashSearch * searchPtr)); /* 57 */
    int (*blt_TreeHasTag) _ANSI_ARGS_((Blt_Tree tree, Blt_TreeNode node, CONST char * tagName)); /* 58 */
    Blt_HashTable * (*blt_TreeTagHashTable) _ANSI_ARGS_((Blt_Tree tree, CONST char * tagName)); /* 59 */
    double (*blt_VecMin) _ANSI_ARGS_((Blt_Vector * vPtr)); /* 60 */
    double (*blt_VecMax) _ANSI_ARGS_((Blt_Vector * vPtr)); /* 61 */
    Blt_VectorId (*blt_AllocVectorId) _ANSI_ARGS_((Tcl_Interp * interp, char * vecName)); /* 62 */
    void (*blt_SetVectorChangedProc) _ANSI_ARGS_((Blt_VectorId clientId, Blt_VectorChangedProc * proc, ClientData clientData)); /* 63 */
    void (*blt_FreeVectorId) _ANSI_ARGS_((Blt_VectorId clientId)); /* 64 */
    int (*blt_GetVectorById) _ANSI_ARGS_((Tcl_Interp * interp, Blt_VectorId clientId, Blt_Vector ** vecPtrPtr)); /* 65 */
    char * (*blt_NameOfVectorId) _ANSI_ARGS_((Blt_VectorId clientId)); /* 66 */
    char * (*blt_NameOfVector) _ANSI_ARGS_((Blt_Vector * vecPtr)); /* 67 */
    int (*blt_VectorNotifyPending) _ANSI_ARGS_((Blt_VectorId clientId)); /* 68 */
    int (*blt_CreateVector) _ANSI_ARGS_((Tcl_Interp * interp, char * vecName, int size, Blt_Vector ** vecPtrPtr)); /* 69 */
    int (*blt_GetVector) _ANSI_ARGS_((Tcl_Interp * interp, char * vecName, Blt_Vector ** vecPtrPtr)); /* 70 */
    int (*blt_VectorExists) _ANSI_ARGS_((Tcl_Interp * interp, char * vecName)); /* 71 */
    int (*blt_ResetVector) _ANSI_ARGS_((Blt_Vector * vecPtr, double * dataArr, int nValues, int arraySize, Tcl_FreeProc * freeProc)); /* 72 */
    int (*blt_ResizeVector) _ANSI_ARGS_((Blt_Vector * vecPtr, int nValues)); /* 73 */
    int (*blt_DeleteVectorByName) _ANSI_ARGS_((Tcl_Interp * interp, char * vecName)); /* 74 */
    int (*blt_DeleteVector) _ANSI_ARGS_((Blt_Vector * vecPtr)); /* 75 */
    int (*blt_ExprVector) _ANSI_ARGS_((Tcl_Interp * interp, char * expression, Blt_Vector * vecPtr)); /* 76 */
    void (*blt_InstallIndexProc) _ANSI_ARGS_((Tcl_Interp * interp, char * indexName, Blt_VectorIndexProc * procPtr)); /* 77 */
    int (*blt_CreateVector2) _ANSI_ARGS_((Tcl_Interp * interp, char * vecName, char * cmdName, char * varName, int size, Blt_Vector ** vecPtrPtr)); /* 78 */
} BltStubs;

#ifdef __cplusplus
extern "C" {
#endif
extern BltStubs *bltStubsPtr;
#ifdef __cplusplus
}
#endif

#if defined(USE_BLT_STUBS) && !defined(USE_BLT_STUB_PROCS)

/*
 * Inline function declarations:
 */

#ifndef Blt_TreeGetKey
#define Blt_TreeGetKey \
	(bltStubsPtr->blt_TreeGetKey) /* 0 */
#endif
#ifndef Blt_TreeCreateNode
#define Blt_TreeCreateNode \
	(bltStubsPtr->blt_TreeCreateNode) /* 1 */
#endif
#ifndef Blt_TreeCreateNodeWithId
#define Blt_TreeCreateNodeWithId \
	(bltStubsPtr->blt_TreeCreateNodeWithId) /* 2 */
#endif
#ifndef Blt_TreeDeleteNode
#define Blt_TreeDeleteNode \
	(bltStubsPtr->blt_TreeDeleteNode) /* 3 */
#endif
#ifndef Blt_TreeMoveNode
#define Blt_TreeMoveNode \
	(bltStubsPtr->blt_TreeMoveNode) /* 4 */
#endif
#ifndef Blt_TreeGetNode
#define Blt_TreeGetNode \
	(bltStubsPtr->blt_TreeGetNode) /* 5 */
#endif
#ifndef Blt_TreeFindChild
#define Blt_TreeFindChild \
	(bltStubsPtr->blt_TreeFindChild) /* 6 */
#endif
#ifndef Blt_TreeFindChildRev
#define Blt_TreeFindChildRev \
	(bltStubsPtr->blt_TreeFindChildRev) /* 7 */
#endif
#ifndef Blt_TreeFirstChild
#define Blt_TreeFirstChild \
	(bltStubsPtr->blt_TreeFirstChild) /* 8 */
#endif
#ifndef Blt_TreeNextSibling
#define Blt_TreeNextSibling \
	(bltStubsPtr->blt_TreeNextSibling) /* 9 */
#endif
#ifndef Blt_TreeLastChild
#define Blt_TreeLastChild \
	(bltStubsPtr->blt_TreeLastChild) /* 10 */
#endif
#ifndef Blt_TreePrevSibling
#define Blt_TreePrevSibling \
	(bltStubsPtr->blt_TreePrevSibling) /* 11 */
#endif
#ifndef Blt_TreeNextNode
#define Blt_TreeNextNode \
	(bltStubsPtr->blt_TreeNextNode) /* 12 */
#endif
#ifndef Blt_TreePrevNode
#define Blt_TreePrevNode \
	(bltStubsPtr->blt_TreePrevNode) /* 13 */
#endif
#ifndef Blt_TreeChangeRoot
#define Blt_TreeChangeRoot \
	(bltStubsPtr->blt_TreeChangeRoot) /* 14 */
#endif
#ifndef Blt_TreeEndNode
#define Blt_TreeEndNode \
	(bltStubsPtr->blt_TreeEndNode) /* 15 */
#endif
#ifndef Blt_TreeIsBefore
#define Blt_TreeIsBefore \
	(bltStubsPtr->blt_TreeIsBefore) /* 16 */
#endif
#ifndef Blt_TreeIsAncestor
#define Blt_TreeIsAncestor \
	(bltStubsPtr->blt_TreeIsAncestor) /* 17 */
#endif
#ifndef Blt_TreePrivateValue
#define Blt_TreePrivateValue \
	(bltStubsPtr->blt_TreePrivateValue) /* 18 */
#endif
#ifndef Blt_TreePublicValue
#define Blt_TreePublicValue \
	(bltStubsPtr->blt_TreePublicValue) /* 19 */
#endif
#ifndef Blt_TreeGetValue
#define Blt_TreeGetValue \
	(bltStubsPtr->blt_TreeGetValue) /* 20 */
#endif
#ifndef Blt_TreeValueExists
#define Blt_TreeValueExists \
	(bltStubsPtr->blt_TreeValueExists) /* 21 */
#endif
#ifndef Blt_TreeSetValue
#define Blt_TreeSetValue \
	(bltStubsPtr->blt_TreeSetValue) /* 22 */
#endif
#ifndef Blt_TreeUnsetValue
#define Blt_TreeUnsetValue \
	(bltStubsPtr->blt_TreeUnsetValue) /* 23 */
#endif
#ifndef Blt_TreeGetArrayValue
#define Blt_TreeGetArrayValue \
	(bltStubsPtr->blt_TreeGetArrayValue) /* 24 */
#endif
#ifndef Blt_TreeSetArrayValue
#define Blt_TreeSetArrayValue \
	(bltStubsPtr->blt_TreeSetArrayValue) /* 25 */
#endif
#ifndef Blt_TreeUnsetArrayValue
#define Blt_TreeUnsetArrayValue \
	(bltStubsPtr->blt_TreeUnsetArrayValue) /* 26 */
#endif
#ifndef Blt_TreeArrayValueExists
#define Blt_TreeArrayValueExists \
	(bltStubsPtr->blt_TreeArrayValueExists) /* 27 */
#endif
#ifndef Blt_TreeArrayNames
#define Blt_TreeArrayNames \
	(bltStubsPtr->blt_TreeArrayNames) /* 28 */
#endif
#ifndef Blt_TreeGetValueByKey
#define Blt_TreeGetValueByKey \
	(bltStubsPtr->blt_TreeGetValueByKey) /* 29 */
#endif
#ifndef Blt_TreeSetValueByKey
#define Blt_TreeSetValueByKey \
	(bltStubsPtr->blt_TreeSetValueByKey) /* 30 */
#endif
#ifndef Blt_TreeUnsetValueByKey
#define Blt_TreeUnsetValueByKey \
	(bltStubsPtr->blt_TreeUnsetValueByKey) /* 31 */
#endif
#ifndef Blt_TreeValueExistsByKey
#define Blt_TreeValueExistsByKey \
	(bltStubsPtr->blt_TreeValueExistsByKey) /* 32 */
#endif
#ifndef Blt_TreeFirstKey
#define Blt_TreeFirstKey \
	(bltStubsPtr->blt_TreeFirstKey) /* 33 */
#endif
#ifndef Blt_TreeNextKey
#define Blt_TreeNextKey \
	(bltStubsPtr->blt_TreeNextKey) /* 34 */
#endif
#ifndef Blt_TreeApply
#define Blt_TreeApply \
	(bltStubsPtr->blt_TreeApply) /* 35 */
#endif
#ifndef Blt_TreeApplyDFS
#define Blt_TreeApplyDFS \
	(bltStubsPtr->blt_TreeApplyDFS) /* 36 */
#endif
#ifndef Blt_TreeApplyBFS
#define Blt_TreeApplyBFS \
	(bltStubsPtr->blt_TreeApplyBFS) /* 37 */
#endif
#ifndef Blt_TreeSortNode
#define Blt_TreeSortNode \
	(bltStubsPtr->blt_TreeSortNode) /* 38 */
#endif
#ifndef Blt_TreeCreate
#define Blt_TreeCreate \
	(bltStubsPtr->blt_TreeCreate) /* 39 */
#endif
#ifndef Blt_TreeExists
#define Blt_TreeExists \
	(bltStubsPtr->blt_TreeExists) /* 40 */
#endif
#ifndef Blt_TreeGetToken
#define Blt_TreeGetToken \
	(bltStubsPtr->blt_TreeGetToken) /* 41 */
#endif
#ifndef Blt_TreeReleaseToken
#define Blt_TreeReleaseToken \
	(bltStubsPtr->blt_TreeReleaseToken) /* 42 */
#endif
#ifndef Blt_TreeSize
#define Blt_TreeSize \
	(bltStubsPtr->blt_TreeSize) /* 43 */
#endif
#ifndef Blt_TreeCreateTrace
#define Blt_TreeCreateTrace \
	(bltStubsPtr->blt_TreeCreateTrace) /* 44 */
#endif
#ifndef Blt_TreeDeleteTrace
#define Blt_TreeDeleteTrace \
	(bltStubsPtr->blt_TreeDeleteTrace) /* 45 */
#endif
#ifndef Blt_TreeCreateEventHandler
#define Blt_TreeCreateEventHandler \
	(bltStubsPtr->blt_TreeCreateEventHandler) /* 46 */
#endif
#ifndef Blt_TreeDeleteEventHandler
#define Blt_TreeDeleteEventHandler \
	(bltStubsPtr->blt_TreeDeleteEventHandler) /* 47 */
#endif
#ifndef Blt_TreeRelabelNode
#define Blt_TreeRelabelNode \
	(bltStubsPtr->blt_TreeRelabelNode) /* 48 */
#endif
#ifndef Blt_TreeRelabelNode2
#define Blt_TreeRelabelNode2 \
	(bltStubsPtr->blt_TreeRelabelNode2) /* 49 */
#endif
#ifndef Blt_TreeNodePath
#define Blt_TreeNodePath \
	(bltStubsPtr->blt_TreeNodePath) /* 50 */
#endif
#ifndef Blt_TreeNodePosition
#define Blt_TreeNodePosition \
	(bltStubsPtr->blt_TreeNodePosition) /* 51 */
#endif
#ifndef Blt_TreeClearTags
#define Blt_TreeClearTags \
	(bltStubsPtr->blt_TreeClearTags) /* 52 */
#endif
#ifndef Blt_TreeAddTag
#define Blt_TreeAddTag \
	(bltStubsPtr->blt_TreeAddTag) /* 53 */
#endif
#ifndef Blt_TreeForgetTag
#define Blt_TreeForgetTag \
	(bltStubsPtr->blt_TreeForgetTag) /* 54 */
#endif
#ifndef Blt_TreeTagTableIsShared
#define Blt_TreeTagTableIsShared \
	(bltStubsPtr->blt_TreeTagTableIsShared) /* 55 */
#endif
#ifndef Blt_TreeShareTagTable
#define Blt_TreeShareTagTable \
	(bltStubsPtr->blt_TreeShareTagTable) /* 56 */
#endif
#ifndef Blt_TreeFirstTag
#define Blt_TreeFirstTag \
	(bltStubsPtr->blt_TreeFirstTag) /* 57 */
#endif
#ifndef Blt_TreeHasTag
#define Blt_TreeHasTag \
	(bltStubsPtr->blt_TreeHasTag) /* 58 */
#endif
#ifndef Blt_TreeTagHashTable
#define Blt_TreeTagHashTable \
	(bltStubsPtr->blt_TreeTagHashTable) /* 59 */
#endif
#ifndef Blt_VecMin
#define Blt_VecMin \
	(bltStubsPtr->blt_VecMin) /* 60 */
#endif
#ifndef Blt_VecMax
#define Blt_VecMax \
	(bltStubsPtr->blt_VecMax) /* 61 */
#endif
#ifndef Blt_AllocVectorId
#define Blt_AllocVectorId \
	(bltStubsPtr->blt_AllocVectorId) /* 62 */
#endif
#ifndef Blt_SetVectorChangedProc
#define Blt_SetVectorChangedProc \
	(bltStubsPtr->blt_SetVectorChangedProc) /* 63 */
#endif
#ifndef Blt_FreeVectorId
#define Blt_FreeVectorId \
	(bltStubsPtr->blt_FreeVectorId) /* 64 */
#endif
#ifndef Blt_GetVectorById
#define Blt_GetVectorById \
	(bltStubsPtr->blt_GetVectorById) /* 65 */
#endif
#ifndef Blt_NameOfVectorId
#define Blt_NameOfVectorId \
	(bltStubsPtr->blt_NameOfVectorId) /* 66 */
#endif
#ifndef Blt_NameOfVector
#define Blt_NameOfVector \
	(bltStubsPtr->blt_NameOfVector) /* 67 */
#endif
#ifndef Blt_VectorNotifyPending
#define Blt_VectorNotifyPending \
	(bltStubsPtr->blt_VectorNotifyPending) /* 68 */
#endif
#ifndef Blt_CreateVector
#define Blt_CreateVector \
	(bltStubsPtr->blt_CreateVector) /* 69 */
#endif
#ifndef Blt_GetVector
#define Blt_GetVector \
	(bltStubsPtr->blt_GetVector) /* 70 */
#endif
#ifndef Blt_VectorExists
#define Blt_VectorExists \
	(bltStubsPtr->blt_VectorExists) /* 71 */
#endif
#ifndef Blt_ResetVector
#define Blt_ResetVector \
	(bltStubsPtr->blt_ResetVector) /* 72 */
#endif
#ifndef Blt_ResizeVector
#define Blt_ResizeVector \
	(bltStubsPtr->blt_ResizeVector) /* 73 */
#endif
#ifndef Blt_DeleteVectorByName
#define Blt_DeleteVectorByName \
	(bltStubsPtr->blt_DeleteVectorByName) /* 74 */
#endif
#ifndef Blt_DeleteVector
#define Blt_DeleteVector \
	(bltStubsPtr->blt_DeleteVector) /* 75 */
#endif
#ifndef Blt_ExprVector
#define Blt_ExprVector \
	(bltStubsPtr->blt_ExprVector) /* 76 */
#endif
#ifndef Blt_InstallIndexProc
#define Blt_InstallIndexProc \
	(bltStubsPtr->blt_InstallIndexProc) /* 77 */
#endif
#ifndef Blt_CreateVector2
#define Blt_CreateVector2 \
	(bltStubsPtr->blt_CreateVector2) /* 78 */
#endif

#endif /* defined(USE_BLT_STUBS) && !defined(USE_BLT_STUB_PROCS) */

/* !END!: Do not edit above this line. */

#undef TCL_STORAGE_CLASS
#define TCL_STORAGE_CLASS DLLIMPORT

#endif /* _BLTDECLS */

