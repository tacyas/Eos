Array.h extern void arrayInit(Array* a, char* message); 
Array.h extern void arrayFree(Array* a, char* message); 
Array.h extern void arrayReadFromFile(FILE* fpt, Array* a, char* message); 
Array.h extern void arrayWriteToFile(FILE* fpt, Array* a, char* message); 
Array.h extern void arrayPCA(Array* u, Array* C, Array* lambda, Array* X, int mode); 
Contour.h  +(i1)*(a).n[0]]) +i1*a.n[0] \ +i2*a.n[0]*a.n[1]) +i1*a.n[0] \ +i2*a.n[0]*a.n[1] \ +i3*a.n[0]*a.n[1]*a.n[2]) +i1*a.n[0] \ +i2*a.n[0]*a.n[1] \ +i3*a.n[0]*a.n[1]*a.n[2] \ +i4*a.n[0]*a.n[1]*a.n[2]*a.n[3]) +(i1)*(a).n[0]]=(data) +i1*a.n[0] \ +i2*a.n[0]*a.n[1]=(data) +i1*a.n[0] \ +i2*a.n[0]*a.n[1] \ +i3*a.n[0]*a.n[1]*a.n[2]=(data) +i1*a.n[0] \ +i2*a.n[0]*a.n[1] \ +i3*a.n[0]*a.n[1]*a.n[2] \ +i4*a.n[0]*a.n[1]*a.n[2]*a.n[3]=(data) extern void createContourALine(contourLine* ls, contourArgs c); 
Contour.h extern void createContourLine (contourLines* ls, contourLine* l); 
Contour.h extern void createContourLines(contourLines* ls, contourImage image); 
Contour.h extern void createContour(contourLinesSet* lsset, contourImage image, contourParaTypeReal level, contourFlag flag); 
Contour.h extern void appendContourLine0(contourLine* l, contourParaTypeReal xc1, contourParaTypeReal yc1, contourParaTypeReal xc2, contourParaTypeReal yc2, contourParaTypeReal z); 
Contour.h extern void appendContourLine1(contourLine* l, contourLine* als); 
Map2D.h extern void map2DParallelInfo(Map2DParaTypeInteger* n, Map2DParaTypeReal* d, Map2DParaTypeReal latitude, Map2DParaTypeInteger nparallel, long mode); 
Map2D.h extern void map2DCoordGet(Map2DParaTypeReal* x, Map2DParaTypeReal* y, Map2DParaTypeReal rotx, Map2DParaTypeReal roty, long nx, long ny, long mode); 
Matrix3D.h extern inline void matrix3DInit(Matrix3D Matrix); 
Matrix3D.h extern inline void matrix3DMultiply(Matrix3D A, Matrix3D B); 
Matrix3D.h extern inline void matrix3DMultiplyInv(Matrix3D A, Matrix3D B); 
Matrix3D.h extern inline void matrix3DMultiplyVector(floatVector* v, Matrix3D A); 
Matrix3D.h extern void matrix3DFileFormat(FILE* fpt); 
Matrix3D.h extern void matrix3DFileRead(FILE* fpt, Matrix3D Matrix); 
Matrix3D.h extern void matrix3DFileWrite(FILE* fpt, Matrix3D Matrix); 
Matrix3D.h extern inline void matrix3DRotationSet(Matrix3D Matrix, char mode, matrix3DParaTypeReal rot, long Mode); 
Matrix3D.h extern inline void matrix3DTranslationSet(Matrix3D Matrix, matrix3DParaTypeReal rotx, matrix3DParaTypeReal roty, matrix3DParaTypeReal rotz, long mode); 
Matrix3D.h extern inline void matrix3DRotationSetXYZ(Matrix3D Matrix, matrix3DParaTypeReal rotx, matrix3DParaTypeReal roty, matrix3DParaTypeReal rotz, long mode); 
Matrix3D.h extern inline void matrix3DRotationSetZYX(Matrix3D Matrix, matrix3DParaTypeReal rotx, matrix3DParaTypeReal roty, matrix3DParaTypeReal rotz, long mode); 
Matrix3D.h extern inline void matrix3DRotationSetZXY(Matrix3D Matrix, matrix3DParaTypeReal rotx, matrix3DParaTypeReal roty, matrix3DParaTypeReal rotz, long mode); 
Matrix3D.h extern inline void matrix3DRotationSetYXZ(Matrix3D Matrix, matrix3DParaTypeReal rotx, matrix3DParaTypeReal roty, matrix3DParaTypeReal rotz, long mode); 
Matrix3D.h extern inline void matrix3DRotationSetFollowingEulerAngle(Matrix3D Matrix, char Mode[4], matrix3DParaTypeReal rot1, matrix3DParaTypeReal rot2, matrix3DParaTypeReal rot3, long mode); 
Matrix3D.h extern inline void matrix3DRotationAntiSetFollowingEulerAngle(Matrix3D Matrix, char Mode[4], matrix3DParaTypeReal rot1, matrix3DParaTypeReal rot2, matrix3DParaTypeReal rot3, long mode); 
Matrix3D.h  n=o&1;o>>=1;i=EulSafe[o&3];j=EulNext[i+n];k=EulNext[i+1-n];h=s?k:i;} EulerAngles Eul_(float ai, float aj, float ah, int order); 
Matrix3D.h Quat Eul_ToQuat(EulerAngles ea); 
Matrix3D.h void Eul_ToHMatrix(EulerAngles ea, HMatrix3D M); 
Matrix3D.h EulerAngles Eul_FromHMatrix(HMatrix3D M, int order); 
Matrix3D.h EulerAngles Eul_FromQuat(Quat q, int order); 
PVM.h extern int* pvmServerStart(char* cmd, char* argv[], FILE* fpt, int* nTask, int mode); 
PVM.h extern void pvmServerStartError(int numTask, int* tids, int nTask); 
Random.h extern randomParaTypeReal randomNormalGet(long mode); 
Socket.h extern int socketServerCreate(char* hostname, u_short port); 
Socket.h extern int socketMultiServerCreate(char* hostname, u_short port, int max); 
Socket.h extern int socketClientCreate(char* hostname, u_short port); 
SpecialNumber.h extern long pow2nn(long n); 
String.h extern void stringInit(String s, char* message); 
String.h extern String stringGetFromFile(char* s, char* message, FILE* fptIn, FILE* fptOut, long mode); 
String.h extern String stringGetFromFileWithSkippingComment(char* s, char* message, FILE* fptIn, FILE* fptOut, long mode); 
String.h extern char* __getStringData(char* s, char* message, FILE* fptIn, FILE* fptOut, long mode); 
String.h extern String stringGetNthWord(char* s, long nth, char* exception); 
String.h extern double stringGetNthRealData(char* s, long nth, char* exception); 
String.h extern long stringGetNthIntegerData(char* s, long nth, char* exception); 
String.h extern String stringGetWordFromField(char* s, long init, long end); 
String.h extern double stringGetRealDataFromField(char* s, long init, long end); 
String.h extern long stringGetIntegerDataFromField(char* s, long init, long end); 
String.h extern long stringIsSame(String s1, String s2, long n); 
String.h extern long stringLength(String s); 
String.h extern long stringCopy(String dst, String src, long n); 
String.h extern String stringDuplicate(String src); 
Vector.h extern floatVector* floatVectorInit(floatVector* v, long size); 
Vector.h extern floatVector* floatVectorFree(floatVector* v); 
Vector.h extern floatVector* floatVectorAdd(floatVector* v, floatVector* u, floatVector* w); 
Vector.h extern floatVector* floatVectorMinus(floatVector* v, floatVector* u, floatVector* w); 
Vector.h extern double floatVectorScalarProduct(floatVector* x, floatVector* y); 
Vector.h extern double lfloatVectorLength(floatVector* x); 
Vector.h extern void lVectorSplineTableMake(floatVector* x, floatVector* y, floatVector* z); 
Vector.h extern double lVectorSpline(double t, floatVector* x, floatVector* y, floatVector* z); 
Vector.h extern void lVectorSplineTable2DMake(floatVector* p, floatVector* x, floatVector* y, floatVector* a, floatVector* b); 
Vector.h extern void lVectorSpline2D(double t, double* px, double* py, floatVector* p, floatVector* x, floatVector* y, floatVector* a, floatVector* b); 
Vector.h extern doubleVector* doubleVectorInit(doubleVector* v, long size); 
Vector.h extern doubleVector* doubleVectorFree(doubleVector* v); 
Vector.h extern doubleVector* doubleVectorAdd(doubleVector* v, doubleVector* u, doubleVector* w); 
Vector.h extern doubleVector* doubleVectorMinus(doubleVector* v, doubleVector* u, doubleVector* w); 
Vector.h extern double doubleVectorScalarProduct(doubleVector* x, doubleVector* y); 
Vector.h extern double ldoubleVectorLength(doubleVector* x); 
Vector.h extern void ldoubleVectorSplineTableMake(doubleVector* x, doubleVector* y, doubleVector* z); 
Vector.h extern double ldoubleVectorSpline(double t, doubleVector* x, doubleVector* y, doubleVector* z); 
Vector.h extern void ldoubleVectorSplineTable2DMake(doubleVector* p, doubleVector* x, doubleVector* y, doubleVector* a, doubleVector* b); 
Vector.h extern void ldoubleVectorSpline2D(double t, double* px, double* py, doubleVector* p, doubleVector* x, doubleVector* y, doubleVector* a, doubleVector* b); 
avsFile.h typedef int avsFileParaTypeInteger; 
avsFile.h typedef float avsFileParaTypeReal; 
avsFile.h typedef enum avsFileType { avsFileTypeField=0, avsFileTypeUCD=1 } avsFileType; 
avsFile.h typedef enum avsFileFieldDataType { avsFileFieldDataTypeByte = 0, avsFileFieldDataTypeShort = 1, avsFileFieldDataTypeFloat = 2, avsFileFieldDataTypeInteger = 3, avsFileFieldDataTypeDouble = 4 } avsFileFieldDataType; 
avsFile.h typedef enum avsFileFieldType { avsFileFieldTypeUniform = 0, avsFileFieldTypeRectilinear = 1, avsFileFieldTypeIrregular = 2 } avsFileFieldType; 
avsFile.h typedef struct avsFileField { avsFileParaTypeInteger ndim; 
avsFile.h  avsFileParaTypeInteger dim1; 
avsFile.h  avsFileParaTypeInteger dim2; 
avsFile.h  avsFileParaTypeInteger dim3; 
avsFile.h  avsFileParaTypeInteger nspace; 
avsFile.h  avsFileParaTypeInteger veclen; 
avsFile.h  avsFileFieldDataType dataType; 
avsFile.h  avsFileFieldType type; 
avsFile.h  char** Label; 
avsFile.h  void* Image; 
avsFile.h  float** Coord; 
avsFile.h } avsFileField; 
avsFile.h typedef struct avsFileUCDComponentData { avsFileParaTypeReal* data; 
avsFile.h } avsFileUCDComponentData; 
avsFile.h typedef struct avsFileUCDComponent { char* Label; 
avsFile.h  char* Unit; 
avsFile.h  avsFileParaTypeInteger nElement; 
avsFile.h } avsFileUCDComponent; 
avsFile.h typedef struct avsFileUCDNode { avsFileParaTypeInteger ID; 
avsFile.h  avsFileParaTypeReal x; 
avsFile.h  avsFileParaTypeReal y; 
avsFile.h  avsFileParaTypeReal z; 
avsFile.h  avsFileUCDComponentData* Component; 
avsFile.h } avsFileUCDNode; 
avsFile.h typedef enum avsFileUCDCellType { avsFileUCDCellTypePoint =0, avsFileUCDCellTypeLine =1, avsFileUCDCellTypeTriangle =2, avsFileUCDCellTypeQuadrilateral =3, avsFileUCDCellTypeTetrahedron =4, avsFileUCDCellTypePyramid =5, avsFileUCDCellTypePrism =6, avsFileUCDCellTypeHexahedron =7 } avsFileUCDCellType; 
avsFile.h typedef struct avsFileUCDCell { avsFileParaTypeInteger ID; 
avsFile.h  avsFileParaTypeInteger MaterialID; 
avsFile.h  avsFileUCDCellType Type; 
avsFile.h  avsFileUCDNode** Node; 
avsFile.h  avsFileUCDComponentData* Component; 
avsFile.h } avsFileUCDCell; 
avsFile.h typedef struct avsFileUCD { avsFileParaTypeInteger nNode; 
avsFile.h  avsFileUCDNode* Node; 
avsFile.h  avsFileParaTypeInteger nNodeComponent; 
avsFile.h  avsFileUCDComponent* NodeComponent; 
avsFile.h  avsFileParaTypeInteger nCell; 
avsFile.h  avsFileUCDCell* Cell; 
avsFile.h  avsFileParaTypeInteger nCellComponent; 
avsFile.h  avsFileUCDComponent* CellComponent; 
avsFile.h  avsFileParaTypeInteger nModel; 
avsFile.h } avsFileUCD; 
avsFile.h typedef struct avsFile { avsFileType FileType; 
avsFile.h  avsFileField field; 
avsFile.h  avsFileUCD UCD; 
avsFile.h } avsFile; 
avsFile.h extern "C" { extern void avsFileInit(avsFile* avs, long mode); 
avsFile.h extern void avsFileFieldInit(avsFileField* avs, long mode); 
avsFile.h extern void avsFileUCDInit(avsFileUCD* avs, long mode); 
avsFile.h extern void avsFileUCDGlobalInit(avsFileUCD* avs, long mode); 
avsFile.h extern void avsFileUCDNodeComponentInit(avsFileUCD* avs, int ID, int nElement, char* Label, char* Unit, long mode); 
avsFile.h extern void avsFileUCDCellComponentInit(avsFileUCD* avs, int ID, int nElement, char* Label, char* Unit, long mode); 
avsFile.h extern void avsFileWrite(avsFile* avs, FILE* fpt, long mode); 
avsFile.h extern void avsFileUCDWrite(avsFileUCD* avs, FILE* fpt, long mode); 
avsFile.h extern void avsFileFieldWrite(avsFileField* avs, FILE* fpt, long mode); 
avsFile.h extern void avsFileUCDNodeSet(avsFileUCD* avs, avsFileParaTypeInteger NodeID, avsFileParaTypeReal x, avsFileParaTypeReal y, avsFileParaTypeReal z); 
avsFile.h extern void avsFileUCDNodeDataSet(avsFileUCD* avs, avsFileParaTypeInteger NodeID, avsFileParaTypeInteger indexComponent, avsFileParaTypeInteger indexElement, double data); 
avsFile.h extern void avsFileUCDLineTypeCellSet(avsFileUCD* avs, avsFileParaTypeInteger CellID, avsFileParaTypeInteger MaterialID, avsFileUCDNode* NodeID0, avsFileUCDNode* NodeID1); 
avsFile.h extern void avsFileUCDCellDataSet(avsFileUCD* avs, avsFileParaTypeInteger CellID, avsFileParaTypeInteger indexComponent, avsFileParaTypeInteger indexElement, double data); 
ctfDeterminationFromPhaseComparison.h extern double ctfDeterminationFromPhaseComparison( mrcImage* inFFT, mrcImage* refFFT, ctfInfoDeterminationFromPhaseComparison* DetInfo, long mode); 
ctfInfo.h extern void ctfInfoSendByPVM(ctfInfo* info, int tid, long mode); 
ctfInfo.h extern void ctfInfoRecieveByPVM(ctfInfo* info, int tid, long mode); 
ctfInfo.h extern float ctfSignalFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfNoiseFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfNoise2Function(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfSignalPowerFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfNoisePowerFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfNoise2PowerFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfScatteringFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfMolecularEnvelopeFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfMolecularEnvelopeInElasticFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfVibrationFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfFunctionSampling(float R, float Nyquist, long mode); 
ctfInfo.h extern void ctfFunctionPVMStart(ctfInfo* info, float R, int tid, long mode); 
ctfInfo.h extern float ctfFunctionPVMEnd(ctfInfo* info, float R, int tid, long mode); 
ctfInfo.h extern void ctfFunctionPVMServer(); 
ctfInfo.h extern float ctfEnvelopFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfMTFFunction(ctfInfo* info, float R, long mode); 
ctfInfo.h extern float ctfFunction2D(ctfInfo* info, float X, float Y, long mode); 
ctfInfo.h extern float wavelengthOfElectron(float E); 
ctfInfo.h extern float defocusDeterminationFromThonRing(ctfInfo* info, float R, long n, long mode); 
ctfInfo.h extern float ctfWeightForCorrection(ctfInfo* info, float R, long mode); 
ctfInfo.h extern void lmolecularEnvelopeFileRead(FILE* fpt, molecularEnvelope* mol, int mode); 
ctfInfo.h extern void lmolecularEnvelopeFileWrite(FILE* fpt, molecularEnvelope* mol, int mode); 
ctfInfo.h extern void lmolecularEnvelopeResampling(molecularEnvelope* dst, molecularEnvelope* src, float dR, float RMax, int mode); 
ctfInfo.h extern float lmolecularEnvelopeDataGet(molecularEnvelope* src, float R, int mode); 
ctfInfo.h extern void ctfInfoRead(FILE* fpt, ctfInfo* ctf, char* pre, int mode); 
ctfInfo.h extern void ctfInfoWrite(FILE* fpt, ctfInfo ctf, char* pre, int mode); 
ctfZeroPoint.h extern float ctfZeroPoint(ctfInfo* info, ctfInfoZeroPoint* infoZeroPoint, long mode); 
fftn.h extern void fft_free (void); 
fftn.h extern int fftn (int ndim, const int dims[], double Re[], double Im[], int isign, double scaling); 
fftn.h extern int fftnf (int ndim, const int dims[], float Re[], float Im[], int isign, double scaling); 
genUtil.h  if(0==strcmp(__sswitch_tmp_, "")) { \ fprintf(stderr, "SSWITCH Error\n"); \ exit(EXIT_FAILURE); \ } |(((x1)<< 8)&0x00f0) \ |(((x2)<<16)&0x0f00) \ |(((x3)<<24)&0xf000)) |(((x2)<< 8)&0x00f0) \ |(((x1)<<16)&0x0f00) \ |(((x0)<<24)&0xf000)) fprintf(fpt, "%-6s %-15s",ID,ID2); \ fprintf(fpt, x); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s",ID,ID2); \ fprintf(stdout, x); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4,d5); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4,d5); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4,d5,d6); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4,d5,d6); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4,d5,d6,d7); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4,d5,d6,d7); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4,d5,d6,d7,d8); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4,d5,d6,d7,d8); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4,d5,d6,d7,d8,d9); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4,d5,d6,d7,d8,d9); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4,d5,d6,d7,d8,d9,d10); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4,d5,d6,d7,d8,d9,d10); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11); \ fprintf(stdout, "\n"); fflush(stdout); 
genUtil.h  fprintf(fpt, "%-6s %-15s ",ID,ID2); \ fprintf(fpt, x, d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12); \ fprintf(fpt, "\n"); fflush(fpt); \ fprintf(stdout, "%-6s %-15s ",ID,ID2); \ fprintf(stdout, x, d1,d2,d3,d4,d5,d6,d7,d8,d9,d10,d11,d12); \ fprintf(stdout, "\n"); fflush(stdout); 
gifFile.h extern int lmrc2gif(char* out, mrcImage* in, ColorMapObject* ColorMap, long mode); 
gifFile.h extern int lmrc2gifColor(char* out, mrcImage* r, mrcImage* g, mrcImage* b, ColorMapObject* ColorMap, int n, int nr, int ng, int nb, long mode); 
gifFile.h extern ColorMapObject* gifColorMapInit(int n, long mode); 
gifFile.h extern ColorMapObject* gifColorMapGrey(ColorMapObject* ColorMap, int n); 
gifFile.h extern ColorMapObject* gifColorMapColor(ColorMapObject* ColorMap, int n, int nr, int ng, int nb); 
hf2000.h extern void hf2000Init(hf2000Info* info); 
hf2000.h extern void hf2000Close(hf2000Info* info); 
hf2000.h extern void hf2000Read(hf2000Info* info, char* s); 
hf2000.h extern void hf2000Write(hf2000Info* info, char* s); 
hf2000.h extern void hf2000Command(hf2000Info* info, char* command, char* result); 
hf2000.h extern int hf2000_TclAppInit(Tcl_Interp * interp); 
khorosData.h extern int lmrc2viff(mrcImage* mrc, kobject viff); 
lDescartesIntoPolar.h extern void lDescartesAxisCalc(lDescartesIntoPolarInfo* linfo, int mode); 
lDescartesIntoPolar.h extern PolarCoord lDescartesCoordIntoPolarCoord(DescartesCoord p, lDescartesIntoPolarInfo info, int mode); 
lDescartesIntoPolar.h extern DescartesCoord lPolarCoordIntoDescartesCoord(PolarCoord p, lDescartesIntoPolarInfo info, int mode); 
lFRET.h extern void lenergyTransferModelCheck( energyTransferData* src, mrcImage* unfix, mrcImage* fix, lenergyTransferModelCheckInfo linfo, int mode); 
lFRET.h extern void lenergyTransferModelExpectedFRET( FILE* fpt, energyTransferData* src, mrcImage* unfix, lenergyTransferModelCheckInfo linfo, int mode); 
lFRET.h extern void lenergyTransferModelExpectedFRET2( FILE* fpt, energyTransferData* src, mrcImage* unfix, lenergyTransferModelCheckInfo linfo, int mode); 
lFRET.h extern void lenergyTransferModelExpectedFRETSD( FILE* fpt, energyTransferData* src, mrcImage* unfix, lenergyTransferModelCheckInfo linfo, int mode); 
lFRET.h extern void energyTransferDataWrite( energyTransferData* dst, FILE* fpt, int lmode); 
lFRET.h extern void energyTransferDataRead( energyTransferData* dst, FILE* fpt, int lmode); 
largeIP.h extern void largeIPRead(largeIP* ip, FILE* fpt, largeIPSubImageInfo* info, long mode); 
largeIP.h extern void largeIPImageRead(largeIP* ip, FILE* fpt, largeIPSubImageInfo* info, long mode); 
largeIP.h extern void largeIPHeaderRead(largeIP* ip, FILE* fpt, long mode); 
largeIP.h extern void largeIPInit(largeIP* ip, largeIPSubImageInfo* info, long mode); 
largeIP.h extern void largeIPFree(largeIP* ip); 
lctfDetermination.h extern void lctfDeterminationbyMinMaxMethods(ctfInfo* res, mrcImage* mrc, ctfInfo* ini, long mode); 
lctfDetermination.h extern void lctfDeterminationbyFittingMethods(ctfInfo* res, ctfInfo* var, mrcImage* mrc, ctfInfo* ini, long mode); 
lctfDetermination.h extern void angularDistributionFunctionOfSignalAndNoise(float x, float p[], float* y, float dyda[], int na); 
lhf2000LenzCurrent.h extern void lhf2000LenzCurrentGet(hf2000Info* hf2000, lhf2000LenzCurrentInfo* linfo, int mode); 
lhf2000LenzCurrent.h extern hf2000LenzCurrent lhf2000LenzCurrentGet0(hf2000Info* hf2000, char* s, int mode); 
lhf2000SpecimenPosition.h extern void lhf2000SpecimenPositionGet(hf2000Info* hf2000, lhf2000SpecimenPositionInfo* linfo, int mode); 
lhf2000SpecimenPosition.h extern void lhf2000SpecimenPositionSet(hf2000Info* hf2000, lhf2000SpecimenPositionInfo* linfo, int mode); 
llData.h extern "C" { extern void llDataFileRead(FILE* fpt, llData* ll, llDataParaTypeInteger* status); 
llData.h extern void llDataFileReadFollowingllData(FILE* fpt, llData* ll, llData* Ref, llDataParaTypeInteger* status); 
llData.h extern void llDataFileReadFollowingAttributes(FILE* fpt, llData* ll, llDataAttributes* attr, llDataParaTypeInteger* status); 
llData.h extern void llDataFileWrite(FILE* fpt, llData* ll, llDataParaTypeInteger* status); 
llData.h extern void llDataInit(llData* ll); 
llData.h extern void llDataInitWithReference(llData* ll, llData* ref); 
llData.h extern void llDataInitWithReference2(llData* ll, llData* ref, int side); 
llData.h extern void llDataHeaderInit(llData* ll); 
llData.h extern void llDataDataInit(llData* ll); 
llData.h extern void llDataFree(llData* ll); 
llData.h extern void llDataHeaderFree(llData* ll); 
llData.h extern void llDataDataFree(llData* ll); 
llData.h extern void llDataInfoPrint(FILE* fpt, llData* ll, long WhichLayer, long WhatInfo); 
llData.h extern void llDataInfoPrintUsage(FILE* fpt); 
llData.h extern void llDataRValueSet(llData* dst, int mode); 
llData.h extern void llDataFmaxSet(llData* dst, int mode); 
llData.h extern void llDataZValueSet(llData* dst, int mode); 
llData.h extern llDataParaTypeInteger* llDataTableBetweenTwollDataCreate(llData* ll1, llData* ll2, int mode); 
llData.h extern inline llDataParaTypeReal nearSidePhaseGet(llDataParaTypeReal phase, llDataParaTypeInteger nn, llDataParaTypeInteger side, llDataParaTypeInteger pole); 
llData.h extern inline llDataParaTypeReal farSidePhaseGet(llDataParaTypeReal phase, llDataParaTypeInteger nn, llDataParaTypeInteger side, llDataParaTypeInteger pole); 
llData.h extern void lllDataAttributeCopy(llData* ll1, llData* ll2); 
llData.h extern void lllDataHeaderCopy(llData* ll1, llData* ll2); 
llData.h extern void lllDataCopy(llData* ll1, llData* ll2); 
llData.h extern void lllDataClear(llData* ll1); 
llData.h extern void lllDataMul(llData* ll1, llData* ll2); 
llData.h extern void lllDataPoleSet(llData* ll1, llDataPole pole); 
llData.h extern void lllDataSideSet(llData* ll1, llDataParaTypeInteger Side); 
llData.h extern void lllDataMultiplyReal(llData* ll1, llDataParaTypeReal f); 
llData.h extern void lllDataDevidedByReal(llData* ll1, llDataParaTypeReal f); 
llData.h extern void lllDataAdd(llData* ll1, llData* ll2); 
llData.h extern void lllDataAdd2(llData* ll, llData* ll1, llData* ll2); 
llData.h extern void lllDataAvgTo(llData* dst, llData* src, llDataParaTypeInteger Side); 
llData.h extern void lllDataAvgToNea(llData* nea, llData* avg); 
llData.h extern void lllDataAvgToFar(llData* far, llData* avg); 
llData.h extern void lllDataWeightSet(FILE* fpt, llData* ll, llDataParaTypeReal w, long mode); 
llData.h extern inline long llDataValueGet(llData* ll, long l, double R, double* re, double *im); 
llData.h extern inline long llDataValueGet2(llData* ll, long nn, long nl, double R, double* re, double *im); 
llData.h extern long llDataLayerNumberGet(llData* ll, long n, long l); 
llData.h extern long llDataNLNumberGet(llData* ll); 
llData.h extern void llDataFandPHISet(llData* ll); 
llData.h extern void llDataReAndImSet(llData* ll); 
llData.h extern void llDataRRSet(llData* ll); 
llData.h extern void llDataRRInfoSet(llData* ll); 
llData.h extern void llDataAttributesSet2(llData* dst, llData* src); 
llData.h extern long llDataSizeCheck(llData* ll1, llData* ll2, char* message); 
llData.h extern void lllDataIntensityInformationGet(llData* in, lllDataIntensityInformation* data, int mode); 
llData.h extern void llDataError(char* s); 
llData.h extern void llDataErrorMessage(void); 
llData.h }; 
llDataPVM.h extern void llDataSendByPVM(llData* ll, int tid, int mode); 
llDataPVM.h extern void llDataOneLLSendByPVM(oneLLData* LL, int tid, int mode); 
llDataPVM.h extern void llDataRecieveByPVM(llData* ll, int tid, int mode); 
llDataPVM.h extern void llDataOneLLRecieveByPVM(oneLLData* LL, int tid, int mode); 
lll2ltlg.h extern void ll2ltlgConfigFileRead(lll2ltlgInfo* linfo, FILE* fpt); 
lll2ltlg.h extern void lll2ltlg(ltlgData* out, llData* in, lll2ltlgInfo* linfo); 
lll2ltlg.h extern void emBessel(ltlgData* ltlg, llData* ll); 
lll2ltlg.h extern ltlgDataParaTypeReal Bessel0(ltlgDataParaTypeReal x0); 
lll2ltlg.h extern ltlgDataParaTypeReal Bessel1(ltlgDataParaTypeReal x0); 
lllDataAxisSearch.h extern void lllDataAxisSearch(llData* ll1, llData* ll2, llDataFittedParam* p, long mode); 
lllDataAxisSearch.h extern void lllDataAxisSearchWithFile(llData* ll1, llData* ll2, llDataFittedParam* p, char* paramFileName, long mode); 
lllDataAxisSearch.h extern void lllDataAxisSearch2(llData* ll1, llData* ll2, llDataFittedParam* p, long mode); 
lllDataAxisSearch.h extern void lllDataAxisSearchAndAverage(llData* avg, llData* nea, llData* far, llDataFittedParam* p, long mode); 
lllDataCTF.h extern void lllDataCTFObservation(llData* ll, ctfInfo ctf, int mode); 
lllDataCTFCompensate.h extern void llDataCTFSet(llData* llInfo, FILE* fpt); 
lllDataCTFCompensate.h extern void llDataCTFSet2(llData* llInfo, FILE* fpt); 
lllDataCTFCompensate.h extern void configFileRead(FILE* fpt, lllDataCTFCompensateInfo* linfo); 
lllDataCTFCompensate.h extern void configFileUsage(FILE* fpt); 
lllDataCTFCompensation.h extern void lllDataMultiCTFCompensation(llData* avg, llData* out, llData* In, llData ref, llDataFittedParam* paraFit, lllDataFitAndAverageInfo linfo, lllDataMultiCTFCompensationMode mode); 
lllDataCTFCompensation.h extern void lllDataMultiCTFCompensationModePrint(FILE* fpt); 
lllDataCTFCompensation.h extern void lllDataSingleCTFCompensation(llData* out, llData* in, lllDataSingleCTFCompensationInfo linfo, int mode); 
lllDataCompare.h extern void lllDataCompare(lllDataIntensityInformation* data, lllDataCompareInfo* linfo, int mode); 
lllDataContributionCalcDifferentN.h extern void lllDataContributionCalcDifferentN(llData* dst, llData* src, int mode); 
lllDataDifferenceCalc.h extern double lllDataDifferenceCalcWithNormalizing( llData* dst, llData* newa, llData* a, llData* b, lllDataDifferenceCalcInfo* linfo, int mode); 
lllDataDifferenceCalc.h extern double lllDataDifferenceCalc( llData* dst, llData* a, llData* b, int mode); 
lllDataDifferenceCalc.h extern double lllDataDifferencePValueCalc(llData* a, llData* b, int mode); 
lllDataDifferenceCalc.h extern double lllDataDifferencePValueCalc2(floatVector* fv, llData* a, llData* b, int mode); 
lllDataDifferenceCalc.h extern double lllDataDifferenceRValueCalc(llData* a, llData* b, int mode); 
lllDataEquatorAdd.h extern void lllDataEquatorAdd(llData* out, llData* in, int mode); 
lllDataExtract.h extern void lllDataExtract(llData* out, llData* in, lllDataExtractInfo* info, int mode); 
lllDataFit.h extern void lllDataFitOfSeparatedLL(llData* ll1, llDataBoth* ll2, llDataFittedParam* p, long mode); 
lllDataFit.h extern void lllDataFit(llData* ll1, llData* ll2, llDataFittedParam* p, long mode); 
lllDataFit.h extern void lllDataFitWithFile(llData* ll1, llData* ll2, llDataFittedParam* p, char* paramFileName, long mode); 
lllDataFit.h extern void lllDataFit2(llData* ll1, llData* ll2, llDataFittedParam* p, long mode); 
lllDataFit.h extern void lllDataFitParamOutput(FILE* fpt, char* ref, char* dat, llDataFittedParam* para, long mode); 
lllDataFit.h extern void lllDataAxisSearch(llData* ll1, llData* ll2, llDataFittedParam* p, long mode); 
lllDataFit.h extern void lllDataAxisSearchWithFile(llData* ll1, llData* ll2, llDataFittedParam* p, char* paramFileName, long mode); 
lllDataFit.h extern void lllDataAxisSearch2(llData* ll1, llData* ll2, llDataFittedParam* p, long mode); 
lllDataFit.h extern void lllDataPhaseShiftInverse(llData* ll1, llData* ll2, llDataFittedParam* p); 
lllDataFit.h extern void lllDataPhaseShift(llData* ll1, llData* ll2, llDataFittedParam* p); 
lllDataFit.h extern void lllDataPhaseShiftIntra(llData* ll1, llData* ll2, llDataFittedParam* p); 
lllDataFit.h extern void lllDataPhaseShiftInter(llData* ll1, llData* ll2, llDataFittedParam* p); 
lllDataFit.h extern void lllDataFitllCTFSet(llData* ll, ctfInfo ctf, int mode); 
lllDataFit.h extern void lllDataNewFittedParameterSet(llDataParamToFit* param); 
lllDataFit.h extern void lllDataNewFittedParameterSet0(llDataParaTypeRegion* param); 
lllDataFit.h extern void lllDataFittedParameterSet(llDataParamToFit* param, llDataParamToFit* range); 
lllDataFit.h extern void lllDataFittedParameterSet0(llDataParaTypeRegion* param, llDataParaTypeRegion* region); 
lllDataFit.h extern void lllDataFittedParameterFree(llDataFittedParam* param); 
lllDataFit.h extern void lllDataFittedParameterFree0(llDataParamToFit* param); 
lllDataFit.h extern void lllDataFitServerStart(lllDataFitPVMInfo* linfo, FILE* fpt, int numTask); 
lllDataFit.h extern void lllDataFitServerEnd(lllDataFitPVMInfo linfo); 
lllDataFit.h extern void lllDataFitPVMStart(llData* llref, llData* llp, llDataFittedParam* p, int tid, long mode); 
lllDataFit.h extern void lllDataFitPVMEnd(llData* llref, llData* llp, llDataFittedParam* p, int tid, long mode); 
lllDataFit.h extern void lllDataFitPVMServer(); 
lllDataFit.h extern void lllDataFitWithFilePVMStart(llData* llref, llData* llp, llDataFittedParam* p, char* filename, int tid, long mode); 
lllDataFit.h extern void lllDataFitWithFilePVMEnd(llData* llref, llData* llp, llDataFittedParam* p, char* filename, int tid, long mode); 
lllDataFit.h extern void lllDataFittedParamSendByPVM(llDataFittedParam* p, int tid, int mode); 
lllDataFit.h extern void lllDataFittedParamRecieveByPVM(llDataFittedParam* p, int tid, int mode); 
lllDataFit.h extern void lllDataParamToFitSendByPVM(llDataParamToFit* p, int tid, int mode); 
lllDataFit.h extern void lllDataParamToFitSendByPVM2(llDataParamToFit* p, int tid, int mode); 
lllDataFit.h extern void lllDataParamToFitRecieveByPVM(llDataParamToFit* p, int tid, int mode); 
lllDataFit.h extern void lllDataParamToFitRecieveByPVM2(llDataParamToFit* p, int tid, int mode); 
lllDataFit.h extern void lllDataParaTypeRegionSendByPVM(llDataParaTypeRegion* p, int tid, int mode); 
lllDataFit.h extern void lllDataParaTypeRegionRecieveByPVM(llDataParaTypeRegion* p, int tid, int mode); 
lllDataFitAndAverage.h extern void lllDataFitAndAverage(llData* llAve, llData* llOut, llData* llIn, llData llRef, llDataFittedParam* paraFit, lllDataFitAndAverageInfo info); 
lllDataFitAndAverage.h extern void lllDataAverage(llData* llAve, llData* llOut, llData* llIn, llData llRef, llDataFittedParam* paraFit, lllDataFitAndAverageInfo info, int mode); 
lllDataFitParamInverse.h extern void lllDataFitParamInverse(llDataFittedParam* dst, llDataFittedParam* src); 
lllDataLowPassFiltering.h extern void lllDataLowPassFiltering(llData* ll, double RMax, int mode); 
lllDataLowPassFiltering.h extern void lllDataRadialLowPassFiltering(llData* ll, double RRMax, int mode); 
lllDataMergeDifferentN.h extern void lllDataMergeDifferentN(llDataBoth* dst, llDataBoth* src, int mode); 
lllDataRescaling.h typedef struct lllDataRescalingInfo { llDataParaTypeReal delBR; 
lllDataRescaling.h  llDataParaTypeReal rScale; 
lllDataRescaling.h } lllDataRescalingInfo; 
lllDataRescaling.h extern void lllDataRescaling(llData* llOut, llData* llIn, lllDataRescalingInfo linfo, long mode); 
lllDatarMaxLimit.h extern void lllDatarMaxLimit(llData* llIn, lllDatarMaxLimitInfo linfo, int mode); 
lllDatarMaxLimit.h extern inline int lllDatarMaxLimitCheck(float R, int n, float rMax); 
lllDatarMaxLimit.h extern inline float lllDatarMaxLimitWeight(float R, int n, float rMax, float rMaxMin); 
lllExtract.h extern void lllExtract(llData* nea, llData* far, mrcImage* in, lllExtractInfo* info); 
lllExtract.h extern void lllExtractWithSeparationUsingFittingParameter(llData* dst, llDataBoth* src, llDataFittedParam* param, int number, lllExtractInfo* info, int mode); 
lllExtract.h extern void lllExtractWithSeparation(llDataBoth* dst, llDataBoth* src, lllExtractInfo* info, int mode); 
lllExtract.h extern void lllExtractWithWeightedSeparation(llDataBoth* dst, llDataBoth* src, llData* weight, lllExtractInfo* info, int mode); 
lllExtract.h extern void lllDatarMaxLimitForSeparation(llData* ll, float rMax, lllExtractInfo* linfo, long mode); 
lllExtract.h extern void lllDataSeparationInfoRead(lllExtractInfo* linfo, mrcImage* mrc, FILE* fpt); 
lllExtract.h extern void lllDataSeparationInfoFileFormat(FILE* fpt); 
lllExtract.h extern void lllDataSeparationInfoTruePitchSet(lllExtractInfo* linfo, llDataParaTypeReal truePitch); 
lllExtract.h extern void lllDataSeparationInfoDelRInvSet(lllExtractInfo* linfo, llDataParaTypeReal DelRInv); 
lllExtract.h extern void lllDataSeparationInfoxShiftSet(lllExtractInfo* linfo, llDataParaTypeReal xShift); 
lllExtract.h extern void lllExtractWeightSetFollowingllExtractInfo(llData* dst, lllExtractInfo* info, float weight, int mode); 
lllExtractCtfinfFileCreate.h extern void llExtractCtfinfFileCreateI(infoDataList* linfo, ctfInfo* CTFInfo, ctfInfoZeroPoint* CTFInfoZeroPoint); 
lllExtractCtfinfFileCreate.h extern void llExtractCtfinfFileCreateII(infoDataList* linfo, ctfInfo* CTFInfo); 
lllExtractdYEstimate.h extern int lllExtractdYEstimate(mrcImage* in, lllExtractdYEstimateInfo* dYinfo); 
lltlg2mrc.h extern void lltlg2mrc(ltlgData* ltlg, mrcImage* mrc, lltlg2mrcInfo* linfo); 
lltlg2mrc.h extern void ltlg2mrcConfigFileRead(lltlg2mrcInfo* linfo, FILE* fpt); 
lmrcFFTExpression.h void lmrcFFTExpressionModePrint(FILE* fpt); 
lmrcFFTExpression.h void lmrcFFTExpression(mrcImage* img, mrcImage* fft, double th ,int mode); 
lmrcFFTExpression.h long lmrcFFTExpressionOffset(mrcImage* fft); 
lmrcFFTExpression.h void lmrcFFTAmplitude(mrcImage* img, mrcImage* fft); 
lmrcFFTExpression.h void lmrcFFTLogAmplitude(mrcImage* img, mrcImage* fft ,double data); 
lmrcFFTExpression.h void lmrcFFTPower(mrcImage* img, mrcImage* fft); 
lmrcFFTExpression.h void lmrcFFTLogPower(mrcImage* img, mrcImage* fft ,double data); 
lmrcFFTExpression.h void lmrcFFTPhase(mrcImage* img, mrcImage* fft); 
lmrcFFTExpression.h void lmrcFFTReal(mrcImage* img, mrcImage* fft); 
lmrcFFTInfo.h extern floatVector* lmrcFSInfoYAxisMagAverage(mrcImage* fft); 
lmrcFFTInfo.h extern void lmrcFSInfoYAxisProjection(mrcImage* out, mrcImage* in, long mode); 
lmrcFFTInfo.h extern void lmrcFSInfoXFiltering(mrcImage* out, mrcImage* in, float RMaxX, long mode); 
lmrcFFTInfo.h extern void lmrcFSInfo(mrcFSInfo* linfo, mrcImage* fft); 
lmrcImageAsProbability.h extern void lmrcImageNormalizationAsProbability(mrcImage* mrc, int mode); 
lmrcImageBinalization.h extern void lmrcImageBinalization(mrcImage* out, mrcImage* in, lmrcImageBinalizationInfo linfo, int mode); 
lmrcImageBinalization.h extern void lmrcImageBinalizationUsage(FILE* fpt); 
lmrcImageCTFDetermination.h extern void lmrcImageCTFDetermination (lmrcImageCTFDeterminationInfo *linfo, lmrcImageCTFDeterminationInfoRef *refinfo, mrcImage* in, mrcImage* ref, lmrcImageCTFDeterminationInfoMode *Mode); 
lmrcImageCTFDetermination.h extern void lmrcImageCTFDeterminationResultFFT (lmrcImageCTFDeterminationInfo *linfo, lmrcImageCTFDeterminationInfoRef *refinfo, mrcImage* in, mrcImage* ref, lmrcImageCTFDeterminationInfoMode *Mode); 
lmrcImageCTFDetermination.h extern double MagWeightForCTFDetermine(double inMag, double refMag, long mode); 
lmrcImageCTFDetermination.h extern void lmrcImageCTFDeterminationCreateRefFilebyNearFar3DReconstInitializeLL (lmrcImageCTFDeterminationInfoRef *refinfo, lllDataCTFCompensateInfo *llctfinfo, lll2ltlgInfo *ll2ltlginfo, lltlg2mrcInfo *ltlg2mrcinfo); 
lmrcImageCTFDetermination.h extern void lmrcImageCTFDeterminationCreateRefFilebyNearFar3DReconstInitializeMRC (lmrcImageCTFDeterminationInfoRef *refinfo, mrcImageInformation *solinfo, lmrcImageProjectionInfo *projinfo, lmrcImageCrystalCreateInfo *cryinfo, lmrcImagePadInfo *padinfo); 
lmrcImageCTFDetermination.h extern void lmrcImageCTFDeterminationCreateRefFilebyNearFar3DReconstLL (lmrcImageCTFDeterminationInfoRef *refinfo, lllDataCTFCompensateInfo *llctfinfo, lll2ltlgInfo *ll2ltlginfo, lltlg2mrcInfo *ltlg2mrcinfo); 
lmrcImageCTFDetermination.h extern void lmrcImageCTFDeterminationCreateRefFilebyNearFar3DReconstMRC (lmrcImageCTFDeterminationInfoRef *refinfo, mrcImageInformation *solinfo, lmrcImageProjectionInfo *projinfo, lmrcImageCrystalCreateInfo *cryinfo, lmrcImagePadInfo *padinfo); 
lmrcImageCentre.h extern void lmrcImageCenterOfMassCalculate(lmrcImageCenterOfMass *centerOfMass,mrcImage in1); 
lmrcImageCentre.h extern void lmrcImageShiftCenterOfMassIntoImageCenter(mrcImage* out, mrcImage* in, mrcPixelDataHowToGet mode); 
lmrcImageCommonLine.h extern void lmrcImageCommonLineSearch(mrcImage* out, mrcImage* in, mrcImage* ref, lmrcImageCommonLineInfo* linfo, int mode); 
lmrcImageCommonLine.h extern void lmrcImageCommonLineInfoOutput(FILE* fpt, lmrcImageCommonLineInfo* linfo, int mode); 
lmrcImageCommonLine.h extern void lmrcImageCommonLineInfoUsage(FILE* fpt); 
lmrcImageConnection.h extern void lmrcImageConnection(mrcImage* out, mrcImage* in1, mrcImage* in2, lmrcImageConnectionInfo* info); 
lmrcImageContourSurface.h extern void lmrcImageContourSurfaceCreate(mrcImage* out, mrcImage* in, lmrcImageContourSurfaceInfo info, lmrcImageContourSurfaceMode mode); 
lmrcImageContourSurface.h extern void lmrcImageContourSurfaceCreate0(mrcImage* out, mrcImage* in, lmrcImageContourSurfaceInfo info); 
lmrcImageCorrelation.h extern void lmrcImageAutoRotationCorrelation(mrcImage* out, mrcImage* cor, mrcImage* in, mrcImage* ref, lmrcImageAutoRotationCorrelationInfo* linfo, int mode); 
lmrcImageCorrelation.h extern void lmrcImageAutoRotationCorrelationRotationalCrossCorrelationFunction(mrcImage* out, mrcImage* cor, mrcImage* in, mrcImage* ref, lmrcImageAutoRotationCorrelationInfo* linfo, int mode); 
lmrcImageCorrelation.h extern double lmrcImageLinearCorrelation(mrcImage* in1, mrcImage* in2, long mode); 
lmrcImageCorrelation.h extern void lmrcImageCorrelation(mrcImage* cor, mrcImage* in, mrcImage* ref, long mode); 
lmrcImageCorrelation.h extern double lmrcImageEuclidDistanceCalc(mrcImage* in1, mrcImage* in2, int mode); 
lmrcImageCorrelation.h extern void lmrcImageCorrelationRefinement(mrcImage* cor, mrcImage* shift, mrcImage* in, mrcImage* ref, lmrcImageCorrelationRefinementInfo* info, long mode); 
lmrcImageCrystalCreate.h extern void lmrcImageCrystalCreate(mrcImage* out, mrcImage* in, lmrcImageCrystalCreateInfo* info); 
lmrcImageDataMaxAndMinGetByImage.h extern void lmrcImageDataMaxAndMinGetByImage(mrcImage* in, double* datamax, double* datamin); 
lmrcImageDataStraightCopy.h extern void lmrcImageDataStraightCopy(mrcImage* out, mrcImage* in); 
lmrcImageDensity.h extern void lmrcImageDensityInfoModePrint(FILE* fpt); 
lmrcImageDensity.h extern void lmrcImageDensityInfo(lmrcImageDensityInfoInfo* linfo, mrcImage* in, long mode); 
lmrcImageDensity.h extern void lmrcImageDensityInfoWrite(FILE* fpt, lmrcImageDensityInfoInfo* linfo, long mode); 
lmrcImageDensity.h extern floatVector lmrcImageDensityInfoPercentageVolume(mrcImage* in, double delta, long mode); 
lmrcImageDensity.h extern mrcImageParaTypeRealCoord lmrcImageDensityInfoCentreOfGravity(mrcImage* in, long mode); 
lmrcImageDensity.h extern mrcImageParaTypeRealCoord lmrcImageDensityInfoMax(mrcImage* in, long mode); 
lmrcImageDensity.h extern mrcImageParaTypeRealCoord lmrcImageDensityInfoSD(mrcImage* in, mrcImageParaTypeRealCoord centre, long mode); 
lmrcImageDensity.h extern void lmrcImageDensityChangeEstimationModePrint(FILE* fpt); 
lmrcImageDensity.h extern void lmrcImageDensityChangeEstimation(lmrcImageDensityChangeEstimationInfo* linfo, mrcImage* in1, mrcImage* in2, long mode); 
lmrcImageDensity.h extern void lmrcImageDensityChangeEstimationWrite(FILE*fpt, lmrcImageDensityChangeEstimationInfo* linfo, long mode); 
lmrcImageDensity.h extern void lmrcImageDensityChangeEstimationCentreOfGravity(lmrcImageDensityChangeEstimationInfo0* linfo, mrcImage* in, mrcImage* in2, long mode); 
lmrcImageDensity.h extern void lmrcImageDensityChangeEstimationMax(lmrcImageDensityChangeEstimationInfo0* linfo, mrcImage* in, mrcImage* in2, long mode); 
lmrcImageDensity.h extern void lmrcImageDensityChangeEstimationSD(lmrcImageDensityChangeEstimationInfo0* linfo, mrcImage* in1, mrcImage* in2, long mode); 
lmrcImageDensityInverse.h extern void lmrcImageDensityInverse(mrcImage* mrc, long mode); 
lmrcImageDensityNormalizationByImage.h extern void lmrcImageDensityNormalizationByImageModePrint(FILE* fpt); 
lmrcImageDensityNormalizationByImage.h extern void lmrcImageDensityNormalizationByImageInfoPrint(FILE* fpt, lmrcImageDensityNormalizationByImageInfo info); 
lmrcImageDensityNormalizationByImage.h extern void lmrcImageDenstiyNormalizationByImage(mrcImage* out, mrcImage* in2, mrcImage* in1, lmrcImageDensityNormalizationByImageInfo* info, lmrcImageDensityNormalizationByImageMode mode); 
lmrcImageDensityNormalizationByImage.h extern void lmrcImageDensityFittingForNormalization(mrcImage* out, mrcImage* in2, mrcImage* in1, lmrcImageDensityNormalizationByImageInfo* info, lmrcImageDensityNormalizationByImageMode mode); 
lmrcImageEdgeAverage.h extern void lmrcImageEdgeAverage(mrcImage* mrc, lmrcImageEdgeAverageInfo* linfo, long mode); 
lmrcImageFilterCreate.h extern void lmrcImageFilterInfoFileRead(FILE* fpt, lmrcImageFilterCreateInfo* linfo, int mode); 
lmrcImageFilterCreate.h extern void lmrcImageFilterInfoPrint(FILE* fpt, lmrcImageFilterCreateInfo linfo, int mode); 
lmrcImageFilterCreate.h extern void lmrcImageFilterInfoFileFormat(FILE* fpt, int mode); 
lmrcImageFilterCreate.h extern void lmrcImageFilterCreate(mrcImage* fpt, lmrcImageFilterCreateInfo linfo, int mode); 
lmrcImageFirstNoiseReductionByRelaxation.h extern void lmrcImageFirstNoiseReductionByRelaxation( mrcImage* out, mrcImage* p0, mrcImage* in, mrcImage* summationOfProbability, double *densityLevel, lmrcImageNoiseReductionByRelaxationInfo* info); 
lmrcImageMasking.h extern void lmrcImageMasking(mrcImage* out, mrcImage* in, lmrcImageMaskingInfo* linfo, int mode); 
lmrcImageModeChange.h extern void lmrcImageModeChange(mrcImage* out, mrcImage* in, long mode); 
lmrcImageModelCreate.h extern void _lmrcImageModelCreateMode0(mrcImage* out, mrcImageParaTypeReal radius); 
lmrcImageModelCreate.h extern void _lmrcImageModelCreateMode1(mrcImage* out, _lmrcImageModelCreateMode1Info info); 
lmrcImageMontage.h extern int lmrcImageMontageCreate(mrcImage* out, mrcImage* in, int imageNum, lmrcImageMontageInfo linfo, int mode); 
lmrcImageMove.h extern void lmrcImageMoveModePrint(FILE* fpt); 
lmrcImageMove.h extern void lmrcImageMove(mrcImage* out, mrcImage* in, double x, double y, double z, lmrcImageMoveMode mode); 
lmrcImageMultiplying.h extern void lmrcImageMultiplying(mrcImage* out, mrcImage* in, float value, long mode); 
lmrcImageMultiplying.h extern void lmrcImageMultiplying2(mrcImage* in, float value, long mode); 
lmrcImageNormalizing.h extern void lmrcImageNormalizing(mrcImage* out, mrcImage* in, lmrcImageNormalizingInfo* linfo, int mode); 
lmrcImageNormalizing.h extern void lmrcImageNormalizingModePrint(FILE* fpt, int mode); 
lmrcImagePad.h extern void lmrcImagePad(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, lmrcImagePadMode mode); 
lmrcImagePad.h extern void __lmrcImagePad0(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad1(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad2(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad3(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad4(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad5(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad6(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad7(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad8(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePad.h extern void __lmrcImagePad9(mrcImage* out, mrcImage* in, lmrcImagePadInfo* info, long mode); 
lmrcImagePixelSummationOfProbabilityGetByImage.h extern void lmrcImagePixelSummationOfProbabilityGetByImage(mrcImage* out, mrcImage* in, double *densityLevel, lmrcImageNoiseReductionByRelaxationInfo* info); 
lmrcImagePrint.h extern void mrcInfoPrint(FILE* fpt, mrcImage* mrc, mrcImageParaTypeInteger mode); 
lmrcImagePrint.h extern void mrcImagePSFilePrint(FILE* fpt, mrcImage* mrc, char* message, mrcImagePSFilePrintInfo info, long nContour, float* level, long mode); 
lmrcImagePrint.h extern void mrcImageASCIIFilePrint(FILE* fpt, mrcImage* mrc, char* message, float scale, long nContour, float* level, long mode); 
lmrcImageProjection.h extern void lmrcImageProjection(mrcImage* out, mrcImage* in, lmrcImageProjectionInfo* linfo); 
lmrcImageProportionalDensityLevelSetByImage.h extern void lmrcImageProportionalDensityLevelSetByImage(double *densityLevel, lmrcImageNoiseReductionByRelaxationInfo* info); 
lmrcImageROI2D.h extern void lmrcImageROIsInformationGet(FILE* fpt, lmrcImageROIsInfo* linfo); 
lmrcImageROI2D.h extern void lmrcImageSingleROI(mrcImage* out, mrcImage* in, lmrcImageSingleROIInfo* linfo, int mode); 
lmrcImageROI3D.h  extern void lmrcImageROI3D(mrcImage* out, mrcImage* in, lmrcImageROI3DInfo* info); 
lmrcImageRadialDistribution.h extern floatVector lmrcImageRadialDistribution( floatVector* dst, mrcImage* mrc, lmrcImageRadialDistributionInfo* linfo); 
lmrcImageRhoFiltering.h extern void lmrcImageRhoFiltering2(mrcImage* out3D, Matrix3D m, int index, long mode); 
lmrcImageRhoFiltering.h extern void lmrcImageRhoFiltering(mrcImage* out, mrcImage* in, Matrix3D m, long mode); 
lmrcImageSSDA.h extern void lmrcImageSSDAAutomaticThresholdAndFineSearch(mrcImage* in, mrcImage* ref, lmrcImageSSDAInfo* info, mrcImageParaTypeInteger mode ); 
lmrcImageSSDA.h extern void __lmrcImageResidualDifferenceAdditionForSSDA(mrcImage* in, mrcImage* ref, lmrcImageSSDAInfo* info, mrcImageParaTypeInteger mode ); 
lmrcImageSamplingUnitChange.h extern void lmrcImageSamplingUnitChange(mrcImage* out, mrcImage* in, lmrcImageSamplingUnitChangeInfo info, long mode); 
lmrcImageSecondNoiseReductionByRelaxation.h extern void lmrcImageSecondNoiseReductionByRelaxation(mrcImage* out, mrcImage* pPrev, mrcImage* q, double* densityLevel, lmrcImageNoiseReductionByRelaxationInfo* info); 
lmrcImageSecondNoiseReductionByRelaxationDijDimensionSet.h extern void lmrcImageSecondNoiseReductionByRelaxationDijDimensionSet(lmrcImageNoiseReductionByRelaxationInfo* info, lmrcImageSecondNoiseReductionByRelaxationDijStyleMode3* mode3); 
lmrcImageSecondNoiseReductionByRelaxationDijValueCalculate.h void lmrcImageSecondNoiseReductionByRelaxationDijValueCalculate(double* d, double* dsum, lmrcImageNoiseReductionByRelaxationInfo* info, lmrcImageSecondNoiseReductionByRelaxationDijStyleMode1* mode1, lmrcImageSecondNoiseReductionByRelaxationDijStyleMode2* mode2); 
lmrcImageSecondNoiseReductionByRelaxationDijValueSet.h extern void lmrcImageSecondNoiseReductionByRelaxationDijValueSet(double* d, lmrcImageNoiseReductionByRelaxationInfo* info, lmrcImageSecondNoiseReductionByRelaxationDijStyleMode1* mode1, lmrcImageSecondNoiseReductionByRelaxationDijStyleMode2* mode2); 
lmrcImageSecondNoiseReductionByRelaxationQValueSet.h extern void lmrcImageSecondNoiseReductionByRelaxationQValueSet(mrcImage* q, double* d, mrcImage* p0, double* r, lmrcImageNoiseReductionByRelaxationInfo* info); 
lmrcImageSecondNoiseReductionByRelaxationRValueSet.h void lmrcImageSecondNoiseReductionByRelaxationRValueSet( double *r, double *densityLevel, lmrcImageNoiseReductionByRelaxationInfo* info); 
lmrcImageSigmaCalculate.h extern double lmrcImageSigmaCalculate(mrcImage* in); 
lmrcImageSinogram.h extern void lmrcImageSinogramCreate(mrcImage* out, mrcImage* in, lmrcImageSinogramInfo* linfo, int mode); 
lmrcImageSinogram.h extern void lmrcImageSinogramCorrelation(mrcImage* out, mrcImage* in, mrcImage* ref, lmrcImageSinogramInfo* linfo, int mode); 
lmrcImageSolventFlattening.h extern void lmrcImageSolventFlattening(mrcImage* out, mrcImage* in, lmrcImageSolventFlatteningInfo* linfo, mrcImageInformation* info); 
lmrcImageSphere.h extern void lmrcImageSphere(lmrcImageSphereInfo* info, mrcImage* out); 
lmrcImageStudentCalculate.h extern double lmrcImageStudentCalculate(mrcImage* in, double sigma); 
lmrcImageSummationCalculate.h extern double lmrcImageSummationCalculate(mrcImage* in, double sigma); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFind(mrcImage* in, lmrcImageSymmetryFindInfo* linfo, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFindCheckByAdd(mrcImage* in, lmrcImageSymmetryFindInfo* linfo, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFindCheckByCorrelation(mrcImage* in, lmrcImageSymmetryFindInfo* linfo, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFindCheckByFourier(mrcImage* in, lmrcImageSymmetryFindInfo* linfo, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFindCheckByTTest(mrcImage* in, lmrcImageSymmetryFindInfo* linfo, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFindCheckBySRP(mrcImage* in, lmrcImageSymmetryFindInfo* linfo, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryAverage(mrcImage* out, mrcImage* in, int num, DescartesCoord centre, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFindResultOut(FILE* fpt, mrcImage* in, lmrcImageSymmetryFindInfo* linfo, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFindSubtraction(mrcImage* subout, mrcImage* in, lmrcImageSymmetryFindInfo* info, int mode); 
lmrcImageSymmetryFind.h extern void lmrcImageSymmetryFindModePrint(FILE* fpt); 
lmrcImageTransformDescartesIntoPolar.h extern void lmrcImageTransformDescartesIntoPolar( mrcImage* out, mrcImage* in, lmrcImageTransformDescartesIntoPolarInfo* linfo, lDescartesIntoPolarInfo* linfo2, long mode); 
lmrcImageTransformDescartesIntoPolar.h extern void lmrcImageDeterminationOfPolarAxisByAssumingNfold( mrcImageParaTypeRealCoord* centre, mrcImage* residue, mrcImage* in, lmrcImageDeterminationOfPolarAxisByAssumingNfoldInfo linfo, int mode); 
lmrcImageWindowing.h extern void lmrcImageWindowing(mrcImage* dst, mrcImage* src, lmrcImageWindowingInfo* info, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesStatDataGet(lmrcImagesStatDataGetInfo* linfo, mrcImage* srcs, int n, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesTTest(mrcImage* Prob, mrcImage* TTest, mrcImage* srcs1, int n1, mrcImage* src2, int n2, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesTTest2(mrcImage* Prob, mrcImage* TTest, mrcImage* Avg1, mrcImage* Var1, int n1, mrcImage* Avg2, mrcImage* Var2, int n2, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesFTest(mrcImage* FProb, mrcImage* FTest, mrcImage* srcs1, int n1, mrcImage* src2, int n2, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesFTest2(mrcImage* FProb, mrcImage* FTest, mrcImage* Avg1, mrcImage* Var1, int n1, mrcImage* Avg2, mrcImage* var2, int n2, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesVarianceMapInformationPrint(FILE* fpt); 
lmrcImagesStatDataGet.h extern void lmrcImagesVarianceMap(mrcImage* FProb, mrcImage* FTest, mrcImage* srcs1, int n1, mrcImage* src2, int n2, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesVarianceMap2(mrcImage* FProb, mrcImage* FTest, mrcImage* avg, mrcImage* var, mrcImage* avg1, mrcImage* var1, int n1, mrcImage* avg2, mrcImage* var2, int n2, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesVarianceAnalysisInformationPrint(FILE* fpt); 
lmrcImagesStatDataGet.h extern void lmrcImagesVarianceAnalysis(mrcImage* FProb, mrcImage* FTest, mrcImage** src, int* n1, int n2, long mode); 
lmrcImagesStatDataGet.h extern void lmrcImagesVarianceAnalysis2(mrcImage* FProb, mrcImage* FTest, mrcImage* avg, mrcImage* var, mrcImage* avgs, mrcImage* vars, int* n1, int n2, long mode); 
lpdb2mrcInfo.h extern void lpdb2mrc2d(mrcImage* mrc, pdbFile* pdb, lpdb2mrc2dInfo* info, char axis, long mode); 
lpdb2mrcInfo.h extern void lpdb2mrc3d(mrcImage* mrc, pdbFile* pdb, lpdb2mrc2dInfo* info, long mode); 
lpdbCoordInfo.h extern int lpdbDistanceCheck(pdbFile* pdb, pdbCoord p, pdbFileParaTypeReal distance, int mode); 
lpdbCoordInfo.h extern int lpdbDistanceNear(pdbFile* pdb, pdbCoord p, pdbFileParaTypeReal distance, int mode); 
lpdbCoordInfo.h extern int lpdbDistanceFar(pdbFile* pdb, pdbCoord p, pdbFileParaTypeReal distance, int mode); 
lpdbSelectedAtom.h extern pdbFileParaTypeInteger lpdbSelectedCa(pdbFile* pdbSelect, pdbFile* pdb, FILE* fpt); 
lpdbSurface.h extern void lpdbSurfaceAsTemperatureFactor(pdbFile* pdb, lpdbSurfaceInfo* info, lpdbSurfaceMode mode); 
ltlgData.h extern void ltlgDataReadFile(FILE* fpt, ltlgData* ltlg, ltlgDataParaTypeInteger mode, ltlgDataParaTypeInteger* status); 
ltlgData.h extern void ltlgDataWriteFile(FILE* fpt, ltlgData* ltlg, ltlgDataParaTypeInteger mode, ltlgDataParaTypeInteger* status); 
ltlgData.h extern void ltlgDataPrint(FILE* fpt, ltlgData ltlg, ltlgDataParaTypeInteger mode); 
ltlgData.h extern void ltlgDataPrintInfo(FILE* fpt, ltlgData ltlg); 
ltlgData.h extern void ltlgDataPrintllInfo(FILE* fpt, ltlgData ltlg); 
ltlgData.h extern void ltlgDataPrintllData(FILE* fpt, ltlgData ltlg); 
ltlgData.h extern void ltlgDataAllocate(ltlgData* ltlg, ltlgDataParaTypeInteger* status); 
ltlgData.h extern void ltlgDataFree(ltlgData* ltlg); 
ltlgData.h extern void ltlgDataWeightModifyFromFile(ltlgData* ltlg, FILE* fpt, long mode); 
ltlgData.h extern void ltlgDataWeightModify(ltlgData* ltlg, ltlgDataLLDataInfo Weight, long mode); 
ltlgData.h extern void ltlgDataWeightOfNEqualLOnly(ltlgData* ltlg); 
ltlgData.h extern long ltlgDataLNumberGet(ltlgData* ltlg, ltlgDataParaTypeInteger n, ltlgDataParaTypeInteger l); 
ltlgData.h extern ltlgDataParaTypeReal ltlgDataGet(ltlgData* ltlg, ltlgDataParaTypeInteger n, ltlgDataParaTypeInteger l, ltlgDataParaTypeReal r, ltlgDataParaTypeReal* data, ltlgDataType type, ltlgDataHow how); 
ltlgData.h extern ltlgDataParaTypeReal ltlgDataGet2(ltlgData* ltlg, long ll, ltlgDataParaTypeReal r, ltlgDataParaTypeReal* data, ltlgDataType type, ltlgDataHow how); 
mrcImage.h extern mrcStatusType mrcInit(mrcImage* mrc, char* filaname); 
mrcImage.h extern mrcStatusType mrcDefaultHeaderValueSet(mrcImage* mrc); 
mrcImage.h extern mrcStatusType mrcHiddenDataSet(mrcImage* mrc, long mode); 
mrcImage.h extern void mrcImageFree(mrcImage* mrc, char* message); 
mrcImage.h extern void mrcTailerInit(mrcImage* mrc, long mode); 
mrcImage.h extern mrcStatusType mrcFileRead (mrcImage* mrc, char* filename, char* message, long mode); 
mrcImage.h extern mrcStatusType mrcImageRead (mrcImage* mrc, char* filename, char* message, long mode); 
mrcImage.h extern mrcStatusType mrcHeaderRead(mrcImage* mrc, char* filename, char* message, long mode); 
mrcImage.h extern mrcStatusType mrcTailerRead(mrcImage* mrc, char* filename, char* message, long mode); 
mrcImage.h extern mrcStatusType mrcFileWrite (mrcImage* mrc, char* filename, char* message, long mode); 
mrcImage.h extern mrcStatusType mrcImageWrite (mrcImage* mrc, char* filename, char* message, long mode); 
mrcImage.h extern mrcStatusType mrcHeaderWrite(mrcImage* mrc, char* filename, char* message, long mode); 
mrcImage.h extern mrcStatusType mrcTailerWrite(mrcImage* mrc, char* filename, char* message, long mode); 
mrcImage.h extern mrcStatusType mrcFileWriteLowerResolution(mrcImage* mrc, char* filename, char* message, long sample , long mode); 
mrcImage.h extern inline double mrcImageDataGetbyAU(mrcImage* mrc, mrcImageParaTypeReal x , mrcImageParaTypeReal y , mrcImageParaTypeReal z , double* data, mrcPixelDataType mode, mrcPixelDataHowToGet how); 
mrcImage.h extern inline double mrcPixelDataGet(mrcImage* mrc, mrcImageParaTypeReal x , mrcImageParaTypeReal y , mrcImageParaTypeReal z , double* data, mrcPixelDataType mode, mrcPixelDataHowToGet how); 
mrcImage.h extern void mrcInfoSet(mrcImage* mrc, FILE* fptIn, FILE* fptOut, mrcImageParaTypeInteger mode); 
mrcImage.h extern void mrcImageDataSet(mrcImage* out, mrcImage* in, mrcImageParaTypeReal x, mrcImageParaTypeReal y, mrcImageParaTypeReal z, float phi, mrcImageDataSetMode mode); 
mrcImage.h extern inline double mrcImageDataSetbyAU(mrcImage* mrc, mrcImageParaTypeReal x , mrcImageParaTypeReal y , mrcImageParaTypeReal z , double data, mrcPixelDataType mode); 
mrcImage.h extern inline double mrcPixelDataSet(mrcImage* mrc, mrcImageParaTypeReal x , mrcImageParaTypeReal y , mrcImageParaTypeReal z , double data, mrcPixelDataType mode); 
mrcImage.h extern void mrcStatDataSet(mrcImage* mrc, mrcImageParaTypeInteger mode); 
mrcImage.h extern void lmrcImageXSection(mrcImage* proj, mrcImage* img, double Y); 
mrcImage.h extern void lmrcImageYSection(mrcImage* proj, mrcImage* img, double X); 
mrcImage.h extern void lmrcImageXProjection(mrcImage* proj, mrcImage* img); 
mrcImage.h extern void lmrcImageYProjection(mrcImage* proj, mrcImage* img); 
mrcImage.h extern void lmrcImageZProjection(mrcImage* proj, mrcImage* img); 
mrcImage.h extern void lmrcImageXYProjection(mrcImage* proj, mrcImage* img); 
mrcImage.h extern void lmrcImageYZProjection(mrcImage* proj, mrcImage* img); 
mrcImage.h extern void lmrcImageZXProjection(mrcImage* proj, mrcImage* img); 
mrcImage.h extern void lmrcImageHistgram(double** hist, unsigned long nlevel, mrcImage* img); 
mrcImage.h extern void lmrcImageHistgram2(double** hist, double delta, mrcImage* img); 
mrcImage.h extern void lmrcImageHistgram5(double** hist, unsigned long nlevel, double Low, double High, mrcImage* img); 
mrcImage.h extern void lmrcImageHistgram3(double** hist, unsigned long nlevel, mrcImage* img); 
mrcImage.h extern void lmrcImageHistgram4(double** hist, double delta, mrcImage* img); 
mrcImage.h extern void lmrcImageHistgram6(double** hist, unsigned long nlevel, double Low, double High, mrcImage* img); 
mrcImage.h extern void lmrcImageInformation(mrcImageInformation* info, mrcImage* img); 
mrcImage.h extern void lmrcImageCopy(mrcImage* dst, mrcImage* src, mrcImageParaTypeRealCoord to); 
mrcImage.h extern int IsImage(mrcImage* mrc, char* message, mrcImageParaTypeInteger mode); 
mrcImage.h extern int IsFT(mrcImage* mrc, char* message, mrcImageParaTypeInteger mode); 
mrcImage.h extern int IsFFT(mrcImage* mrc, char* message, mrcImageParaTypeInteger mode); 
mrcImage.h extern void mrcImageInfoSet(mrcImage* mrc, FILE* fptIn, FILE* fptOut, long mode); 
mrcImage.h extern void lmrcImageDevidedByImage(mrcImage* img, mrcImage* i1, mrcImage* i2); 
mrcImage.h extern void lmrcImagetMapForZero(mrcImage* t, mrcImage* avg, mrcImage* se); 
mrcImage.h extern void lmrcImageSN(mrcImage* sn, mrcImage* avg, mrcImage* sig); 
mrcImage.h extern void lmrcImageDevidedByReal(mrcImage* img, double d); 
mrcImage.h extern void lmrcImageDevidedByRealForOnlyPositive(mrcImage* img, double d); 
mrcImage.h extern void lmrcImageAddedByReal(mrcImage* img, double d); 
mrcImage.h extern void lmrcImageStdDev(mrcImage* sig, mrcImage* avg, mrcImage* avg2, long num); 
mrcImage.h extern void lmrcImageStdErr(mrcImage* sig, mrcImage* avg, mrcImage* avg2, long num); 
mrcImage.h extern void lmrcImageAdd(mrcImage* img2, mrcImage* img1, long* num); 
mrcImage.h extern void lmrcSQRImageAdd(mrcImage* img2, mrcImage* img1, long* num); 
mrcImage.h extern void lmrcImageToIntImage(mrcImage* dst, mrcImage* src, mrcImageParaTypeInteger mode); 
mrcImage.h extern void lfft2d(mrcImage* fft, mrcImage* img); 
mrcImage.h extern void lmrcImageFFT(mrcImage* fft, mrcImage* img, long mode); 
mrcImage.h extern void lmrcImageFFTFirstDimensionOnly(mrcImage* fft, mrcImage* img, long mode); 
mrcImage.h extern void lmrcFFTFGconj(mrcImage* out, mrcImage* in1, mrcImage* in2); 
mrcImage.h extern void lmrcFFTFxG(mrcImage* out, mrcImage* in1, mrcImage* in2); 
mrcImage.h extern void lmrcImageCorrelation(mrcImage* out, mrcImage* in, mrcImage* ref, long mode); 
mrcImage.h extern void lmrcImageCorrelationModePrint(FILE* fpt); 
mrcImage.h extern void lmrcImageCorrelationWithCTFCompensation(mrcImage* out, mrcImage* in, ctfInfo* inctf, mrcImage* ref, ctfInfo* refctf, long mode); 
mrcImage.h extern mrcStatusType mrcError(char* message, char* inRtnName, char* callRtnName, mrcStatusType status); 
mrcImage.h extern mrcStatusType mrcErrorMsg(FILE* fpt, char* message, char* inRtnName, char* callRtnName, mrcStatusType status); 
mrcImage.h extern floatVector* lmrcFSInfoXAxisMag(mrcImage* fft); 
mrcImage.h extern floatVector* lmrcFSInfoXAxisPhase(mrcImage* fft); 
mrcImage.h extern floatVector* lmrcFSInfoYAxisMag(mrcImage* fft); 
mrcImage.h extern floatVector* lmrcFSInfoYAxisPhase(mrcImage* fft); 
mrcImage.h extern floatVector* lmrcFSInfoScatteringAngularDistribution(mrcImage* fft); 
mrcImage.h extern floatVector* lmrcFSInfoScatteringAngularDistributionAverage(mrcImage* fft); 
mrcImage.h extern floatVector* lmrcFSInfoScatteringAngularDistributionSD(mrcImage* fft); 
mrcImage.h extern floatVector* lmrcFSInfoSpacing(mrcImage* fft); 
mrcImage.h extern void lmrcImageCheckSameSize(mrcImage* in, mrcImage* ref); 
mrcImage.h extern void lmrcImageCheckFFT(mrcImage* in, mrcImage* ref); 
mrcImage.h extern void lmrcImageSmoothing(mrcImage* dst, mrcImage* src, lmrcImageSmoothingInfo* info, long mode); 
mrcImage.h extern void lmrcImageCVE(mrcImage* dst, mrcImage* src, lmrcImageCVEInfo* info); 
mrcImage.h extern void lmrcImageTfunction(mrcImage* dst, mrcImage* src, lmrcImageTfunctionInfo* info, long mode); 
mrcImage.h extern void lmrcImageHighlightingInfoPrint(FILE* fpt); 
mrcImage.h extern void lmrcImageHighlighting(mrcImage* dst, mrcImage* src, lmrcImageHighlightInfo* info); 
mrcImage.h extern void lmrcImageLowPassFilter(mrcImage* dst, mrcImage* src, lmrcImageLowPassFilterInfo* info, long mode); 
mrcImage.h extern void lmrcImageHighPassFilter(mrcImage* dst, mrcImage* src, lmrcImageHighPassFilterInfo* info, long mode); 
mrcImage.h extern void lmrcImageBandPassFilter(mrcImage* dst, mrcImage* src, lmrcImageBandPassFilterInfo* info, long mode); 
mrcImage.h extern void lmrcImageShrink(mrcImage* dst, mrcImage* src, mrcImageParaTypeIntegerCoord S, long mode); 
mrcImage.h extern void lmrcImageShift(mrcImage* out, mrcImage* in, mrcImageParaTypeRealCoord shift, mrcPixelDataHowToGet mode); 
mrcImage.h extern void lmrcImageMultiCTFCompensationInfoInit(lmrcImageMultiCTFCompensationInfo* info); 
mrcImage.h extern void lmrcImageMultiCTFCompensationInfoSet(lmrcImageMultiCTFCompensationInfo* info); 
mrcImage.h extern void lmrcImageMultiCTFCompensation(mrcImage* dst, mrcImage* src, ctfInfo* ctf, long nfile, lmrcImageMultiCTFCompensationInfo info, long mode); 
mrcImage.h extern void lmrcImageCTFObservation(mrcImage* dst, mrcImage* src, ctfInfo* ctf, long mode); 
mrcImage.h extern void lmrcImageCTFCompensation(mrcImage* src, ctfInfo* ctf, long mode); 
mrcImage.h extern void lmrcImageCTFSN(mrcImage *outMrc, const mrcImage *inMrc, lmrcImageCTFSNInfo *info, long mode); 
mrcImage.h extern mrcImageFourierPowerSpectrum lmrcImageFourierPowerSpectrumMakeSpectrum(const mrcImage *inFFT, lmrcImageFourierPowerSpectrumInfo *info); 
mrcImage.h extern void lmrcImageFourierPowerSpectrumDeleteSpectrum(mrcImageFourierPowerSpectrum theSpectrum); 
mrcImage.h extern mrcImageFourierPowerSpectrum lmrcImageFourierPowerSpectrum(const mrcImage *inMrc, lmrcImageFourierPowerSpectrumInfo *info, long mode); 
mrcImage.h extern void lmrcImageRotation2D(mrcImage* dst, mrcImage* src, double angle, mrcPixelDataHowToGet mode); 
mrcImage.h extern void lmrcImageRotation2DPeriodicBoundary(mrcImage* dst, mrcImage* src, double angle, mrcPixelDataHowToGet mode); 
mrcImage.h extern void mrcImageSectionGet(mrcImage* dst, mrcImage* src, mrcImageParaTypeReal z, long mode); 
mrcImage.h extern double lmrcImageMaxDataGet(mrcImage* src, long mode); 
mrcImagePVM.h extern void mrcImageSendByPVM(mrcImage* mrc, int tid, int mode); 
mrcImagePVM.h extern void mrcImageSendHeaderByPVM(mrcImage* mrc, int tid, int mode); 
mrcImagePVM.h extern void mrcImageSendImageByPVM(mrcImage* mrc, int tid, int mode); 
mrcImagePVM.h extern void mrcImageSendTailerByPVM(mrcImage* mrc, int tid, int mode); 
mrcImagePVM.h extern void mrcImageRecieveByPVM(mrcImage* mrc, int tid, int mode); 
mrcImagePVM.h extern void mrcImageRecieveHeaderByPVM(mrcImage* mrc, int tid, int mode); 
mrcImagePVM.h extern void mrcImageRecieveImageByPVM(mrcImage* mrc, int tid, int mode); 
mrcImagePVM.h extern void mrcImageRecieveTailerByPVM(mrcImage* mrc, int tid, int mode); 
mrcImagefuncmin.h void mrcImagePeakFind(double* maxx ,double* maxy ,double* max ,mrcImage* in ,double ix ,double iy ,int mode ); 
mrcImagefuncmin.h float mrcImagePeakFinddummyfunc(float p[]); 
mrcImagefuncmin.h void powell(float p[], float **xi, int n, float ftol, int *iter, float *fret,float (*func)(float [] ) ); 
mrcImagefuncmin.h void linmin2(float p[], float xi[], int n, float ftol, float *fret, float (*func)(float [] ) ); 
mrcImagefuncmin.h float f1dim(float x ); 
mrcImagefuncmin.h float brent(float ax, float bx, float cx, float (*f)(float ), float tol,float *xmin); 
mrcImagefuncmin.h void mnbrak(float *ax, float *bx, float *cx, float *fa, float *fb, float *fc,float (*func)(float )); 
mrcRefUtil.h void lRandShuffle(); 
mrcRefUtil.h double lmrcImageZ1Normalization(mrcImage* in ,int z); 
mrcRefUtil.h double lmrcImageNormalization(mrcImage* in ,int mode); 
mrcRefUtil.h void lmrcImageRectangleGet(mrcImage* out ,mrcImage* in ,int blx ,int bly ,int trx ,int try ); 
mrcRefUtil.h void llmrcImageAdd(mrcImage* in1 ,mrcImage* in2); 
mrcRefUtil.h void llmrcImageSub(mrcImage*out ,mrcImage* in1 ,mrcImage* in2); 
mrcRefUtil.h void lmrcImageMultiplyingbyMrc(mrcImage* out ,mrcImage* in1 ,mrcImage* in2); 
mrcRefUtil.h void lmrcImageFTSetbyRArray(mrcImage* infft ,double** filterval ,int mode); 
mrcRefUtil.h double lmrcImageFTDataSetByRArray(double X ,double Y ,double Z ,double** filterval ,int mode); 
mrcRefUtil.h void lmrcImageMagnificationChange(mrcImage* out, mrcImage* in, double ratio); 
mrcRefUtil.h void lmrcImageCenterGet(mrcImage* out ,mrcImage* in ,int Nx ,int Ny ,int Nz ,float Cx ,float Cy ,float Cz ,int mode); 
mrcRefUtil.h void lmrcImageMultiplysingbyFile(mrcImage* in1 ,mrcImage* in2); 
mrcRefUtil.h double lmrcImageStandardDeviation(mrcImage* in); 
mrcRefUtil.h void lmrcRefFilamentProjction(mrcImage* out, mrcImage* in, mrcRefDegCoordinate phi ,mrcRefDegCoordinate omega ,mrcRefDegCoordinate alpha ,int sizex ,int sizey ); 
mrcRefUtil.h void lvec3mul(double* out ,double x ,double* in ); 
mrcRefUtil.h void lvec3add(double* out ,double* in1 ,double* in2); 
mrcRefUtil.h void lvec3sub(double* out ,double* in1 ,double* in2); 
mrcRefUtil.h void lmrcPixelLiGet(mrcImage* mrc, mrcImageParaTypeReal x, mrcImageParaTypeReal y, mrcImageParaTypeReal z, double* data, mrcPixelDataType mode, mrcPixelDataHowToGet how); 
mrcRefUtil.h void lestimateradian(mrcRefDegCoordinate* lradian); 
mrcRefUtil.h void lmrc3DZ1Clear(mrcImage* in ,int z); 
mrcRefUtil.h void lmrcRefHeaderSet(mrcImage* out ,mrcRefHeader* in); 
mrcRefUtil.h void lmrcRefHeaderGet(mrcRefHeader* out ,mrcImage* in); 
mrcRefUtil.h void lmrc3DZ1ImgPut(mrcImage* out ,mrcImage* in ,int z); 
mrcRefUtil.h void lmrc3DZ1ImgGet(mrcImage* out ,mrcImage* in ,int z); 
mrcRefUtil.h void lmrc3DZ1FtPut(mrcImage* out ,mrcImage* in ,int Z); 
mrcRefUtil.h void lmrc3DZ1FtGet(mrcImage* out ,mrcImage* in ,int Z); 
mrcRefUtil.h double lmrcRef2DImgCorrelation(mrcImage* in1 ,mrcImage* in2 ); 
mrcRefUtil.h void lmrcRefNormalization(mrcImage* in); 
mrcRefUtil.h int lmrcRefGetzCordinate(mrcRefDegCoordinate phi ,mrcRefDegCoordinate omega ,mrcRefDegCoordinate alpha ,mrcRefHeader* header); 
mrcRefUtil.h void lmrcRefGetdegreeCoordinate(mrcRefDegCoordinate* phi ,mrcRefDegCoordinate* omega ,mrcRefDegCoordinate* alpha ,int z ,mrcRefHeader* header); 
mrcRefUtil.h double lmrcRefSqrAverageZ1(mrcImage* in ,int z); 
mrcRefUtil.h double lmrcRefSqrAverage(mrcImage* in); 
mrcRefUtil.h double lmrcRefStandardDeviation(mrcImage* in); 
mrcRefUtil.h double lmrcRefVariationZ1(mrcImage* in ,int z); 
mrcRefUtil.h void lmrcRefCorHeaderSet(mrcImage* out ,mrcRefCorHeader* in); 
mrcRefUtil.h void lmrcRefCorHeaderGet(mrcRefCorHeader* out ,mrcImage* in); 
mrcRefUtil.h double lmrcRefCorrelationGet(mrcImage* in ,mrcRefDegCoordinate p1 ,mrcRefDegCoordinate w1 ,mrcRefDegCoordinate a1 ,mrcRefDegCoordinate p2 ,mrcRefDegCoordinate w2 ,mrcRefDegCoordinate a2 ,mrcRefCorHeader* header); 
mrcRefUtil.h int lmrcRefCorrelationGetCordinate(mrcRefDegCoordinate phi ,mrcRefDegCoordinate omega ,mrcRefDegCoordinate alpha ,mrcRefCorHeader* header ); 
mrcRefUtil.h void lmrcRefCorrelationGetRefxCordinate(mrcRefDegCoordinate* phi ,mrcRefDegCoordinate* omega ,mrcRefDegCoordinate* alpha ,int x ,mrcImage* in ,mrcRefCorHeader* header); 
mrcRefUtil.h void lmrcRefCorrelationGetRefyCordinate(mrcRefDegCoordinate* phi ,mrcRefDegCoordinate* omega ,mrcRefDegCoordinate* alpha ,int y ,mrcImage* in ,mrcRefCorHeader* header); 
mrcRefUtil.h void lmrcpwzCorHeaderSet(mrcImage* out ,mrcpwzCorHeader* in); 
mrcRefUtil.h void lmrcpwzCorHeaderGet(mrcpwzCorHeader* out ,mrcImage* in); 
mrcRefUtil.h extern double lbilinearInterpolation(double* image, unsigned long nx, unsigned long ny, double x, double y); 
mrcRefUtil.h extern double lcubicConvolutionInterpolation(double* image, unsigned long nx, unsigned long ny, double x, double y); 
mrcRefUtil.h extern double lpolyNominalInterpolation(double* image, unsigned long nx, unsigned long ny, double x, double y); 
mrcRefUtil.h extern void lpolyInitMatrix(double matrix[6][6], int m, int n); 
mrcRefUtil.h extern void lpolyInitVector(double vec[6], int m, int n, double* image, int nx, int ny); 
mrcRefUtil.h extern int lpolySolveMatrix(double matrix[6][6], double vec[6], double coefficient[6]); 
mrcRefUtil.h void lmrcImageFilteringbyFileForVariance(mrcImage* out ,mrcImage* in ,double** filterval ,int mode); 
mrcRefUtil.h double lmrcImageCorrelationinSpace(mrcImage* in,mrcImage* ref,int mode); 
nr2.h extern void nrerror(char error_txt[]); 
nr2.h extern float* vector(long nl, long nh); 
nr2.h extern void free_vector(float* v, long nl, long nh); 
nr2.h extern int* ivector(long nl, long nh); 
nr2.h extern void free_ivector(int* v, long nl, long nh); 
nr2.h extern void nrerror(char error_txt[]); 
nr2.h extern float** matrix(long nrl, long nrh, long ncl, long nch); 
nr2.h extern void free_matrix(float** m, long nrl, long nrh, long ncl, long nch); 
nr2.h extern void gaussj(float **a, int n, float **b, int m); 
nr2.h extern void ludcmp(float** a, int n, int* indx, float* d); 
nr2.h extern void lubksb(float** a, int n, int* indx, float b[]); 
nr2.h extern float gammln(float xx); 
nr2.h extern float gammp(float a, float x); 
nr2.h extern float gammq(float a, float x); 
nr2.h extern void gser(float* gamser, float a, float x, float* gln); 
nr2.h extern void gcf (float* gammcf, float a, float x, float* gln); 
nr2.h extern float erff(float x); 
nr2.h extern float erffc(float x); 
nr2.h extern float betai(float a, float b, float x); 
nr2.h extern float betacf(float a, float b, float x); 
nr2.h extern void sort(unsigned long n, float arr[]); 
nr2.h extern float nrselect(unsigned long k, unsigned long n, float arr[]); 
nr2.h extern void jacobi(float** a, int n, float d[], float** v, int* nrot); 
nr2.h extern void eigsrt(float d[], float** v, int n); 
nr2.h extern void wt1(float a[], unsigned long n, int isign, void (*wtstep)(float[], unsigned long, int)); 
nr2.h extern void daub4(float a[], unsigned long n, int isign); 
nr2.h extern void pwtset(int n); 
nr2.h extern void pwt(float a[], unsigned long n, int isign); 
nr2.h extern void wtn(float a[], unsigned long nn[], int ndim, int isign, void (*wtstep)(float[], unsigned long, int)); 
nr2.h extern void mnbrak(float* ax, float *bx, float* cx, float* fa, float* fb, float* fc, float (*func)(float)); 
nr2.h extern float brent(float ax, float bx, float cx, float (*f)(float), float tol, float* xmin); 
nr2.h extern void linmin(float p[], float xi[], int n, float *fret, float (*func)(float[])); 
nr2.h extern void frprmn(float p[], int n, float ftol, int *iter, float* fret, float (*func)(float[]), void (*dfunc)(float[], float [])); 
nr2.h extern void frprmn2(float p[], int n, float ftol, int *iter, float* fret, float (*func)(float[]), void (*dfunc)(float[], float [])); 
nr2.h extern void fit(float x[], float y[], int ndata, float sig[], int mwt, float* a, float* b, float* siga, float* sigb, float* chi2, float* q); 
nr2.h extern void mrqmin(float x[], float y[], float sig[], int n, float a[], int ia[], int ma, float** covar, float** alpha, float* chisq, void (*func)(float x, float p[], float* y, float dyda[], int na), float *alamda); 
pdbFile.h extern void pdbFileRead(FILE* fpt, pdbFile* pdb); 
pdbFile.h extern void pdbFileWrite(FILE* fpt, pdbFile* pdb); 
pdbFile.h extern void pdbFileWriteSecondaryStructure(FILE* fpt, pdbFileSecondaryStructure* second); 
pdbFile.h extern void pdbMatrixFileFormat(FILE* fpt); 
pdbFile.h extern void pdbMatrixFileRead(FILE* fpt, Matrix3D Matrix); 
pdbFile.h extern void pdbMatrixFileWrite(FILE* fpt, Matrix3D Matrix); 
pdbFile.h extern void pdbTrans(pdbFile* pdb, Matrix3D Matrix); 
pdbFile.h extern void pdbFileResidueSequenceNumberIncrementAll(pdbFile* pdb, int n); 
pdbFile.h extern void pdbFileResidueSequenceNumberIncrement(pdbFile* pdb, int n); 
pdbFile.h extern void pdbFileChainIdentifierSetAll(pdbFile* pdb, unsigned char c); 
pdbFile.h extern void pdbFileChainIdentifierSet(pdbFile* pdb, unsigned char c); 
pdbFile.h extern unsigned char pdbFileChainIdentifierGet(pdbFile* pdb); 
pdbFile.h extern pdbFileParaTypeReal pdbFileTemperatureFactorGet(pdbFile* pdb); 
pdbFile.h extern void pdbFileTemperatureFactorSet(pdbFile* pdb, double temp); 
pdbFile.h extern long pdbFileCoordSet(pdbFile* pdb, pdbFileParaTypeReal x, pdbFileParaTypeReal y, pdbFileParaTypeReal z); 
pdbFile.h extern long pdbFileCoordGet(pdbFile* pdb, pdbFileParaTypeReal* x, pdbFileParaTypeReal* y, pdbFileParaTypeReal* z); 
pdbFile.h extern long pdbFileResidueSequenceNumberGet(pdbFile* pdb); 
pdbFile.h extern char* pdbFileResidueNameGet(pdbFile* pdb,int mode); 
pdbFile.h extern pdbRecord* pdbFileTop(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFileNext(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFileNextAtom(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFileNextCA(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFilePrev(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFilePrevAtom(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFilePrevCA(pdbFile* pdb); 
pdbFile.h extern long pdbFileEnd(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsEndLine(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsAtom(pdbFile* pdb); 
pdbFile.h extern long pdbRecordIsNearby(pdbRecord record1,pdbRecord record2); 
pdbFile.h extern long pdbFileIsCA(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsNegative(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsPositive(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsCharge(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsSecondaryStructure(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsHelix(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsSheet(pdbFile* pdb); 
pdbFile.h extern long pdbFileIsTurn(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFileNew(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFileAppend(pdbFile* pdb); 
pdbFile.h extern pdbRecord* pdbFileRecordPrint(FILE* fpt, pdbFile* pdb); 
pdbFile.h extern pdbFileSecondaryStructureRecord* pdbFileSecondaryStructureRecordPrint(FILE* fpt, pdbFileSecondaryStructureRecord* second); 
pdbFile.h extern pdbRecord* pdbFileCAOnlyCopy(pdbFile* pdb, pdbFile* src); 
pdbFile.h extern void pdbFileCAOnlyCopyAll(pdbFile* pdb, pdbFile* src); 
pdbFile.h extern void pdbFileCopyAll(pdbFile* dst, pdbFile* src); 
pdbFile.h extern pdbRecord* pdbFileOneRecordCopy(pdbFile* dst, pdbFile* src); 
pdbFile.h extern void pdbFileOneProteinCopy(pdbFile* dst, pdbFile* src, long num); 
pdbFile.h extern void pdbRotationXYZ(pdbFile* pdb, pdbFileParaTypeReal rotx, pdbFileParaTypeReal roty, pdbFileParaTypeReal rotz); 
pdbFile.h extern void pdbRotationZYX(pdbFile* pdb, pdbFileParaTypeReal rotx, pdbFileParaTypeReal roty, pdbFileParaTypeReal rotz); 
pdbFile.h extern void pdbRotationZXY(pdbFile* pdb, pdbFileParaTypeReal rotx, pdbFileParaTypeReal roty, pdbFileParaTypeReal rotz); 
pdbFile.h extern void pdbRotationYXZ(pdbFile* pdb, pdbFileParaTypeReal rotx, pdbFileParaTypeReal roty, pdbFileParaTypeReal rotz); 
pdbFile.h extern int pdbSecondaryStructureSetFromPDB(pdbFile* pdb, pdbFileSecondaryStructure* second); 
pdbFile.h extern int pdbNoSecondaryStructureSetFromPDB(pdbFile* pdb, pdbFileSecondaryStructure* second); 
pdbFile.h extern int pdbSecondaryStructureAppend(pdbFileSecondaryStructure* second); 
pdbFile.h extern pdbFileSecondaryStructureMode pdbFileWithSecondaryStructure(pdbFile* pdb, pdbFileSecondaryStructure* second); 
pdbInfoGet.h extern void pdbInfoGet(pdbFile* pdb, pdbInfoData* info, long mode); 
psFile.h extern void psFileInit(psFile* ps, psParaTypeInteger mode); 
psFile.h extern void psFilePageStart(psFile* ps, psParaTypeInteger mode); 
psFile.h extern void psFilePageEnd(psFile* ps, psParaTypeInteger mode); 
psFile.h extern void psFileEnd(psFile* ps); 
psFile.h extern void psFileImage (psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileImageCircles (psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileImageCentre (psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileImageScale (psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileImageSpaceSet (psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileImageSpaceRotateSet (psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileImageSpaceRestore(psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileImageSpaceRotateRestore(psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileLineWidthSet (psFile* ps, float lineWidth); 
psFile.h extern void psFileLineDraw(psFile* ps, float x1,float y1,float x2,float y2); 
psFile.h extern void psFileStringStatusSet(psFile* ps, char* fontname, double fontsize); 
psFile.h extern void psFileStringDefaultStatusSet(psFile* ps); 
psFile.h extern void psFileString (psFile* ps, char* message, double x, double y, psParaTypeInteger mode); 
psFile.h extern void psFileContour(psFile* ps, psImageInfo im, psParaTypeInteger mode); 
psFile.h extern void psFileCircleCreate(psFile* ps, float cx, float cy, float r, long mode); 
psFile.h extern void psFileRead(psFile* ps, FILE* fpt, long mode); 
psFile.h extern long psFileIsStartPage(psFile* ps, char* s); 
psFile.h extern long psFileIsEndPage(psFile* ps, char* s); 
tkImgFmtMRC.h extern int tkmrcInfoCmdSet(Tcl_Interp* interp); 
tkImgFmtMRC.h extern int tkmrcInfoSetCmd(ClientData clientData, Tcl_Interp* interp, int argc, char* argv[]); 
tkImgFmtMRC.h extern int tkmrcInfoGetCmd(ClientData clientData, Tcl_Interp* interp, int argc, char* argv[]); 
tkImgFmtMRC.h extern Tk_PhotoImageFormat tkImgFmtMRC; 
tkctfInfo.h extern int tkctfInfoCmdSet(Tcl_Interp* interp); 
tkctfInfo.h extern int tkctfInfoFileCmd(ClientData clientData, Tcl_Interp* interp, int argc, char* argv[]); 
tkctfInfo.h extern int tkctfInfoSetCmd(ClientData clientData, Tcl_Interp* interp, int argc, char* argv[]); 
tkctfInfo.h extern int tkctfInfoGetCmd(ClientData clientData, Tcl_Interp* interp, int argc, char* argv[]); 
tkctfInfo.h extern int tkctfInfoCalculateCmd(ClientData clientData, Tcl_Interp* interp, int argc, char* argv[]); 
tkctfInfo.h extern int tkctfInfoEvaluateCmd(ClientData clientData, Tcl_Interp* interp, int argc, char* argv[]); 
