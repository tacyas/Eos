Array.h typedef unsigned long arrayParaTypeInteger;\n
Array.h typedef float         arrayParaTypeReal;\n
Array.h typedef struct Array {\n	arrayParaTypeInteger dim;\n	arrayParaTypeInteger n[ARRAY_MAX_DIMENSION];\n	arrayParaTypeReal*   A;\n} Array;\n
Contour.h typedef long   contourParaTypeInteger;\n
Contour.h typedef double contourParaTypeReal;\n
Contour.h typedef struct contourParaElement {\n    contourParaTypeInteger n;\n    contourParaTypeReal    Min;\n    contourParaTypeReal    Max;\n    contourParaTypeReal    d;\n} contourParaElement;\n
Contour.h typedef struct contourImage {\n    contourParaTypeReal* image;\n    contourParaTypeReal* image2;\n    contourParaElement   x;\n    contourParaElement   y;\n    contourParaElement   z;\n    contourParaElement   w;\n    contourParaElement   h;\n    contourParaTypeReal  section;\n} contourImage;\n
Contour.h typedef struct contourPoint {\n    contourParaTypeReal    x;\n    contourParaTypeReal    y;\n    contourParaTypeReal    z;\n} contourPoint;\n
Contour.h typedef struct contourALine contourALine;\n
Contour.h struct contourALine {\n    contourALine* before;\n    contourPoint p0;\n    contourPoint p1;\n    contourPoint p2;\n    contourALine* next;\n};\n
Contour.h typedef struct contourLine contourLine;\n
Contour.h struct contourLine {\n    contourALine* top;\n    contourALine* current;\n    contourParaTypeInteger n;\n    contourLine*  next;\n};\n
Contour.h typedef struct contourLines contourLines;\n
Contour.h struct contourLines {\n    contourLine*  top;\n    contourLine*  current;\n    contourParaTypeInteger n;\n    contourLines* next;\n};\n
Contour.h typedef struct contourLinesSet contourLinesSet;\n
Contour.h struct contourLinesSet {\n    contourLines*  top;\n    contourLines*  current;\n    contourParaTypeInteger n;\n    contourLinesSet* next;\n};\n
Contour.h typedef struct contourArgs {\n    contourParaTypeReal f00;  \n    contourParaTypeReal f01;\n    contourParaTypeReal f11;\n    contourParaTypeReal f10;\n    contourParaTypeReal f000; \n    contourParaTypeReal f001;\n    contourParaTypeReal f010;\n    contourParaTypeReal f011;\n    contourParaTypeReal f100;\n    contourParaTypeReal f101;\n    contourParaTypeReal f110;\n    contourParaTypeReal f111;\n    contourParaTypeReal x;\n    contourParaTypeReal y;\n    contourParaTypeReal z;\n    contourParaTypeReal dx;\n    contourParaTypeReal dy;\n    contourParaTypeReal dz;\n} contourArgs;\n
Contour.h typedef enum contourFlag {\n    contourFlagXSection,\n    contourFlagYSection,\n    contourFlagZSection,\n    contourFlag3D\n} contourFlag;\n
Map2D.h typedef float Map2DParaTypeReal;\n
Map2D.h typedef long  Map2DParaTypeInteger;\n
Matrix3D.h typedef float matrix3DParaTypeReal;\n
Matrix3D.h typedef matrix3DParaTypeReal Matrix3D[MATRIX_3D_WIDTH][MATRIX_3D_HEIGHT];\n
Memory.h typedef void* Memory;\n
Memory.h extern Memory memoryAllocate(size_t byte, char* message);\n
Memory.h extern Memory memoryCopy(Memory dst, Memory src, size_t byte);\n
Memory.h extern Memory memoryDuplicate(Memory src, size_t byte);\n
Memory.h extern Memory memoryClear(Memory src, size_t, char n);\n
Memory.h extern Memory memoryByteSwap(Memory src, size_t, int n);\n
Random.h typedef double randomParaTypeReal;\n
String.h typedef char*         String;\n
String.h typedef unsigned long stringParaTypeInteger;\n
String.h typedef float         stringParaTypeReal;\n
Vector.h typedef struct floatVector {\n	unsigned long size;\n	float*        data;\n} floatVector;\n
Vector.h typedef struct doubleVector {\n	unsigned long size;\n	double*        data;\n} doubleVector;\n
avsFile.h typedef int avsFileParaTypeInteger;\n
avsFile.h typedef float avsFileParaTypeReal;\n
avsFile.h typedef struct avsFileField {\n	avsFileParaTypeInteger ndim;	\n	avsFileParaTypeInteger dim1;	\n	avsFileParaTypeInteger dim2;	\n	avsFileParaTypeInteger dim3;	\n	avsFileParaTypeInteger nspace;\n	avsFileParaTypeInteger veclen;\n	avsFileFieldDataType   dataType;\n	avsFileFieldType       type;\n	char**                 Label;\n	void*                  Image;\n	float**                Coord;\n} avsFileField;\n
avsFile.h typedef struct avsFileUCDComponentData {\n	avsFileParaTypeReal* data;\n} avsFileUCDComponentData;\n
avsFile.h typedef struct avsFileUCDComponent {\n	char* Label;\n	char* Unit;\n	avsFileParaTypeInteger nElement;\n} avsFileUCDComponent;\n
avsFile.h typedef struct avsFileUCDNode {\n	avsFileParaTypeInteger   ID;\n	avsFileParaTypeReal      x;\n	avsFileParaTypeReal      y;\n	avsFileParaTypeReal      z;\n	avsFileUCDComponentData* Component;\n} avsFileUCDNode;\n
avsFile.h typedef struct avsFileUCDCell {\n	avsFileParaTypeInteger ID;\n	avsFileParaTypeInteger MaterialID;\n	avsFileUCDCellType     Type;\n	avsFileUCDNode**       Node;\n	avsFileUCDComponentData* Component;\n} avsFileUCDCell;\n
avsFile.h typedef struct avsFileUCD {\n	avsFileParaTypeInteger nNode;\n	avsFileUCDNode*        Node;\n	avsFileParaTypeInteger nNodeComponent;\n	avsFileUCDComponent*   NodeComponent;\n	avsFileParaTypeInteger nCell;\n	avsFileUCDCell*        Cell;\n	avsFileParaTypeInteger nCellComponent;\n	avsFileUCDComponent*   CellComponent;\n	avsFileParaTypeInteger nModel;\n} avsFileUCD;\n
avsFile.h typedef struct avsFile {\n    avsFileType FileType;\n	avsFileField field;\n	avsFileUCD   UCD;\n} avsFile;\n
avsFile.h extern "C" {\nextern void avsFileInit(avsFile* avs, long mode);\nextern void avsFileFieldInit(avsFileField* avs, long mode);\nextern void avsFileUCDInit(avsFileUCD* avs, long mode);\nextern void avsFileUCDGlobalInit(avsFileUCD* avs, long mode);\nextern void avsFileUCDNodeComponentInit(avsFileUCD* avs, int ID, int nElement, char* Label, char* Unit, long mode);\nextern void avsFileUCDCellComponentInit(avsFileUCD* avs, int ID, int nElement, char* Label, char* Unit, long mode);\nextern void avsFileWrite(avsFile* avs, FILE* fpt, long mode);\nextern void avsFileUCDWrite(avsFileUCD* avs, FILE* fpt, long mode);\nextern void avsFileFieldWrite(avsFileField* avs, FILE* fpt, long mode);\nextern void avsFileUCDNodeSet(avsFileUCD* avs, \n                  avsFileParaTypeInteger NodeID, \n                  avsFileParaTypeReal x, \n                  avsFileParaTypeReal y, \n                  avsFileParaTypeReal z);\nextern void avsFileUCDNodeDataSet(avsFileUCD* avs, \n                      avsFileParaTypeInteger NodeID, \n                      avsFileParaTypeInteger indexComponent,\n                      avsFileParaTypeInteger indexElement, \n                      double data);\nextern void\navsFileUCDLineTypeCellSet(avsFileUCD* avs, \n                  avsFileParaTypeInteger CellID, \n                  avsFileParaTypeInteger MaterialID,\n                  avsFileUCDNode* NodeID0,\n                  avsFileUCDNode* NodeID1);\nextern void\navsFileUCDCellDataSet(avsFileUCD* avs, \n                      avsFileParaTypeInteger CellID, \n                      avsFileParaTypeInteger indexComponent,\n                      avsFileParaTypeInteger indexElement, \n                      double data);\n};\n
ctfDeterminationFromPhaseComparison.h typedef struct ctfInfoDeterminationFromPhaseComparison {\n	ctfInfo val;\n	ctfInfo min;\n	ctfInfo max;\n	ctfInfo del;\n	mrcImageParaTypeReal Rmax;\n	long mode;\n} ctfInfoDeterminationFromPhaseComparison;\n
ctfInfo.h typedef struct moleculrEnvelope {\n	char* filename; \n	int   nR;\n	float* R;\n	float* Envelope;\n	int    mode;	\n} molecularEnvelope;\n
ctfInfo.h typedef struct ctfInfo {\n	float kV;      \n	float defocus; \n	float Cc;      \n	float dE; \n	float Cs;      \n	float Ain;     \n	long  flagWin;  \n	float CutLow;  \n	float CutHigh; \n	float I0;      \n	float Isignal; \n	float ratioOfAmpToPhase; \n	float Inoise;  \n	long  flagWhiteNoise;\n	float WhiteNoise;  \n	float Inoise2; \n	long  flagWhiteNoise2;\n	float WhiteNoise2; \n	float defocus2D[2];      \n	float defocus0axis;      \n	long mode;\n	long  flagMagnification;	\n	float Magnification;\n	ctfInfoMTFMode MTFMode;\n	float BofMTF;  \n	float BofMTF2; 	\n	float WeightOfSecondTermForMTF; \n	float MolecEnv;                   \n	long  flagMolecEnvTable;\n	molecularEnvelope MolecEnvTable;\n	float flagElastic;\n	float Elastic;\n	float ElasticShift;\n	float ElasticWidth;\n	float ElasticRing;\n	float ElasticRingPosition;\n	float ElasticRingWidth;\n	long  flagVibration;\n	long  VibrationMode;\n	float BofVibration;\n	long flagAliasing;\n	float NyquistFrequency;\n	long flagSampling; \n	long flagWithInElastic;\n	float InElasticGaussian;\n	long flagWithInElasticTable;\n	molecularEnvelope InElasticEnvTable;	\n	long flagInElastic;\n	float InElastic;\n	float InElasticShift;\n	float InElasticWidth;\n	float InElasticRing;\n	float InElasticRingPosition;\n	float InElasticRingWidth;\n} ctfInfo;\n
ctfZeroPoint.h typedef struct ctfInfoZeroPoint {\n	float RMax;      \n	float dR;        \n	int   N;         \n	long mode;\n} ctfInfoZeroPoint;\n
emData.h typedef char  emDataTypeChar;\n
emData.h typedef short emDataTypeIntegerShort;\n
emData.h typedef int   emDataTypeInteger;\n
emData.h typedef float emDataTypeFloat;\n
emData.h typedef struct emDataHeaderCont {\n	emDataTypeIntegerShort type1;					\n	emDataTypeIntegerShort type2;			    	\n	emDataTypeInteger      Nx;				    \n	emDataTypeInteger      Ny;					\n	emDataTypeInteger      Nz;					\n	emDataTypeChar         Comment[96];		    \n	emDataTypeFloat        unknown[36];		    \n	emDataTypeChar         ExtendedCode[4]; 	\n	emDataTypeFloat        kV; 		            \n	emDataTypeFloat        Cs; 		            \n	emDataTypeFloat        UnknownFloat413; 	\n	emDataTypeFloat        Magnification;        \n	emDataTypeFloat        PostMagnification;   \n	emDataTypeFloat        Cc;                  \n	emDataTypeFloat        Defocus;             \n	emDataTypeFloat        UnknownFloat440[8];  \n	emDataTypeFloat        UnknownFloat500[5];    \n	emDataTypeFloat        ccdSize;               \n	emDataTypeFloat        offsetX;               \n	emDataTypeFloat        offsetY;               \n	emDataTypeFloat        pixelSize;            \n	emDataTypeFloat        binning;              \n	emDataTypeFloat        readOutSpeed;         \n	emDataTypeFloat        gain;                 \n	emDataTypeFloat        sensitivity;          \n	emDataTypeFloat        time;                 \n	emDataTypeFloat        flatField;            \n	emDataTypeFloat        UnknownFloat574;      \n	emDataTypeFloat        average;              \n	emDataTypeFloat        unknown604;           \n	emDataTypeFloat        unknown610;           \n	emDataTypeFloat        unknown613;           \n	emDataTypeFloat        unknown620;           \n	emDataTypeFloat        unknown623;           \n	emDataTypeFloat        min;                  \n	emDataTypeFloat        max;                  \n	emDataTypeFloat        StatisticQuality;    \n	emDataTypeFloat        UnknownFloat644[23];  \n} emDataHeaderCont;\n
emData.h typedef union emDataHeader {\n	char  All[512]; \n	float Float[128];\n	int   Int[128];\n	emDataHeaderCont Cont;\n} emDataHeader;\n
emData.h typedef struct emData {\n	emDataHeader Header;\n	int          version;\n	unsigned char*          Image;\n	emDataTypeIntegerShort* ShortImage;  \n} emData; \n
gifFile.h typedef struct gifFileHeader {\n	char sig[3];\n	char ver[3];\n} gifFileHeader;\n
gifFile.h typedef struct gifFileScreenDesc {\n	unsigned short scwidth;\n	unsigned short scheight;\n	unsigned char  flags;\n	unsigned char  bgclr;\n	unsigned char  pixasp;\n} gifFileScreenDesc;\n
gifFile.h typedef struct gifFileImageDesc {\n	unsigned char id;\n	unsigned short xleft;\n	unsigned short ytop;\n	unsigned short imwidth;\n	unsigned short imheight;\n	unsigned char  flags;\n} gifFileImageDesc;\n
gifFile.h typedef struct gifFileColorTable {\n	unsigned char r;\n	unsigned char g;\n	unsigned char b;\n} gifFileColorTable;\n
gifFile.h typedef struct gifFileImageDefinition {\n	gifFileImageDesc   Desc;\n	gifFileColorTable* LCT; \n} gifFileImageDefinition;\n
gifFile.h typedef struct gifFileCtrlExtensions {\n	unsigned char  id;\n	unsigned char  label; \n	unsigned char  size;\n	unsigned char  flags; \n	unsigned short delay;\n	unsigned char  trcrl; \n} gifFileCtrlExtensions;\n
gifFile.h typedef struct gifFileCommentExtensions {\n	unsigned char id;\n	unsigned char label;\n} gifFileCommentExtensions;\n
gifFile.h typedef struct gifFileTextExtensions {\n	unsigned char  id;\n	unsigned char  label; \n	unsigned char  size;\n	unsigned char  xleft; \n	unsigned short ytop;\n	unsigned char  txwidth; \n	unsigned char  txheight;\n	unsigned char  cewidth; \n	unsigned char  ceheight;\n	unsigned char  fgclr; \n	unsigned short bgclr;\n} gifFileTextExtensions;\n
gifFile.h typedef struct gifFileApplicationExtensions {\n	unsigned char  id;\n	unsigned char  label; \n	unsigned char  size;\n	char           apname[8];\n	char           apcode[3];\n} gifFileApplicationExtensions;\n
gifFile.h typedef struct gifFile {\n	gifFileHeader     		Header;\n	gifFileScreenDesc 		ScrDesc;\n	gifFileColorTable*   	GCT;\n	long nImage;\n	gifFileImageDefinition* ImageDef;\n	char                	Tailer;\n} gifFile;\n
gifFile.h typedef short WORD;\n
gifFile.h typedef unsigned short UWORD;\n
gifFile.h typedef char TEXT;\n
gifFile.h typedef unsigned char UTINY;\n
gifFile.h typedef long LONG;\n
gifFile.h typedef unsigned long ULONG;\n
gifFile.h typedef int INT;\n
hf2000.h typedef int   hf2000ParaTypeInteger;\n
hf2000.h typedef float hf2000ParaTypeReal;\n
hf2000.h typedef struct hf2000Info {\n	char* deviceName;\n	struct termios IO;\n	struct termios prevIO;\n	int fd;\n	int flagClient;	\n	int flagServer;	\n	int serverSocket;\n	int serverFD;\n	char* hostname;\n	u_short port;\n	u_short maxPort;\n	u_short portSpeed;\n} hf2000Info;\n
lDescartesIntoPolar.h typedef struct DescartesCoord {\n	double x;	\n	double y;	\n	double z;	\n} DescartesCoord;\n
lDescartesIntoPolar.h typedef struct PolarCoord {\n	double r;	\n	double theta;	\n	double phi;	\n} PolarCoord;\n
lDescartesIntoPolar.h typedef struct lDescartesIntoPolarInfo {\n	DescartesCoord centre;\n	DescartesCoord xaxis;\n	DescartesCoord yaxis;\n	DescartesCoord zaxis;\n	DescartesCoord xaxisInv;\n	DescartesCoord yaxisInv;\n	DescartesCoord zaxisInv;\n} lDescartesIntoPolarInfo;\n
lFRET.h typedef double energyTransferParaTypeReal;\n
lFRET.h typedef struct energyTransferPoint {\n    int nID;\n    char* ID;\n    energyTransferPointMode mode;\n    energyTransferParaTypeReal x;\n    energyTransferParaTypeReal y;\n    energyTransferParaTypeReal z;\n    energyTransferParaTypeReal rootB;\n    energyTransferParaTypeReal radius; \n    energyTransferParaTypeReal probability;\n} energyTransferPoint;\n
lFRET.h typedef struct energyTransferConnect {\n    int nID;\n    char* ID;\n    int nID2;\n    char* ID2;\n    energyTransferPointMode    mode;   \n    energyTransferParaTypeReal length; \n    energyTransferParaTypeReal estimatedLength;\n    energyTransferParaTypeReal rootB;\n    energyTransferParaTypeReal estimatedRootB;\n} energyTransferConnect;\n
lFRET.h typedef struct energyTransferData {\n    int numFix; \n    energyTransferPoint* fix;\n    int numUnfix;\n    energyTransferPoint* unfix;\n    int numConnect;\n    energyTransferConnect* connect;\n    energyTransferParaTypeReal rms;\n    energyTransferParaTypeReal rmsRootB;\n} energyTransferData;\n
lFRET.h typedef struct lenergyTransferModelCheckInfo {\n    int flagStartingDelta;\n    energyTransferParaTypeReal sdx;\n    energyTransferParaTypeReal sdy;\n    energyTransferParaTypeReal sdz;\n    energyTransferParaTypeReal neglect;\n    int excludedPDB;\n	int restriction;\n    int iter;\n} lenergyTransferModelCheckInfo;\n
largeIP.h typedef unsigned short largeIPImageType;\n
largeIP.h typedef long  largeIPParaTypeInteger;\n
largeIP.h typedef float largeIPParaTypeReal;\n
largeIP.h typedef struct largeIPParaTypeIntCoord {\n	largeIPParaTypeInteger x;\n	largeIPParaTypeInteger y;\n} largeIPParaTypeIntCoord;\n
largeIP.h typedef struct largeIPImageInfo {\n	largeIPParaTypeIntCoord start;\n	largeIPParaTypeIntCoord step;\n	largeIPParaTypeIntCoord length;\n} largeIPSubImageInfo;\n
largeIP.h typedef struct largeIP {\n        char    name[10];\n        char    vers[10];\n        char    crnm[20];       \n        char    crsy[12];\n        float   alng;\n        float   blng;\n        float   clng;\n        float   alfa;\n        float   beta;\n        float   gamm;\n        char    spgr[12];\n        float   mosc;\n        char    memo[80];       \n        char    res1[84];\n        char    date[12];\n        char    opnm[20];       \n        char    trgt[4];        \n        float   wlng;           \n        char    mcro[20];       \n        float   m2ta;\n        char    colm[20];       \n        char    filt[4];\n        float   camr;           \n        float   vltg;           \n        float   crnt;           \n        char    focs[12];       \n        char    optc[80];\n        int             cyld;\n        float   weis;           \n        char    res2[56];\n        char    mnax[4];\n        char    bmax[4];\n        float   phi0;           \n        float   phis;           \n        float   phie;           \n        long    oscn;           \n        float   fext;           \n        float   drtx;           \n        float   drtz;           \n        float   omga;\n        float   fkai;\n        float   thta;\n        float   mu;                     \n        char    res3[204];\n        long    xpxl;           \n        long    zpxl;           \n        float   xsiz;           \n        float   zsiz;           \n        long    rlng;           \n        long    rnum;           \n        long    ipst;           \n        long    ipnm;           \n        float   rato;\n        float   ft_1;\n        float   ft_2;\n        char    host[10];\n        char    ip[10];\n        int             dr_x;\n        int             dr_z;\n        int             drxz;\n        char    res4[180];\n        char    file[16];\n        char    cmnt[20];\n        char    smpl[20];\n        int             iext;\n        int             reso;\n        int             save;\n        long    dint;\n        int             byte;\n        int             init;\n        int             ipus;\n        int             dexp;\n        char    res5[936];\n        char    res6[2048];\n} largeIPHeader;\n
largeIP.h typedef struct largeIPHeader {\n        char    name[10];\n        char    vers[10];\n        char    crnm[20];       \n        char    crsy[12];\n        unsigned char    alng[4]; \n        unsigned char    blng[4];                            \n        unsigned char    clng[4]; \n		unsigned char    alfa[4]; \n        unsigned char    beta[4]; \n		unsigned char    gamm[4]; \n        char    spgr[12];\n		unsigned char    mosc[4]; \n        char    memo[80];       \n        char    res1[84];\n        char    date[12];\n        char    opnm[20];       \n        char    trgt[4];        \n        unsigned char    wlng[4];        \n        char    mcro[20];       \n        unsigned char    m2ta[4]; \n        char    colm[20];       \n        char    filt[4];\n        unsigned char    camr[4];        \n        unsigned char    vltg[4];        \n        unsigned char    crnt[4];        \n        char    focs[12];       \n        char    optc[80];\n        unsigned char    cyld[4]; \n        unsigned char    weis[4];        \n        char    res2[56];\n        char    mnax[4];\n        char    bmax[4];\n        unsigned char    phi0[4];        \n        unsigned char    phis[4];        \n        unsigned char    phie[4];        \n        unsigned char    oscn[4];        \n        unsigned char    fext[4];        \n        unsigned char    drtx[4];        \n        unsigned char    drtz[4];        \n		unsigned char    omga[4]; \n        unsigned char    fkai[4]; \n        unsigned char    thta[4]; \n        unsigned char    mu[4];          \n        char    res3[204];\n        unsigned char    xpxl[4];        \n        unsigned char    zpxl[4];        \n        unsigned char    xsiz[4];        \n		unsigned char    zsiz[4];        \n		unsigned char    rlng[4];        \n		unsigned char    rnum[4];        \n        unsigned char    ipst[4];        \n        unsigned char    ipnm[4];        \n        unsigned char    rato[4]; \n        unsigned char    ft_1[4]; \n        unsigned char    ft_2[4]; \n        char    host[10];\n        char    ip[10];\n        unsigned char    dr_x[4]; \n        unsigned char    dr_z[4]; \n        unsigned char    drxz[4]; \n        char    res4[180];\n        char    file[16];\n        char    cmnt[20];\n        char    smpl[20];\n        unsigned char   iext[4]; \n        unsigned char   reso[4]; \n        unsigned char   save[4]; \n        unsigned char   dint[4]; \n        unsigned char   byte[4]; \n        unsigned char   init[4]; \n        unsigned char   ipus[4]; \n        unsigned char   dexp[4]; \n        char    res5[936];\n        char    res6[2048];\n} largeIPHeader;\n
largeIP.h typedef struct {\n	largeIPHeader Header;\n	unsigned short** Image;\n} largeIP;\n
lhf2000LenzCurrent.h typedef struct hf2000LenzCurrent {\n	hf2000ParaTypeInteger D;\n	hf2000ParaTypeReal    A;\n} hf2000LenzCurrent;\n
lhf2000LenzCurrent.h typedef struct lhf2000LenzCurrentInfo {\n	hf2000LenzCurrent C1;\n	hf2000LenzCurrent C2;\n	hf2000LenzCurrent C3;\n	hf2000LenzCurrent OBJ;\n	hf2000LenzCurrent I1;\n	hf2000LenzCurrent I2;\n	hf2000LenzCurrent P1;\n	hf2000LenzCurrent P2;\n} lhf2000LenzCurrentInfo;\n
lhf2000SpecimenPosition.h typedef struct lhf2000SepecimenPositionInfo {\n	float  x;\n	int   ix;\n	float  y;\n	int   iy;\n} lhf2000SpecimenPositionInfo;\n
llData.h typedef struct llComplex {\n    llDataParaTypeReal      R;   \n    llDataParaTypeReal      RR;  \n    llDataParaTypeReal      F;  \n    llDataParaTypeReal      PHI;\n    llDataParaTypeReal      Re; \n    llDataParaTypeReal      Im;\n} llComplex;\n
llData.h typedef struct oneLLData {\n    char					Head[DefaultStringLength]; \n	llDataParaTypeReal      Weight;  \n    llDataParaTypeInteger   nn;      \n    llDataParaTypeInteger   nl;      \n    llDataParaTypeInteger   nm;      \n    llComplex*              data;    \n	llDataParaTypeInteger   Side;    \n    llDataParaTypeInteger   nR;      \n	llDataParaTypeReal     Z;   \n	llDataParaTypeInteger iZ;\n	llDataParaTypeReal     RMin; \n	llDataParaTypeInteger iRMin;\n	llDataParaTypeReal     RMax;\n	llDataParaTypeInteger iRMax;\n	llDataParaTypeReal    delBR;\n	llDataParaTypeReal    Fmax;  \n    long dummy;\n} oneLLData;\n
llData.h typedef struct llData {\n    llDataMode            mode;\n    llDataParaTypeInteger llMax;\n    llDataParaTypeInteger nRMax;\n    llDataParaTypeReal    truePitch;\n    llDataParaTypeReal    Weight;\n    llDataParaTypeReal    rScale;\n	llDataPole            Pole;\n	llDataParaTypeReal    Side;\n	llDataParaTypeInteger RRInfoSet;\n	llDataParaTypeInteger FmaxSet;\n	llDataParaTypeInteger RValueSet;\n	llDataParaTypeInteger ZValueSet;\n    oneLLData* LL;\n} llData;\n
llData.h typedef struct llDataBoth {\n	llData Nea;\n	llData Far;\n} llDataBoth;\n
llData.h typedef struct llDataAttributes {\n    llDataMode            mode;\n    llDataParaTypeInteger llMax;\n    llDataParaTypeInteger nRMax;\n    llDataParaTypeReal    truePitch;\n    llDataParaTypeReal    Weight;\n    llDataParaTypeReal    rScale;\n	llDataPole            Pole;\n	llDataParaTypeReal    Side;\n    oneLLData* LL;\n} llDataAttributes;\n
llData.h typedef struct onelllDataIntensityInformation {\n	int LL;\n	int n;\n	int l;\n	int flagI;\n	double I;\n	int flagPeak;\n	double Peak;\n} onelllDataIntensityInformation;\n
llData.h typedef struct lllDataIntensityInformation {\n	onelllDataIntensityInformation* onedata;\n    llDataParaTypeInteger llMax;\n} lllDataIntensityInformation;\n
lll2ltlg.h typedef struct lll2ltlgInfo {\n		long flagIn;\n   		char* In;\n   		FILE* fptIn; \n    	char* Out;\n    	FILE* fptOut;\n   		long flagconfigFile;\n   		char* configFile;\n    	FILE* fptconfigFile;\n   		long flagTitle;\n   		char* Title;\n    	long flagllMax;\n    	long llMax;\n    	long flagdelRInv;\n    	float delRInv;\n    	long flagRMaxInv;\n    	float RMaxInv;\n    	long flagdelr;\n    	float delr;\n    	long flagrMax;\n    	float rMax;\n 	    long mode;\n} lll2ltlgInfo;\n
lllDataCTFCompensate.h typedef struct lllDataCTFCompensateInfo {\n		long flagIn;\n		char* In;\n		FILE* fptIn;\n		long flagIn1;\n		char* In1;\n		FILE* fptIn1;\n		long flagIn2;\n		FILE* fptIn2;\n		long flagOut;\n		char* Out;\n		FILE* fptOut;\n		long flagtruePitch;\n		float truePitch;\n		long flagmode;\n		long mode;\n		long flagconfigFile;\n		FILE* fptconfigFile;\n} lllDataCTFCompensateInfo;\n
lllDataCTFCompensation.h typedef struct lllDataSingleCTFCompensationInfo {\n	int     flagllCTF;\n	llData  llCTF;\n	ctfInfo CTF;\n}  lllDataSingleCTFCompensationInfo;\n
lllDataCompare.h typedef struct lllDataCompareInfo {\n	int FilamentNumber;\n	double ratio;\n	double OriginReflection;\n	double OtherReflection;\n	int mode;\n} lllDataCompareInfo;\n
lllDataDifferenceCalc.h typedef struct lllDataDifferenceCalcInfo {\n	double A; \n} lllDataDifferenceCalcInfo;\n
lllDataExtract.h typedef struct lllDataExtractInfo {\n	int n;\n	int l;\n} lllDataExtractInfo;\n
lllDataFit.h typedef struct llDataParaTypeRegion {\n	llDataParaTypeReal Max;\n	llDataParaTypeReal Min;\n    llDataParaTypeReal Delta;\n	llDataParaTypeReal Value;\n} llDataParaTypeRegion;\n
lllDataFit.h typedef struct llDataParamToFit {\n    llDataParaTypeRegion Omega;\n    llDataParaTypeRegion x;   \n    llDataParaTypeRegion  z;\n    llDataParaTypeRegion  r;\n    llDataParaTypeRegion  phi;\n    llDataPole            Pole;\n    llDataParaTypeReal   R;\n    llDataParaTypeInteger flagResolution;\n    llDataParaTypeReal    Resolution;\n	int 			   flagCTF;\n	int                ctfCompensationMode;\n	ctfInfo            CTF;\n	llDataParaTypeReal ctfCutOff;\n	int                flagllCTF;\n	llData             llCTF;\n	int flagLLTable;\n	llDataParaTypeInteger* llTable; \n} llDataParamToFit;\n
lllDataFit.h typedef struct llDataFittedParam {\n    llDataParamToFit   Para;\n	llDataParamToFit   PPara;\n    llDataParamToFit   QPara;\n    llDataParamToFit   Q2Para;\n    llDataParamToFit   RPara;\n	llDataParamToFit   PParaInv;\n    llDataParamToFit   QParaInv;\n    llDataParamToFit   Q2ParaInv;\n    llDataParamToFit   RParaInv;\n	int flagFitFile;\n	char* fitFileName;\n	char* fitFileNameAnti;\n} llDataFittedParam;\n
lllDataFit.h typedef struct lllDataFitPVMInfo {\n	int* tids;\n	int  numTask;\n} lllDataFitPVMInfo;\n
lllDataFitAndAverage.h typedef struct lllDataFitAndAverageInfo {\n	int nFile;\n	int times;\n	int flagOutParam2;\n	char** OutParam2;\n	char** In;\n	int flagAveragingWithoutAntiPole;\n	int flagAveragingBelowThreshold;\n	float threshold; \n	FILE* fptLog;\n	int flagCTF;\n	int ctfMode;\n	ctfInfo* CTF;\n	int flagWeight;\n	llDataParaTypeReal* weight;\n	double noise;\n	int mode;\n	int flagPVM;\n	lllDataFitPVMInfo vPVM;\n} lllDataFitAndAverageInfo;\n
lllDataRescaling.h typedef struct lllDataRescalingInfo {\n     llDataParaTypeReal delBR;\n	 llDataParaTypeReal rScale;\n} lllDataRescalingInfo;\n
lllDatarMaxLimit.h typedef struct lllDatarMaxLimitInfo {\n	float rMax;\n	int   flagrMaxMin;\n	float rMaxMin;\n} lllDatarMaxLimitInfo;\n
lllExtract.h typedef struct lllExtractInfo {\n    char* Title;\n    float xStep;\n    float yStep;\n    float MaxX;\n    float MaxY;\n    float RotationAngle;\n    float Omega;\n    float Shear;\n    long ievery; \n    float axl;\n    float ayl;\n    float xShift; \n    long llMax;\n    llDataParaTypeReal delRInv; \n    long flagOutputInfo; \n    long* n;\n    long* nn;   \n    long** ns;  \n    long* l;\n    float* Y;\n    float* leftMin;\n    float* leftMax;\n    float* rightMin;\n    float* rightMax;\n    float* weight; \n	llDataParaTypeReal truePitch;	\n	lllDatarMaxLimitInfo rMax;\n	llDataParaTypeReal   RMax;\n	llDataParaTypeReal RMaxFirst;\n	int flagMagnitudeLimit;\n} lllExtractInfo;\n
lllExtractCtfinfFileCreate.h typedef struct infoDataList {\n	float FirstZero;\n	long flagFirstZero;\n	char* Out;\n	FILE* fptOut;\n} infoDataList;\n
lllExtractdYEstimate.h typedef struct lllExtractdYEstimateInfo{\n	float truePitch;\n	float deltadY;\n	float mag;\n	float PixelSize;\n} lllExtractdYEstimateInfo;\n
lltlg2mrc.h typedef struct lltlg2mrcInfo {\n	    long flagIn;\n   		char* In;\n    	FILE* fptIn;\n    	long flagOut;\n    	char* Out;\n    	FILE* fptOut;\n    	long flagconfigFile;\n    	FILE* fptconfigFile;\n    	long flagTitle;\n    	char* Title;\n    	long flagdelta;\n    	float delta;\n	    long flagRepeatDistance;\n   	 	float RepeatDistance;\n    	long flagrMax;\n    	float rMax;\n    	long flagphiStart;\n    	float phiStart;\n    	long flagzMin;\n    	float zMin;\n    	long flagzMax;\n    	float zMax;\n    	long flagdeltaz;\n    	float deltaz;\n    	long flagWeightOf0thLayer;\n    	float WeightOf0thLayer;\n    	long flagLayer;\n		FILE* fptLayer;\n    	long f99;\n    	long flagCUT;\n    	float CUT;\n    	long flagMean;\n    	float Mean;\n    	long flagSigma;\n    	float Sigma;\n    	long Inverse;\n    	long notInteractive;\n    	long AntiPole;\n    	long mode;\n} lltlg2mrcInfo;\n
lmrcFFTInfo.h typedef struct mrcFSInfo {\n	double F00;	\n	double Max;\n	double MaxExceptForF00;\n} mrcFSInfo;\n
lmrcImageBinalization.h typedef struct lmrcImageBinalizationInfo {\n	double thresHold;	\n	double value;	\n	int flagNear;\n	double near; 	\n}lmrcImageBinalizationInfo;\n
lmrcImageCTFDetermination.h typedef struct lmrcImageCTFDeterminationInfo {\n	ctfInfo val;\n	ctfInfo min;\n	ctfInfo max;\n	ctfInfo del;\n	mrcImageParaTypeReal Rmax;\n	mrcImageParaTypeReal Rmin;\n	mrcImage Dif;\n	double minResidual;\n	double minDef;\n	double minRatio;\n	FILE*   Out;\n	int flagOutF;\n	mrcImage resFFT;\n} lmrcImageCTFDeterminationInfo;\n
lmrcImageCTFDetermination.h typedef struct lmrcImageCTFDeterminationInfoMode {\n	long FilterType;\n	long WeightType;\n	long SumType;\n	long CTFInfoType;\n} lmrcImageCTFDeterminationInfoMode;\n
lmrcImageCTFDetermination.h typedef struct lmrcImageCTFDeterminationInfoRef {\n	FILE* fptIn;\n	char* In;\n	FILE* fptRef;\n	char* Ref;\n	FILE* fptOut;\n	char* Out;\n	char MrcOut[100];\n	mrcImage* in;\n	mrcImage* out;\n	long Width;\n	float PixelSize;\n	float truePitch;\n	float firstDf;\n	float withinDf;\n	float firstAoverP;\n	float withinAoverP;\n	mrcImageParaTypeReal maxiter;\n	mrcImageParaTypeReal iter;\n} lmrcImageCTFDeterminationInfoRef;\n
lmrcImageCentre.h typedef struct lmrcImageCenterOfMass {\n  float x;\n  float y;\n  float z;\n} lmrcImageCenterOfMass;\n
lmrcImageCommonLine.h typedef enum lmrcImageCommonLineMode {\n	lmrcImageCommonLineModeImageCenterIsGC = 1\n} lmrcImageCommonLineMode;\n
lmrcImageCommonLine.h typedef enum lmrcImageCommonLineSearchMode {\n	lmrcImageCommonLineSearchModeFourierSpace = 0,\n	lmrcImageCommonLineSearchModeRealSpace = 1 \n} lmrcImageCommonLineSearchMode;\n
lmrcImageCommonLine.h typedef struct lmrcImageCommonLineInfo {\n	double dtheta;\n	lmrcImageCommonLineSearchMode searchMode; \n	double optimumThetaIn;\n	double optimumThetaRef;\n	double optimumCor; \n} lmrcImageCommonLineInfo;\n
lmrcImageConnection.h typedef struct lmrcImageConnectionInfo {\n	long mode;\n} lmrcImageConnectionInfo;\n
lmrcImageContourSurface.h typedef struct lmrcImageContourSurfaceInfo {\n	mrcImageParaTypeReal Contour;\n} lmrcImageContourSurfaceInfo;\n
lmrcImageContourSurface.h typedef enum lmrcImageContourSurfaceMode {\n	lmrcImageContourSurfaceModeSimple=0\n} lmrcImageContourSurfaceMode;\n
lmrcImageCorrelation.h typedef struct lmrcImageAutoRotationCorrelationInfo {\n	int iter; \n	int nRot;   \n	int Method;\n	float max;\n	float maxTheta;\n	mrcImageParaTypeRealCoord maxP;\n	mrcImageInformation corInfo;\n	lmrcImageSSDAInfo SSDAInfo;\n	float EuclidDistance; \n	float LinearCorrelation;\n	int   flagRestrictionArea;\n	float thetaMin;\n	float thetaMax;\n	int   flagXshiftOnly;\n} lmrcImageAutoRotationCorrelationInfo;\n
lmrcImageCorrelation.h typedef struct lmrcImageCorrelationRefinementInfo {\n	mrcImageParaTypeRealCoord shift; \n	mrcImageParaTypeRealCoord step; \n	mrcImageParaTypeRealCoord range; \n	mrcImageInformation corInfo;\n	int mode;\n} lmrcImageCorrelationRefinementInfo;\n
lmrcImageCrystalCreate.h typedef struct lmrcImageCrystalCreateInfo {\n	long nx;\n	long ny;\n	long nz;\n} lmrcImageCrystalCreateInfo;\n
lmrcImageDensity.h typedef struct lmrcImageDensityInfoInfo {\n	floatVector percentageVolume;\n	mrcImageParaTypeRealCoord centreOfGravity;\n	mrcImageParaTypeRealCoord centreOfGravitySD;\n	mrcImageParaTypeRealCoord max;\n	mrcImageParaTypeRealCoord maxSD;\n	double                    deltaVolume; \n	mrcImage in;\n} lmrcImageDensityInfoInfo;\n
lmrcImageDensity.h typedef enum lmrcImageDensityInfoMode {\n	mrcImageDensityInfoPercentageVolume  =1,\n	mrcImageDensityInfoCentreOfGravity   =2,\n	mrcImageDensityInfoMax               =4,\n	mrcImageDensityInfoCentreOfGravitySD =8,\n	mrcImageDensityInfoMaxSD             =16\n} lmrcImageDensityInfoMode;\n
lmrcImageDensity.h typedef struct lmrcImageDensityChangeEsitmationInfo0 {\n	mrcImageParaTypeRealCoord change;\n	mrcImageParaTypeRealCoord changeSD;\n	double                    delta;\n	double                    deltaSD;\n	double                    deltaXY;\n	double                    deltaXYSD;\n} lmrcImageDensityChangeEstimationInfo0;\n
lmrcImageDensity.h typedef struct lmrcImageDensityChangeEsitmationInfo {\n	lmrcImageDensityChangeEstimationInfo0 CG;\n	lmrcImageDensityChangeEstimationInfo0 Max;\n	mrcImage in1;\n	mrcImage in2;\n} lmrcImageDensityChangeEstimationInfo;\n
lmrcImageDensity.h typedef enum lmrcImageDensityChangeEstimationMode {\n	mrcImageDensityChangeEstimationCentreOfGravity   =2,\n	mrcImageDensityChangeEstimationMax               =4,\n	mrcImageDensityChangeEstimationCentreOfGravitySD =8,\n	mrcImageDensityChangeEstimationMaxSD             =16\n} lmrcImageDensityChageEstimationMode;\n
lmrcImageDensityNormalizationByImage.h typedef struct lmrcImageDenstiyNormalizationByImageInfo {\n  double sigma;\n  int flagCylinder;	\n  float centerx, centery;\n  float minr, maxr;\n  int fitMode;\n  float tstBGMin;\n  float tstBGMax;\n  float tstBGDelta;\n  float a;\n  float b;\n  float sigma_a;\n  float sigma_b;\n  float chi2;\n  float q;\n  float r;\n  float refBG;\n  float tstBG;\n  float	chi2Signal;\n  float chi2BG;\n  int nData;\n  float* testData;\n  float* refData; \n} lmrcImageDensityNormalizationByImageInfo;\n
lmrcImageDensityNormalizationByImage.h typedef enum lmrcImageDensityNormalizationByImageMode {\n  lmrcImageDensityNormalizationByImageModeSigma   = 1,\n  lmrcImageDensityNormalizationByImageModeStdout  = 2,\n  lmrcImageDensityNormalizationByImageModeReverse = 4,\n  lmrcImageDensityNormalizationByImageModeRobust  = 8\n} lmrcImageDensityNormalizationByImageMode; \n
lmrcImageDensityNormalizationByImage.h typedef enum lmrcImageDensityNormalizationByImageFitMode {\n  lmrcImageDensityNormalizationByImageFitModeSingleLine = 0,\n  lmrcImageDensityNormalizationByImageFitModeSingleLineWithBackground = 1 \n} lmrcImageDensityNormalizationByImageFitMode;\n
lmrcImageEdgeAverage.h typedef struct lmrcImageEdgeAverageInfo {\n	mrcImageParaTypeInteger devide; \n	mrcImageParaTypeInteger width;\n	mrcImageParaTypeReal*   avg[4];\n	mrcImageParaTypeReal*   count[4];\n} lmrcImageEdgeAverageInfo;\n
lmrcImageFilterCreate.h typedef enum lmrcImageFilterCreateMode {\n	lmrcImageFilterModeSquare=0,\n	lmrcImageFilterModeCircle=1\n} lmrcImageFilterCreateMode;\n
lmrcImageFilterCreate.h typedef struct lmrcImageFilterCreateInfo {\n	mrcImageParaTypeInteger    np;\n	mrcImageParaTypeRealCoord* p;\n	mrcImageParaTypeReal*      weight;\n	mrcImageParaTypeIntegerCoord N;\n	mrcImageParaTypeIntegerCoord Size;\n	lmrcImageFilterCreateMode shape;\n	long                      outputMode;\n} lmrcImageFilterCreateInfo;\n
lmrcImageFirstNoiseReductionByRelaxation.h typedef struct lmrcImageNoiseReductionByRelaxationInfo {\n  double SD;\n  double datamax;\n  double datamin;\n  long classNumber;\n  int ddimx; \n  int ddimy;\n  int ddimz;\n} lmrcImageNoiseReductionByRelaxationInfo;\n
lmrcImageFirstNoiseReductionByRelaxation.h typedef enum lmrcImageNoiseReductionByRelaxationMode {\n  lmrcImageNoiseReductionByRelaxationModeSigma = 1,\n} lmrcImageNoiseReductionByRelaxationMode; \n
lmrcImageMasking.h typedef enum lmrcImageMaskingInfoShape {\n	lmrcImageMaskingInfoShapeCircle=0,\n	lmrcImageMaskingInfoSquare=0\n} lmrcImageMaskingInfoShape;\n
lmrcImageMasking.h typedef struct lmrcImageMaskingInfo {\n        mrcImageParaTypeRealCoord n;\n        mrcImageParaTypeRealCoord c;\n       	lmrcImageMaskingInfoShape 	 shape;\n        long mode;\n} lmrcImageMaskingInfo;\n
lmrcImageModelCreate.h typedef struct _lmrcImageModelCreateMode1Info {\n	float radius;\n	float nHelix;\n	float zPitch;\n	float phiAngle;\n	float deltaPhi;\n	float startZ;\n	float endZ;\n	float startPhi;\n	int     flagIn;\n	mrcImage*  in;\n	mrcImageDataSetMode inMode;\n	int 	fm;\n	int 	units;\n} _lmrcImageModelCreateMode1Info;\n
lmrcImageMontage.h typedef struct lmrcImageMontageInfo {\n	lmrcImagePadMode PadMode;\n	lmrcImagePadInfo PadInfo;\n	int nx;\n	int ny;\n	int                  flagMaxValue;\n	mrcImageParaTypeReal MaxValue;	\n	int                  flagValueAssignedToMax;\n	mrcImageParaTypeReal ValueAssignedToMax;	\n	int flagEdgeAverage;\n	int EdgeAverageWindow;\n	int flagNoAverage;\n} lmrcImageMontageInfo;\n
lmrcImageMove.h typedef enum lmrcImageMoveMode {\n	lmrcImageMoveModePixelUnit=0\n} lmrcImageMoveMode;\n
lmrcImageNormalizing.h typedef float lmrcImageNormalizingParaTypeReal;\n
lmrcImageNormalizing.h typedef enum lmrcImageNormalizingMode {\n	lmrcImageNormalizingModeDoubleExponential=0,\n	lmrcImageNormalizingModeMinMax=1,\n	lmrcImageNormalizingModeUsingContour=2,\n	lmrcImageNormalizingModeUsingContourWithSolventFlattening=3,\n	lmrcImageNormalizingModeNoEstimation=4\n} lmrcImageNormalizingMode ;\n
lmrcImageNormalizing.h typedef struct lmrcImageNormalizingInfo {\n	lmrcImageNormalizingParaTypeReal A;\n	lmrcImageNormalizingParaTypeReal B; \n	lmrcImageNormalizingParaTypeReal ContourMin;\n	lmrcImageNormalizingParaTypeReal ContourMax;\n	lmrcImageNormalizingParaTypeReal ContourSolvent;\n	lmrcImageNormalizingMode Mode;\n} lmrcImageNormalizingInfo;\n
lmrcImagePad.h typedef struct lmrcImagePadInfo {\n	mrcImageParaTypeInteger Width;\n	mrcImageParaTypeInteger Height;\n	mrcImageParaTypeReal Value;\n	mrcImageParaTypeReal AWSize;\n	mrcImageParaTypeReal AWMin;\n	mrcImageParaTypeReal AWMax;\n} lmrcImagePadInfo;\n
lmrcImagePad.h typedef enum lmrcImagePadMode {\n	lmrcImagePadModeAverage                   = 0,\n	lmrcImagePadModeAveragedYAxis             = 1,\n	lmrcImagePadModeDynamicAveragedYAxis      = 2,\n	lmrcImagePadModeAveragedEdge              = 3,\n	lmrcImagePadModeBottomLeft                = 4,\n	lmrcImagePadModeCenterWithoutAveraging    = 5,\n	lmrcImagePadModeBottomLeftWithoutAveraging= 6,\n	lmrcImagePadModeAveragedOutsideCircle     = 7,\n	lmrcImagePadModeAveragedOutsideRing       = 8, \n	lmrcImagePadModeByValue                   = 9 \n} lmrcImagePadMode;\n
lmrcImagePrint.h typedef struct mrcImagePSFilePrintInfo  {\n	mrcImageParaTypeReal scale;\n	mrcImageParaTypeReal contourLineColorChange;\n	mrcImageParaTypeReal contourLineWidthStart;\n	mrcImageParaTypeReal contourLineWidthStep;\n	long centre; 	\n	char whichSection; 	\n	double untwistAngle; \n	psImageInfo psInfo;\n	mrcImageParaTypeReal circleRadius;\n} mrcImagePSFilePrintInfo;\n
lmrcImageProjection.h typedef struct lmrcImageProjectionInfo{\n	long mode;\n	} lmrcImageProjectionInfo;\n
lmrcImageROI2D.h typedef enum lmrcImageROIShape {\n    Rect   =0,\n    Rect2  =1,\n    Circle =2,\n	Line   =3\n} lmrcImageROIShape;\n
lmrcImageROI2D.h typedef struct lmrcImageSingleROIInfo {\n    char* FileName;\n    lmrcImageROIShape Shape;\n    float centerx;     \n    float centery;     \n    float blx;         \n    float bly;\n    float brx;\n    float bry;\n    float trx;\n    float try;\n    float tlx;\n    float tly;\n	float startx;      \n	float starty;\n	float endx; \n	float endy;\n    int flagWidth;     \n    float width;\n    int flagHeight;    \n    float height; \n    float radius;\n    int mode;\n	int flagRotation;\n	float angle;\n	int flagMagnifiedWidth;\n	float magnifiedWidth;\n	int flagMagnifiedHeight;\n	float magnifiedHeight;\n	int flagLayerLine;\n	float truePitch;\n	float Ly;\n	float dY;\n} lmrcImageSingleROIInfo;\n
lmrcImageROI2D.h typedef struct lmrcImageROIsInfo {\n    lmrcImageSingleROIInfo* ROI;\n    int                numROI;\n} lmrcImageROIsInfo;\n
lmrcImageROI3D.h typedef struct lmrcImageROI3DInfo {\n	mrcImageParaTypeReal z1;\n	mrcImageParaTypeReal z2;\n	int flagz;  \n	int flagx;\n	mrcImageParaTypeReal x1;\n	mrcImageParaTypeReal x2;\n	int flagy;\n	mrcImageParaTypeReal y1;\n	mrcImageParaTypeReal y2;\n} lmrcImageROI3DInfo;\n
lmrcImageRadialDistribution.h typedef struct lmrcImageRadialDistributionInfo {\n	float Cx;\n	float Cy;\n	int flagAverage;\n} lmrcImageRadialDistributionInfo;\n
lmrcImageSSDA.h typedef struct lmrcImageSSDAInfo {\n	double Threshold; 	\n	double Error; 		\n	mrcImageParaTypeRealCoord p; 		\n	mrcImageParaTypeRealCoord optimump; \n	mrcImageParaTypeRealCoord smin;     \n	mrcImageParaTypeRealCoord smax; 	\n	mrcImageParaTypeRealCoord predict;  \n	mrcImageParaTypeInteger n; 			\n} lmrcImageSSDAInfo;\n
lmrcImageSamplingUnitChange.h typedef struct lmrcImageSamplingUnitChangeInfo {\n	mrcImageParaTypeRealCoord    L;\n	mrcImageParaTypeIntegerCoord N;\n	mrcImageParaTypeInteger      SamplingMethodMode;\n} lmrcImageSamplingUnitChangeInfo;\n
lmrcImageSecondNoiseReductionByRelaxation.h typedef enum lmrcImageSecondNoiseReductionByRelaxationDijStyleMode1 {\n  lmrcImageSecondNoiseReductionByRelaxationDijStyleMode1SavitzyGolay = 1\n} lmrcImageSecondNoiseReductionByRelaxationDijStyleMode1;\n
lmrcImageSecondNoiseReductionByRelaxation.h typedef enum lmrcImageSecondNoiseReductionByRelaxationDijStyleMode2 {\n  lmrcImageSecondNoiseReductionByRelaxationDijStyleMode2Rectangle = 1,\n  lmrcImageSecondNoiseReductionByRelaxationDijStyleMode2Circle = 2\n} lmrcImageSecondNoiseReductionByRelaxationDijStyleMode2;\n
lmrcImageSecondNoiseReductionByRelaxation.h typedef enum lmrcImageSecondNoiseReductionByRelaxationDijStyleMode3 {\n  lmrcImageSecondNoiseReductionByRelaxationDijStyleMode3FiveTimesFive = 1,\n  lmrcImageSecondNoiseReductionByRelaxationDijStyleMode3SevenTimesSeven = 2\n} lmrcImageSecondNoiseReductionByRelaxationDijStyleMode3;\n
lmrcImageSinogram.h typedef struct lmrcImageSinogramInfo {\n	double dphi;\n	int correlationMode;\n} lmrcImageSinogramInfo;\n
lmrcImageSolventFlattening.h typedef struct lmrcImageSolventFlatteningInfo {\n	double density;\n	long flagdensity;\n} lmrcImageSolventFlatteningInfo;\n
lmrcImageSphere.h typedef struct lmrcImageSphereInfo {\n		float size;\n		float r;\n		float w;\n		long mode;\n}lmrcImageSphereInfo;\n
lmrcImageSymmetryFind.h typedef enum lmrcImageSymmetryFindCheckType {\n	lmrcImageSymmetryFindCheckTypeCheckByAdd=1,\n	lmrcImageSymmetryFindCheckTypeCheckByCorrelation=2,\n	lmrcImageSymmetryFindCheckTypeCheckByFourier=4,\n	lmrcImageSymmetryFindCheckTypeCheckByTTest=8,\n	lmrcImageSymmetryFindCheckTypeCheckBySRP=16\n} lmrcImageSymmetryFindCheckType;\n
lmrcImageSymmetryFind.h typedef enum lmrcImageSymmetryFindCentreType {\n	lmrcImageSymmetryFindCheckTypeCentreGC       = 0,\n	lmrcImageSymmetryFindCheckTypeCentreSymmetry = 1 \n} lmrcImageSymmetryFindCentreType;\n
lmrcImageSymmetryFind.h typedef enum lmrcImageSymmetryFindSubtractionType {\n	lmrcImageSymmetryFindCheckTypeNoSubtraction   = 0,\n	lmrcImageSymmetryFindCheckTypeMeanSubtraction = 1,\n	lmrcImageSymmetryFindCheckTypeMinSubtraction  = 2 \n} lmrcImageSymmetryFindSubtractionType;\n
lmrcImageSymmetryFind.h typedef struct lmrcImageSymmetryFindInfo {\n	double dr;\n	double dtheta;\n	double threshold1;\n	double threshold2;\n	int    maxNfold;\n	lmrcImageSymmetryFindCentreType centreMode;\n	lmrcImageDeterminationOfPolarAxisByAssumingNfoldInfo centreInfo;\n	lmrcImageSymmetryFindSubtractionType subtractionMode; \n	int       flagImages;\n	mrcImage  Image;\n	mrcImage* Images;\n	int       flagBacks;\n	mrcImage  Back;\n	mrcImage* Backs;\n	floatVector Value;\n	floatVector Point;\n	int         Symmetry;\n	FILE*    fptOut;\n	int      flagCorrelation;\n	mrcImage correlation;\n	int      flagFourier;\n	mrcImage  fourier;\n	int      flagTmap;\n	mrcImage tmap;\n	int      flagAvg;\n	mrcImage avg;\n	char*    avgName;\n	DescartesCoord centre;\n} lmrcImageSymmetryFindInfo;\n
lmrcImageTransformDescartesIntoPolar.h typedef struct lmrcImageDeterminationOfPolarAxisByAssumingNfoldInfo {\n	int nFold;\n	double minx;\n	double maxx;\n	double delx;\n	double miny;\n	double maxy;\n	double dely;\n	double minz;\n	double maxz;\n	double delz;\n	double delPHI;\n} lmrcImageDeterminationOfPolarAxisByAssumingNfoldInfo;\n
lmrcImageTransformDescartesIntoPolar.h typedef struct lmrcImageTransformDescartesIntoPolarInfo {\n	double dr;         \n	double dphi;      \n	double dtheta;     \n	int    flagImageCentreIsGravityCentre;\n	int    flagDescartesIntoPolarInfo; \n	int    flagrWeight; \n	int    flagRotationalSymmetry;\n	int    nRotationalSymmetry;\n	lmrcImageDeterminationOfPolarAxisByAssumingNfoldInfo axisInfo;\n	int    flagCentre;\n	mrcImageParaTypeRealCoord Centre;\n}  lmrcImageTransformDescartesIntoPolarInfo;\n
lmrcImageWindowing.h typedef struct lmrcImageWindowingInfo {\n	long  flagWy;\n	float Wy;\n	long flagWx;\n	float Wx;\n} lmrcImageWindowingInfo;\n
lmrcImagesStatDataGet.h typedef struct lmrcImagesStatDataGetInfo {\n	int      numImage;\n	int 	 flagAvg;\n	mrcImage Avg;\n	int 	 flagSQRAvg;\n	mrcImage SQRAvg;\n	int      flagVar;\n	mrcImage Var;\n	int      flagSD;\n	mrcImage SD;\n	int      flagSN;\n	mrcImage SN;\n	int      flagSE;\n	mrcImage SE;\n	int      flagt;\n	mrcImage t;\n} lmrcImagesStatDataGetInfo;\n
lpdb2mrcInfo.h typedef struct lpdb2mrcInfo {\n	pdbFileParaTypeReal sx;\n	pdbFileParaTypeReal sy;\n	pdbFileParaTypeReal sz;\n	pdbFileParaTypeReal dx;\n	pdbFileParaTypeReal dy;\n	pdbFileParaTypeReal dz;\n	pdbFileParaTypeInteger nx;\n	pdbFileParaTypeInteger ny;\n	pdbFileParaTypeInteger nz;\n	pdbFileParaTypeReal Weight;\n	pdbFileParaTypeReal Sigma;\n} lpdb2mrcInfo;\n
lpdb2mrcInfo.h typedef lpdb2mrcInfo lpdb2mrc2dInfo;\n
lpdb2mrcInfo.h typedef lpdb2mrcInfo lpdb2mrc3dInfo;\n
lpdbSurface.h typedef struct lpdbSurfaceInfo {\n	double order;  \n	int    refine;  \n	int    size;   \n	double mergin; \n	double weight; \n	double thresHold; \n} lpdbSurfaceInfo;\n
lpdbSurface.h typedef enum lpdbSurfaceMode {\n	lpdbSurfaceModeSimple=0\n} lpdbSurfaceMode;\n
ltlgData.h typedef short ltlgDataParaTypeInteger; \n
ltlgData.h typedef float ltlgDataParaTypeReal; \n
ltlgData.h typedef enum ltlgDataHow {\n	ltlgDataHowNearest,\n	ltlgDataHowLinear\n} ltlgDataHow;\n
ltlgData.h typedef enum ltlgDataType {\n	ltlgDataTypeRePart,\n	ltlgDataTypeImPart,\n	ltlgDataTypeMag,\n	ltlgDataTypePhase\n} ltlgDataType;\n
ltlgData.h typedef struct ltlgDataLLDataInfo {\n    ltlgDataParaTypeInteger  NN;\n    ltlgDataParaTypeInteger  NL;\n    ltlgDataParaTypeReal     WT;\n} ltlgDataLLDataInfo;\n
ltlgData.h typedef struct ltlgDataLLData {\n	ltlgDataParaTypeReal r;\n    ltlgDataParaTypeReal Re;\n    ltlgDataParaTypeReal Im;\n}ltlgDataLLData;\n
ltlgData.h typedef struct ltlgDataParaInfo {\n    ltlgDataParaTypeReal    d;\n    ltlgDataParaTypeReal    Min;\n    ltlgDataParaTypeReal    Max;\n    ltlgDataParaTypeInteger n;\n    ltlgDataParaTypeInteger dummy;\n} ltlgDataParaInfo;\n
ltlgData.h typedef struct ltlgData {\n    char title1[LTLG_TITLE_LENGTH+1];\n    char title2[LTLG_TITLE_LENGTH+1];\n    char side[LTLG_SIDE_LENGTH+1];\n    ltlgDataParaInfo R;\n    ltlgDataParaInfo ll;\n    ltlgDataParaInfo r;\n    ltlgDataLLDataInfo* llInfo;\n    ltlgDataLLData** ltlg;\n} ltlgData;\n
mapFile.h typedef struct mapFileShortCoord {\n	short x;\n	short y;\n	short z;\n} mapShortCoord;\n
mapFile.h typedef struct mapFileHeader {\n	mapShortCoord Start;\n	mapShortCoord N;\n	mapShortCoord M;\n	mapShortCoord Length;\n	mapShortCoord Angle;\n	short prod;\n	short plus;\n	short i1;\n	short i2;\n	short dummy[256-19];\n} mapFileHeader;\n
mapFile.h typedef struct mapFile {\n	mapFileHeader Header;\n	unsigned char* Image;\n} mapFile;\n
mrcImage.h typedef unsigned long mrcStatusMask;  \n
mrcImage.h typedef unsigned int mrcStatusMask;\n
mrcImage.h typedef unsigned long mrcStatusType;\n
mrcImage.h typedef unsigned int  mrcStatusType;\n
mrcImage.h typedef union MRC_Status_t {\n    mrcStatusType all;\n    struct Content {\n        unsigned char level;\n        unsigned char category;\n        short detail;\n	} status;\n} MRC_Status_t;\n
mrcImage.h typedef long  mrcImageParaTypeInteger;\n
mrcImage.h typedef int mrcImageParaTypeInteger;\n
mrcImage.h typedef float mrcImageParaTypeReal;\n
mrcImage.h typedef struct mrcImageParaTypeIntegerCoord {\n	mrcImageParaTypeInteger x;\n	mrcImageParaTypeInteger y;\n	mrcImageParaTypeInteger z;\n} mrcImageParaTypeIntegerCoord;\n
mrcImage.h typedef struct mrcImageParaTypeRealCoord {\n	mrcImageParaTypeReal x;\n	mrcImageParaTypeReal y;\n	mrcImageParaTypeReal z;\n} mrcImageParaTypeRealCoord;\n
mrcImage.h typedef struct _mrcImageHeader {\n	mrcImageParaTypeIntegerCoord        N;	    \n	mrcImageMode                        Mode;   \n	mrcImageParaTypeIntegerCoord        StartN; \n	mrcImageParaTypeIntegerCoord        M;	    \n	mrcImageParaTypeRealCoord           Length; \n	mrcImageParaTypeReal                Alpha;  \n	mrcImageParaTypeReal                Beta;\n	mrcImageParaTypeReal                Gamma;\n	mrcImageParaTypeInteger             MAPC;   \n	mrcImageParaTypeInteger             MAPR;   \n	mrcImageParaTypeInteger             MAPS;   \n	mrcImageParaTypeReal                AMin;   \n	mrcImageParaTypeReal                AMax;   \n	mrcImageParaTypeReal                AMean;  \n	mrcImageParaTypeInteger             ISPG;   \n	mrcImageParaTypeInteger             NSYMBT; \n	mrcImageParaTypeReal                EXTRA[MRC_MAX_EXTRA]; \n    mrcImageParaTypeReal                OriginX;\n    mrcImageParaTypeReal                OriginY;\n    mrcImageParaTypeInteger             LabelN;\n    char                                Label[MRC_MAX_LABEL_N][MRC_MAX_LABEL_LEN];\n} _mrcImageHeader;\n
mrcImage.h typedef union mrcImageHeader {\n  unsigned char           All[MRC_HEADER];\n  mrcImageParaTypeInteger Int[MRC_HEADER/4];\n  mrcImageParaTypeReal    Real[MRC_HEADER/4];\n  _mrcImageHeader         Cont;\n} mrcImageHeader;\n
mrcImage.h typedef struct _mrcImageTailer {\n	char                 		Code[4]; \n	mrcImageParaTypeInteger		Mode;  \n	char                        EulerAngleMode[4];\n	mrcImageParaTypeReal 		Rot1;   \n	mrcImageParaTypeReal 		Rot2;\n	mrcImageParaTypeReal 		Rot3;\n	mrcImageParaTypeInteger 	Mirror;\n} _mrcImageTailer;\n
mrcImage.h typedef union mrcImageTailer {\n  unsigned char           All[MRC_TAILER];\n  mrcImageParaTypeInteger Int[MRC_TAILER/4];\n  mrcImageParaTypeReal    Real[MRC_TAILER/4];\n  _mrcImageTailer         Cont;\n} mrcImageTailer;\n
mrcImage.h typedef struct mrcImage {\n    mrcImageHeader          Header;\n    mrcImageParaTypeInteger BytePerImage;\n    mrcImageParaTypeInteger BytePerBand;\n    mrcImageParaTypeInteger BandPerPixel;\n    mrcImageParaTypeInteger PixelPerImage;\n    mrcStatusType           status;\n    char*           Image;\n    unsigned char*  ImageCharImage;\n    unsigned short* ImageShortImage;\n    unsigned long*  ImageLongImage;\n    float*          ImageFloatImage;\n    double*         ImageDoubleImage;\n	mrcImageTailer*         Tailer;	\n	mrcImageParaTypeInteger numTailer;\n	mrcImageParaTypeInteger flagByteSwap;\n} mrcImage;\n
mrcImage.h typedef struct mrcImageInformation {\n    double mean;\n    double rootMeanSquare;\n    double meanOfSphereSurface;\n    double meanOfCylinderSurface;\n    double meanOfEdge;\n    double sdOfEdge;\n    double seOfEdge;\n    double max;\n	mrcImageParaTypeRealCoord maxCoord;\n    double min;\n	mrcImageParaTypeRealCoord minCoord;\n    double sd;\n    double se;\n	double rmax;\n	long flagrmax;\n	int mode;\n} mrcImageInformation;\n
mrcImage.h typedef struct lmrcImageSmoothingInfo  {\n	long mode;\n	mrcImageParaTypeReal sx; \n	mrcImageParaTypeReal sy;\n	mrcImageParaTypeReal sz;\n} lmrcImageSmoothingInfo;\n
mrcImage.h typedef struct lmrcImageCVEInfo {\n	long sx; \n	long sy; \n	long sz;\n} lmrcImageCVEInfo;\n
mrcImage.h typedef struct lmrcImageTfunctionInfo {\n	long sx; \n	long sy; \n	long sz;\n} lmrcImageTfunctionInfo;\n
mrcImage.h typedef struct lmrcImageHighlightInfo {\n	long mode;\n	float Bias; \n	float Grad;\n} lmrcImageHighlightInfo;\n
mrcImage.h typedef struct lmrcImageLowPassFilterInfo \n{\n	long mode; \n	float hvp, width;\n} lmrcImageLowPassFilterInfo;\n
mrcImage.h typedef struct lmrcImageHighPassFilterInfo \n{\n	long mode; \n	float hvp, width;\n} lmrcImageHighPassFilterInfo;\n
mrcImage.h typedef struct lmrcImageBandPassFilterInfo \n{\n	long mode; \n	float hvl, hvh, wl, wh;\n} lmrcImageBandPassFilterInfo;\n
mrcImage.h typedef enum mrcImageDataSetMode {\n	mrcImageDataSetModeCentre = 0,\n	mrcImageDataSetModeOrigin = 1\n} mrcImageDataSetMode;\n
mrcImage.h typedef struct lmrcImageMultiCTFCompensationInfo {\n	long   maxiteration;\n	double okrms;\n	long   diversefactor;\n	double z;\n	long   nhist;\n	FILE*  logfile;\n} lmrcImageMultiCTFCompensationInfo;\n
mrcImage.h typedef struct lmrcImageCTFSNInfo\n{\n	long mode, deg1, deg2;\n	ctfInfo ctf;\n} lmrcImageCTFSNInfo;\n
mrcImage.h typedef struct mrcImageFourierPowerSpectrum\n{\n	long n;\n	double d, *h;\n} mrcImageFourierPowerSpectrum;\n
mrcImage.h typedef struct lmrcImageFourierPowerSpectrumInfo\n{\n	double dX, dY, dZ;\n} lmrcImageFourierPowerSpectrumInfo;\n
mrcRefUtil.h typedef double mrcRefDegCoordinate; \n
mrcRefUtil.h typedef struct {\n  mrcRefDegCoordinate ip;\n  mrcRefDegCoordinate iw;\n  mrcRefDegCoordinate ia;\n  mrcRefDegCoordinate dp;\n  mrcRefDegCoordinate dw;\n  mrcRefDegCoordinate da;\n  mrcRefDegCoordinate wp;\n  mrcRefDegCoordinate ww;\n  mrcRefDegCoordinate wa;\n} mrcRefHeader;\n
mrcRefUtil.h typedef struct {\n  mrcRefDegCoordinate ip;\n  mrcRefDegCoordinate iw;\n  mrcRefDegCoordinate ia;\n  mrcRefDegCoordinate dp;\n  mrcRefDegCoordinate dw;\n  mrcRefDegCoordinate da;\n  mrcRefDegCoordinate wp;\n  mrcRefDegCoordinate ww;\n  mrcRefDegCoordinate wa;\n  int mode;\n} mrcRefCorHeader;\n
mrcRefUtil.h typedef struct {\n  mrcRefDegCoordinate ip;\n  mrcRefDegCoordinate iw;\n  mrcRefDegCoordinate ia;\n  mrcRefDegCoordinate dp;\n  mrcRefDegCoordinate dw;\n  mrcRefDegCoordinate da;\n  mrcRefDegCoordinate wp;\n  mrcRefDegCoordinate ww;\n  mrcRefDegCoordinate wa;\n  double sy;\n  double ey;\n  double refsize;\n  int inverse;\n} mrcpwzCorHeader;\n
pdbFile.h typedef char  pdbFileParaTypeCharacter;\n
pdbFile.h typedef long  pdbFileParaTypeInteger;\n
pdbFile.h typedef float pdbFileParaTypeReal;\n
pdbFile.h typedef struct residueName {\n  char residueName3[4];\n  char residueName1[2];\n} residueName;\n
pdbFile.h typedef struct pdbCoord {\n  pdbFileParaTypeReal x;\n  pdbFileParaTypeReal y;\n  pdbFileParaTypeReal z;\n} pdbCoord;\n
pdbFile.h typedef enum pdbSecondaryStructureHelixClass {\n	HelixClassRightHandedAlpha = 1,\n	HelixClassRightHandedOmega = 2,\n	HelixClassRightHandedPi    = 3,\n	HelixClassRightHandedGammda= 4,\n	HelixClassRightHanded310   = 5,\n	HelixClassLeftHandedAlpha  = 6,\n	HelixClassLeftHandedOmega  = 7,\n	HelixClassLeftHandedGammda = 9,\n	HelixClassPolyProline      = 10,\n} pdbSecondaryStructureHelixClass;\n
pdbFile.h typedef struct pdbSecondaryStructureHelix {\n	int  serNum;     	\n	char* helixID;   	\n	char* initResName; \n	char initChainID;  	 \n	int  initSeqNum;    \n	char initICode; \n	char* endResName; \n	char endChainID;  	 \n	int  endSeqNum;    \n	char endICode; \n	pdbSecondaryStructureHelixClass helixClass;\n	char* comment; \n	int  length;\n} pdbSecondaryStructureHelix;\n
pdbFile.h typedef struct pdbSecondaryStructureSheet {\n	int  strand; 		  \n	char* sheetID;    			\n	int  numStrands;    \n	char* initResName; \n	char initChainID;  	 \n	int  initSeqNum;    \n	char initICode; \n	char* endResName; \n	char endChainID;  	 \n	int  endSeqNum;    \n	char endICode; \n	int sense;   \n	char* curAtom; \n	char* curResName; \n	char curChainID; \n	int  curResSeq;  \n	char curICode;  \n	char* prevAtom; \n	char* prevResName; \n	char prevChainID; \n	int prevResSeq;  \n	char prevICode;  \n}pdbSecondaryStructureSheet;\n
pdbFile.h typedef struct pdbSecondaryStructureTurn {\n	int  serNum;     	\n	char* turnID;   	\n	char* initResName; \n	char initChainID;  	 \n	int  initSeqNum;    \n	char initICode; \n	char* endResName; \n	char endChainID;  	 \n	int  endSeqNum;    \n	char endICode; \n	char* comment; \n}pdbSecondaryStructureTurn;\n
pdbFile.h typedef struct pdbSecondaryStructureNo {\n	int   serNum;     	\n	char* noID;   	    \n	char* initResName; \n	char initChainID;  	 \n	int  initSeqNum;    \n	char initICode; \n	char* endResName; \n	char endChainID;  	 \n	int  endSeqNum;    \n	char endICode; \n	char* comment; \n}pdbSecondaryStructureNo;\n
pdbFile.h typedef enum pdbFileSecondaryStructureMode {\n	pdbFileSecondaryStructureModeNo    = 0,\n	pdbFileSecondaryStructureModeHelix = 1,\n	pdbFileSecondaryStructureModeSheet = 2,\n	pdbFileSecondaryStructureModeTurn  = 3\n} pdbFileSecondaryStructureMode;\n
pdbFile.h typedef struct pdbFileSecondaryStructureRecord pdbFileSecondaryStructureRecord; \n
pdbFile.h struct pdbFileSecondaryStructureRecord {\n	pdbFileSecondaryStructureMode mode;\n	pdbSecondaryStructureHelix*   helix;\n	pdbSecondaryStructureSheet*   sheet;\n	pdbSecondaryStructureTurn*    turn;\n	pdbSecondaryStructureNo*      no;\n	pdbFileSecondaryStructureRecord* top;\n	pdbFileSecondaryStructureRecord* prev;\n	pdbFileSecondaryStructureRecord* next;\n};\n
pdbFile.h typedef struct pdbFileSecondaryStructure {\n	int nSecondaryStructure;\n	pdbFileSecondaryStructureRecord* SecondaryStructure; \n} pdbFileSecondaryStructure;\n
pdbFile.h typedef struct pdbRecord pdbRecord;\n
pdbFile.h struct pdbRecord {\n  pdbFileParaTypeCharacter FullRecord[PDB_FILE_RECORD_FULL_LENGTH+1];\n  pdbFileParaTypeCharacter Record[PDB_FILE_RECORD_LENGTH+1];\n  pdbFileParaTypeInteger   AtomSerialNumber;\n  pdbFileParaTypeCharacter AtomName[PDB_FILE_ATOM_NAME_LENGTH+1];\n  pdbFileParaTypeCharacter LocationIndicator;\n  pdbFileParaTypeCharacter ResidueName[PDB_FILE_RESIDUE_LENGTH+1];\n  pdbFileParaTypeCharacter ChainIdentifier;\n  pdbFileParaTypeInteger   ResidueSequenceNumber;\n  pdbFileParaTypeCharacter InsertionCode;\n  pdbCoord                 Coord;\n  pdbFileParaTypeReal      Occupancy;\n  pdbFileParaTypeReal      TemperatureFactor;\n  pdbFileParaTypeInteger   FootnoteNumber;\n  pdbFileParaTypeCharacter Footnote[PDB_FILE_FOOTNOTE_LENGTH+1];\n  pdbRecord*               top;\n  pdbRecord*               prev;\n  pdbRecord*               next;\n};\n
pdbFile.h typedef struct pdbFile {\n  pdbRecord* PDB;\n  pdbFileParaTypeInteger nAtom;\n  pdbFileSecondaryStructure second;\n} pdbFile;\n
pdbInfoGet.h typedef enum pdbInfoCenterMode {\n        pdbInfoCenterModeCa = 0,\n        pdbInfoCenterModeAll = 1\n} pdbInfoCenterMode;\n
pdbInfoGet.h typedef struct pdbInfoData {\n	double cx;	\n	double cy;	\n	double cz;	\n        pdbInfoCenterMode centermode;\n  	double distance;	\n	double distancex;	\n	double distancey;	\n	double distancez;	\n} pdbInfoData;\n
psFile.h typedef long   psParaTypeInteger;\n
psFile.h typedef double psParaTypeReal;\n
psFile.h typedef struct psInfo {\n    psParaTypeInteger prologInfoNum;\n    char**            prologInfo;\n	char              label[MAX_STRING_LENGTH];\n    psParaTypeInteger page;\n    psParaTypeInteger status;\n} psInfo;\n
psFile.h typedef struct psPageInfo psPageInfo;\n
psFile.h struct psPageInfo {\n	psParaTypeInteger page;\n	psParaTypeInteger byte;\n	long start;\n	long end;\n	psPageInfo* next;\n};\n
psFile.h typedef struct psFile {\n	FILE* fpt;\n	psInfo info;\n	long headEnd;\n	psPageInfo* current;\n	psPageInfo* top;\n	psPageInfo* end;\n	long byte;\n} psFile;\n
psFile.h typedef struct psImageInfo {\n    psParaTypeReal scaleX;\n    psParaTypeReal scaleY;\n    psParaTypeReal translateX;\n    psParaTypeReal translateY;\n    psParaTypeReal angle;\n    psParaTypeInteger width;\n    psParaTypeInteger height;\n    psParaTypeInteger section;\n    psParaTypeInteger bps;\n    psParaTypeInteger nContour;\n    psParaTypeReal*   contourLevel;\n    unsigned char*    image;\n    float*            floatImage;\n	psParaTypeReal    contourLineColorChange;\n	psParaTypeReal    contourLineWidthStart;\n	psParaTypeReal    contourLineWidthStep;\n	psParaTypeReal    eyeX;   \n	psParaTypeReal    eyeY;\n	psParaTypeReal    eyeZ;\n	psParaTypeReal    pointX; \n	psParaTypeReal    pointY; \n	psParaTypeReal    pointZ;\n	psParaTypeInteger flagRGBColor;	\n	psParaTypeInteger flagRGBGradientColor;	\n	psParaTypeReal Red;\n	psParaTypeReal Green;\n	psParaTypeReal Blue;\n	psParaTypeReal RedFirst;\n	psParaTypeReal GreenFirst;\n	psParaTypeReal BlueFirst;\n	psParaTypeReal RedLast;\n	psParaTypeReal GreenLast;\n	psParaTypeReal BlueLast;\n	psParaTypeInteger flagHSBColor;	\n	psParaTypeInteger flagHSBGradientColor;	\n	psParaTypeReal Hue;\n	psParaTypeReal Saturation;\n	psParaTypeReal Brightness;\n	psParaTypeReal HueFirst;\n	psParaTypeReal SaturationFirst;\n	psParaTypeReal BrightnessFirst;\n	psParaTypeReal HueLast;\n	psParaTypeReal SaturationLast;\n	psParaTypeReal BrightnessLast;\n	psParaTypeInteger flagLineRGBColor;	\n	psParaTypeInteger flagLineRGBGradientColor;	\n	psParaTypeReal LineRed;\n	psParaTypeReal LineGreen;\n	psParaTypeReal LineBlue;\n	psParaTypeReal LineRedFirst;\n	psParaTypeReal LineGreenFirst;\n	psParaTypeReal LineBlueFirst;\n	psParaTypeReal LineRedLast;\n	psParaTypeReal LineGreenLast;\n	psParaTypeReal LineBlueLast;\n	psParaTypeInteger flagLineHSBColor;	\n	psParaTypeInteger flagLineHSBGradientColor;	\n	psParaTypeReal LineHue;\n	psParaTypeReal LineSaturation;\n	psParaTypeReal LineBrightness;\n	psParaTypeReal LineHueFirst;\n	psParaTypeReal LineSaturationFirst;\n	psParaTypeReal LineBrightnessFirst;\n	psParaTypeReal LineHueLast;\n	psParaTypeReal LineSaturationLast;\n	psParaTypeReal LineBrightnessLast;\n	psParaTypeReal CircleRadius;\n    long              dummy;\n} psImageInfo;\n
psFile.h typedef struct psPlotInfo {\n    psParaTypeReal scaleX;\n    psParaTypeReal scaleY;\n    psParaTypeReal translateX;\n    psParaTypeReal translateY;\n    psParaTypeReal dX;\n    psParaTypeReal dXValue;\n    psParaTypeReal minX;\n    psParaTypeReal centreX;\n    psParaTypeReal maxX;\n    char*          labelX;\n    psParaTypeReal dY;\n    psParaTypeReal dYValue;\n    psParaTypeReal minY;\n    psParaTypeReal centreY;\n    psParaTypeReal maxY;\n    char*          labelY;\n    psParaTypeInteger nData;\n    psParaTypeReal *data;\n} psPlotInfo;\n
tkImgFmtMRC.h typedef struct tkmrcInfo {\n	mrcImage mrc;\n	char*    fileName;   \n	long     flagHeader;\n	long     flagImage; \n	long flagnz;\n	mrcImageParaTypeInteger nz;\n	long flagz;\n	mrcImageParaTypeReal z;\n	long  flagMin;\n	float Min;\n	long  flagMax;\n	float Max;\n	long  flagLog;\n	long  flagPower;\n	long  flagInfo;\n	mrcImageInformation Info;\n	long  flagFSInfo;\n	mrcFSInfo FSInfo;\n	long  flagContrast;\n	float Contrast;\n	long    flagHist;\n	long    nhist;\n	double* histgram;\n	long    flagScattering;\n	long    flagR;\n	long    nScattering;\n	double* scattering;\n	double* R;\n	long flagProjX;\n	mrcImage projX;\n	long flagProjY;\n	mrcImage projY;\n	long flagSectX;\n	mrcImage sectX;\n	long flagSectY;\n	mrcImage sectY;\n} tkmrcInfo;\n
tkctfInfo.h typedef struct tkctfInfo {\n	int    flagR;\n	float* R;\n	int    nR;\n	ctfInfo ctf;\n} tkctfInfo;\n
avsFile.h typedef enum avsFileType {\n	avsFileTypeField=0,\n	avsFileTypeUCD=1\n} avsFileType;\n
avsFile.h typedef enum avsFileFieldDataType {\n	avsFileFieldDataTypeByte    = 0,\n	avsFileFieldDataTypeShort   = 1,\n	avsFileFieldDataTypeFloat   = 2,\n	avsFileFieldDataTypeInteger = 3,\n	avsFileFieldDataTypeDouble  = 4\n} avsFileFieldDataType;\n
avsFile.h typedef enum avsFileFieldType {\n	avsFileFieldTypeUniform     = 0,\n	avsFileFieldTypeRectilinear = 1,\n	avsFileFieldTypeIrregular   = 2\n} avsFileFieldType;\n
avsFile.h typedef enum avsFileUCDCellType {\n	avsFileUCDCellTypePoint        	=0,\n	avsFileUCDCellTypeLine   		=1,\n	avsFileUCDCellTypeTriangle		=2,\n	avsFileUCDCellTypeQuadrilateral	=3,\n	avsFileUCDCellTypeTetrahedron	=4,\n	avsFileUCDCellTypePyramid		=5,\n	avsFileUCDCellTypePrism			=6,\n	avsFileUCDCellTypeHexahedron	=7\n} avsFileUCDCellType;\n
ctfInfo.h #define ctfInfoModeWithAmplitudeContrast    0x0f\n#define ctfInfoModeWithMTF                  0x10\n#define ctfInfoModeWithIlluminationAngle    0x20\n#define ctfInfoModeWithEnergySpread         0x40\ntypedef enum ctfInfoMode {\n	ctfInfoModePhaseCTFOnly   = 0,\n	ctfInfoModePhaseAndAmpCTF = 1 \n} ctfInfoMode;\n
ctfInfo.h typedef enum ctfInfoMTFMode {\n	ctfInfoMTFModeSingleExp = 0,\n	ctfInfoMTFModeSingleLorentzian = 1,\n	ctfInfoMTFModeBoth      = 2,\n	ctfInfoMTFModeLinear    = 3, \n	ctfInfoMTFModeBothSum   = 4 \n} ctfInfoMTFMode;\n
hf2000.h char* hf2000CommandList[] = {\n    "*R", \n	"#Q", \n	"#A", \n	"#G", \n	"#H", \n	"#X", \n	"?30", \n	"?31", \n	"?32", \n	"?33", \n	"?34", \n	"?35", \n	"?36", \n	"?37", \n	"?40", \n	"?41", \n	"?42", \n	"?43", \n	"?44", \n	"?45", \n	"?46", \n	"?47", \n	"?48", \n	"?49", \n	NULL\n};\n
lFRET.h typedef enum energyTransferPointMode {\n    energyTransferPointModeFixedPoint   = 0,\n    energyTransferPointModeUnfixedPoint = 1,\n    energyTransferPointModeConnect      = 2,     \n    energyTransferPointModeFar          = 3,   \n    energyTransferPointModeNear         = 4     \n} energyTransferPointMode;\n
llData.h typedef unsigned int llDataStatusType;\n
llData.h #define llDataStatusOK          ((llDataStatusType)0x00000000)\n#define llDataCanNotReadFile    ((llDataStatusType)0x00010000);\n
llData.h #define llDataCanNotWriteFile   ((llDataStatusType)0x00010001);\n
llData.h #ifdef GLOBAL_DECLARATION\nchar* llDataErrorMsgReferFile[] = {\n    "File Pointer ",\n    ""\n};\n
llData.h char* llDataRefernceData[] = {\n"Amos,L.A. & Klug,A. J.Mol.Biol(1975),99,51-73",\n"  Three-dimensional Image Reconstructions of the Contractile Tail of T4 Bacteriophage",\n"  Appendix: Combination of Data from Helical Particles : Correlation and Selection",\n"              Amos,L.A",\n"              delta(theta)= -n*delta(phi) + 2*PI*Z*delta(z)",\n"                Klug,A. Crick,A., F.H.C. & Wyckoff,H.W. Acta Crystallogr.sect.(1958),11,199-213",\nNULL\n}; \n
llData.h #else\nextern char* llDataErrorMsgReferFile[];\n
llData.h extern char* llDataReferenceData[]; \n
llData.h #endif\n#define DefaultStringLength (256)\n#define NearSide    (0)\n#define FarSide     (1)\n#define AverageSide (2)\n#define SidePosition (14)\n#define CommentLength  (80)\n#define WeightPosition (SidePosition+4+CommentLength)\n#define NNPosition     (WeightPosition+12)\n#define NLPosition     (NNPosition+5)\n#define LLDataFormat  "%12.5e%12.5e%12.5e\n"\n#define LLDataFormat0 "%12.5e%12.5e%12.5e"\n#define LLDataFormat1 "%12.5e %12.5e %12.5e"\n#define RRPosition     (0)\n#define FPosition      (RRPosition+12)\n#define PHIPosition    (FPosition +12)\n#define PVALUE_MODE  (0x01)\n#define QVALUE_MODE  (0x02)\n#define RVALUE_MODE  (0x04)\n#define Q2VALUE_MODE (0x08)\ntypedef int   llDataParaTypeInteger;\n
llData.h typedef float llDataParaTypeReal;\n
llData.h typedef enum llDataPole {\n	llDataPoleNormal = 0,\n	llDataPoleAnti   = 1\n} llDataPole;\n
llData.h typedef enum llDataMode {\n    llDataModeMemoryNotAllocate = 0, \n    llDataModeMemoryAllocate = 1\n} llDataMode;\n
llData.h typedef struct llComplex {\n    llDataParaTypeReal      R;   \n    llDataParaTypeReal      RR;  \n    llDataParaTypeReal      F;  \n    llDataParaTypeReal      PHI;\n    llDataParaTypeReal      Re; \n    llDataParaTypeReal      Im;\n} llComplex;\n
llData.h typedef struct oneLLData {\n    char					Head[DefaultStringLength]; \n	llDataParaTypeReal      Weight;  \n    llDataParaTypeInteger   nn;      \n    llDataParaTypeInteger   nl;      \n    llDataParaTypeInteger   nm;      \n    llComplex*              data;    \n	llDataParaTypeInteger   Side;    \n    llDataParaTypeInteger   nR;      \n	llDataParaTypeReal     Z;   \n	llDataParaTypeInteger iZ;\n	llDataParaTypeReal     RMin; \n	llDataParaTypeInteger iRMin;\n	llDataParaTypeReal     RMax;\n	llDataParaTypeInteger iRMax;\n	llDataParaTypeReal    delBR;\n	llDataParaTypeReal    Fmax;  \n    long dummy;\n} oneLLData;\n
llData.h typedef struct llData {\n    llDataMode            mode;\n    llDataParaTypeInteger llMax;\n    llDataParaTypeInteger nRMax;\n    llDataParaTypeReal    truePitch;\n    llDataParaTypeReal    Weight;\n    llDataParaTypeReal    rScale;\n	llDataPole            Pole;\n	llDataParaTypeReal    Side;\n	llDataParaTypeInteger RRInfoSet;\n	llDataParaTypeInteger FmaxSet;\n	llDataParaTypeInteger RValueSet;\n	llDataParaTypeInteger ZValueSet;\n    oneLLData* LL;\n} llData;\n
llData.h typedef struct llDataBoth {\n	llData Nea;\n	llData Far;\n} llDataBoth;\n
llData.h typedef struct llDataAttributes {\n    llDataMode            mode;\n    llDataParaTypeInteger llMax;\n    llDataParaTypeInteger nRMax;\n    llDataParaTypeReal    truePitch;\n    llDataParaTypeReal    Weight;\n    llDataParaTypeReal    rScale;\n	llDataPole            Pole;\n	llDataParaTypeReal    Side;\n    oneLLData* LL;\n} llDataAttributes;\n
llData.h typedef struct onelllDataIntensityInformation {\n	int LL;\n	int n;\n	int l;\n	int flagI;\n	double I;\n	int flagPeak;\n	double Peak;\n} onelllDataIntensityInformation;\n
llData.h typedef struct lllDataIntensityInformation {\n	onelllDataIntensityInformation* onedata;\n    llDataParaTypeInteger llMax;\n} lllDataIntensityInformation;\n
llData.h #ifdef __cplusplus\nextern "C" {\n#endif\nextern void llDataFileRead(FILE* fpt, llData* ll, llDataParaTypeInteger* status);\nextern void llDataFileReadFollowingllData(FILE* fpt, llData* ll, llData* Ref, llDataParaTypeInteger* status);\nextern void llDataFileReadFollowingAttributes(FILE* fpt, llData* ll, llDataAttributes* attr, llDataParaTypeInteger* status);\nextern void llDataFileWrite(FILE* fpt, llData* ll, llDataParaTypeInteger* status);\nextern void llDataInit(llData* ll);\nextern void llDataInitWithReference(llData* ll, llData* ref);\nextern void llDataInitWithReference2(llData* ll, llData* ref, int side);\nextern void llDataHeaderInit(llData* ll);\nextern void llDataDataInit(llData* ll);\nextern void llDataFree(llData* ll);\nextern void llDataHeaderFree(llData* ll);\nextern void llDataDataFree(llData* ll);\nextern void llDataInfoPrint(FILE* fpt, llData* ll, long WhichLayer, long WhatInfo);\nextern void llDataInfoPrintUsage(FILE* fpt);\nextern void llDataRValueSet(llData* dst, int mode);\nextern void llDataFmaxSet(llData* dst, int mode);\nextern void llDataZValueSet(llData* dst, int mode);\nextern llDataParaTypeInteger* llDataTableBetweenTwollDataCreate(llData* ll1, llData* ll2, int mode);\nextern inline llDataParaTypeReal nearSidePhaseGet(llDataParaTypeReal phase, \n    llDataParaTypeInteger nn, \n    llDataParaTypeInteger side, \n    llDataParaTypeInteger pole);\nextern inline llDataParaTypeReal farSidePhaseGet(llDataParaTypeReal phase, \n    llDataParaTypeInteger nn, \n    llDataParaTypeInteger side, \n    llDataParaTypeInteger pole);\nextern void lllDataAttributeCopy(llData* ll1, llData* ll2);\nextern void lllDataHeaderCopy(llData* ll1, llData* ll2);\nextern void lllDataCopy(llData* ll1, llData* ll2);\nextern void lllDataClear(llData* ll1);\nextern void lllDataMul(llData* ll1, llData* ll2);\nextern void lllDataPoleSet(llData* ll1, llDataPole pole);\nextern void lllDataSideSet(llData* ll1, llDataParaTypeInteger Side);\nextern void lllDataMultiplyReal(llData* ll1, llDataParaTypeReal f);\nextern void lllDataDevidedByReal(llData* ll1, llDataParaTypeReal f);\nextern void lllDataAdd(llData* ll1, llData* ll2);\nextern void lllDataAdd2(llData* ll, llData* ll1, llData* ll2);\nextern void lllDataAvgTo(llData* dst, llData* src, llDataParaTypeInteger Side);\nextern void lllDataAvgToNea(llData* nea, llData* avg);\nextern void lllDataAvgToFar(llData* far, llData* avg);\nextern void lllDataWeightSet(FILE* fpt, llData* ll, llDataParaTypeReal w, long mode); \nextern inline long llDataValueGet(llData* ll, long l, double R, double* re, double *im);\nextern inline long llDataValueGet2(llData* ll, long nn, long nl, double R, double* re, double *im);\nextern long llDataLayerNumberGet(llData* ll, long n, long l);\nextern long llDataNLNumberGet(llData* ll);\nextern void llDataFandPHISet(llData* ll);\nextern void llDataReAndImSet(llData* ll);\nextern void llDataRRSet(llData* ll);\nextern void llDataRRInfoSet(llData* ll);\nextern void llDataAttributesSet2(llData* dst, llData* src);\nextern long llDataSizeCheck(llData* ll1, llData* ll2, char* message);\nextern void lllDataIntensityInformationGet(llData* in, lllDataIntensityInformation* data, int mode);\nextern void llDataError(char* s);\nextern void llDataErrorMessage(void);\n#ifdef __cplusplus\n};\n
lllDataCTFCompensation.h typedef enum lllDataMultiCTFCompensationCompensationMode {\n	lllDataMultiCTFCompensationModeAbsCTFperSQRCTF = 0,\n	lllDataMultiCTFCompensationModeCTFperSQRCTF    = 1\n} lllDataMultiCTFCompensationCompensationMode;\n
lllDataCTFCompensation.h typedef enum lllDataMultiCTFCompensationMode {\n	lllDataMultiCTFCompensationModeOnlyAverage   = 0,\n	lllDataMultiCTFCompensationModeCTFCompensate = 1\n} lllDataMultiCTFCompensationMode;\n
lllDataLowPassFiltering.h typedef enum lllDataLowPassFilteringMode {\n	lllDataLowPassFilteringModeSameMemorySize  = 0,\n	lllDataLowPassFilteringModeSavedMemorySize = 1\n} lllDataLowPassFilteringMode;\n
lllDataLowPassFiltering.h extern void lllDataLowPassFiltering(llData* ll, double RMax, int mode);\n
lllDataLowPassFiltering.h extern void lllDataRadialLowPassFiltering(llData* ll, double RRMax, int mode);\n
lllDatarMaxLimit.h typedef enum lllDatarMaxLimitMode {\n	lllDatarMaxLimitModeNoMemorySave = 0 ,\n	lllDatarMaxLimitModeMemorySave   = 1\n} lllDatarMaxLimitMode;\n
mrcImage.h #define  mrcStatusMask_ExitFailure  ((mrcStatusMask)0x80000000L)\n#define  mrcStatusMask_Warning      ((mrcStatusMask)0x40000000L)\n#define  mrcStatusMask_Information  ((mrcStatusMask)0x20000000L)\n#define  mrcStatusMask_Message      ((mrcStatusMask)0x10000000L)\n#define  mrcStatusMask_1B           ((mrcStatusMask)0x08000000L)\n#define  mrcStatusMask_1A           ((mrcStatusMask)0x04000000L)\n#define  mrcStatusMask_19           ((mrcStatusMask)0x02000000L)\n#define  mrcStatusMask_18           ((mrcStatusMask)0x01000000L)\n#define  mrcStatusMask_17           ((mrcStatusMask)0x00800000L)\n#define  mrcStatusMask_16           ((mrcStatusMask)0x00400000L)\n#define  mrcStatusMask_15           ((mrcStatusMask)0x00200000L)\n#define  mrcStatusMask_14           ((mrcStatusMask)0x00100000L)\n#define  mrcStatusMask_ReferMRCInfo ((mrcStatusMask)0x00080000L)\n#define  mrcStatusMask_Mode         ((mrcStatusMask)0x00040000L)\n#define  mrcStatusMask_ReferMemory  ((mrcStatusMask)0x00020000L)\n#define  mrcStatusMask_ReferFile    ((mrcStatusMask)0x00010000L)\n#define  MRC_Status_OK              ((mrcStatusType)0x00000000L)\n#define  MRC_FileCanNotOpened       ((mrcStatusType)0x00000000L|mrcStatusMask_ReferFile)\n#define  MRC_ImageHeaderCanNotRead  ((mrcStatusType)0x00000001L|mrcStatusMask_ReferFile)\n#define  MRC_ImageDataCanNotRead    ((mrcStatusType)0x00000002L|mrcStatusMask_ReferFile)\n#define  MRC_ImageHeaderCanNotWrite ((mrcStatusType)0x00000003L|mrcStatusMask_ReferFile)\n#define  MRC_ImageDataCanNotWrite   ((mrcStatusType)0x00000004L|mrcStatusMask_ReferFile)\n#define  MRC_FileCanNotClosed       ((mrcStatusType)0x00000005L|mrcStatusMask_ReferFile)\n#define  MRC_MemoryNotAllocate      ((mrcStatusType)0x00000000L|mrcStatusMask_ReferMemory)\n#define  MRC_ModeNotSupported       ((mrcStatusType)0x00000000L|mrcStatusMask_Mode)\n#define  MRC_ModeZNot1FFTMode       ((mrcStatusType)0x00000001L|mrcStatusMask_Mode)\n#define  MRC_SizeOfZero             ((mrcStatusType)0x00000000L|mrcStatusMask_ReferMRCInfo)\n#define MRC_HEADER (1024)\n#define MRC_TAILER (1024)\ntypedef mrcImageParaTypeInteger mrcImageMode;\n
mrcImage.h #define MRC_char_image	    	 ((mrcImageMode)0)\n#define	MRC_short_image	    	 ((mrcImageMode)1)\n#define	MRC_float_image	    	 ((mrcImageMode)2)\n#define	MRC_complex_short_ft     ((mrcImageMode)3)\n#define	MRC_complex_float_ft     ((mrcImageMode)4)\n#define	MRC_long_image	         ((mrcImageMode)101)\n#define	MRC_double_image	     ((mrcImageMode)102)\n#define	MRC_complex_long_ft      ((mrcImageMode)103)\n#define	MRC_complex_double_ft    ((mrcImageMode)104)\n#define	MRC_complex_short_fft    ((mrcImageMode)1003)\n#define	MRC_complex_float_fft    ((mrcImageMode)1004)\n#define	MRC_complex_long_fft     ((mrcImageMode)1103)\n#define	MRC_complex_double_fft   ((mrcImageMode)1104)\n#define MRC_NotSuppotedMode      ((mrcImageMode)0xffffffffL)\n#define mrcCharImage	    	 ((mrcImageMode)0)\n#define	mrcShortImage	    	 ((mrcImageMode)1)\n#define	mrcFloatImage	    	 ((mrcImageMode)2)\n#define	mrcComplexShortFT        ((mrcImageMode)3)\n#define	mrcComplexFloatFT        ((mrcImageMode)4)\n#define	mrcComplexFloatOneDimFT  ((mrcImageMode)5)\n#define	mrcLongImage	         ((mrcImageMode)101)\n#define	mrcDoubleImage	         ((mrcImageMode)102)\n#define	mrcComplexLongFT         ((mrcImageMode)103)\n#define	mrcComplexDoubleFT       ((mrcImageMode)104)\n#define	mrcComplexShortFFT       ((mrcImageMode)1003)\n#define	mrcComplexFloatFFT       ((mrcImageMode)1004)\n#define	mrcComplexLongFFT        ((mrcImageMode)1103)\n#define	mrcComplexDoubleFFT      ((mrcImageMode)1104)\n#define mrcNotSuppotedMode       ((mrcImageMode)0xffffffffL)\n#define MRC_MAX_LABEL_N   (10)\n#define MRC_MAX_LABEL_LEN (80)\n#define MRC_MAX_EXTRA     (29)\n#define  mrcImageTailerMode2DProjection 0\ntypedef enum mrcImageInformationMode {\n	meanOfAll             = 0,\n    meanOfSphereSurface   = 1,\n    meanOfCylinderSurface = 2,\n    meanOfEdge            = 3 \n} mrcImageInformationMode;\n
mrcImage.h #define HeaderN       Header.Cont.N       \n#define HeaderMode    Header.Cont.Mode    \n#define HeaderStartN  Header.Cont.StartN  \n#define HeaderM       Header.Cont.M       \n#define HeaderLength  Header.Cont.Length  \n#define HeaderAlpha   Header.Cont.Alpha   \n#define HeaderBeta    Header.Cont.Beta    \n#define HeaderGamma   Header.Cont.Gamma   \n#define HeaderMAPC    Header.Cont.MAPC    \n#define HeaderMAPR    Header.Cont.MAPR    \n#define HeaderMAPS    Header.Cont.MAPS    \n#define HeaderAMin    Header.Cont.AMin    \n#define HeaderAMax    Header.Cont.AMax    \n#define HeaderAMean   Header.Cont.AMean   \n#define HeaderISPG    Header.Cont.ISPG    \n#define HeaderNSYMBT  Header.Cont.NSYMBT  \n#define HeaderEXTRA   Header.Cont.EXTRA\n#define HeaderOriginX Header.Cont.OriginX \n#define HeaderOriginY Header.Cont.OriginY  \n#define HeaderLabelN  Header.Cont.LabelN\n#define HeaderLabel   Header.Cont.Label\ntypedef enum mrcPixelDataType {\n    mrcPixelRePart = 0,\n    mrcPixelImPart,\n    mrcPixelMag,\n    mrcPixelPow,\n    mrcPixelLogMag,\n    mrcPixelLogPow,\n    mrcPixelPhase\n} mrcPixelDataType;\n
mrcImage.h typedef enum mrcPixelDataHowToGet {\n    mrcPixelHowNearest = 0,\n    mrcPixelHowLinear,\n    mrcPixelHowCubicConv,\n    mrcPixelHowPolySig\n} mrcPixelDataHowToGet;\n
nr2.h static float maxarg1;\n
nr2.h static float maxarg2;\n
psFile.h #define MAX_STRING_LENGTH 256\n#define PS_FILE_STATUS_ERROR     (0)\n#define PS_FILE_STATUS_OK        (1)\n#define PROLOG_STRING_NUM    (11)\n#define PROLOG_VERSION        (0)\n#define PROLOG_TITLE          (1)\n#define PROLOG_CREATOR        (2)\n#define PROLOG_CREATION_DATE  (3)\n#define PROLOG_FOR            (4)\n#define PROLOG_BOUND_BOX      (5)\n#define PROLOG_PAGES          (6)\n#define PROLOG_DOC_FONTS      (7)\n#define PROLOG_END_DOC        (8)\n#define PROLOG_END_PRO        (9)\ntypedef enum psImageScaleMode {\n    psImageScaleModeBottomLeft = 1,\n    psImageScaleModeCenter     = 2\n} psImageScaleMode;\n
