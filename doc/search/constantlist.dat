avsFile.h typedef enum avsFileType {\n	avsFileTypeField=0,\n	avsFileTypeUCD=1\n} avsFileType;\n
avsFile.h typedef enum avsFileFieldDataType {\n	avsFileFieldDataTypeByte    = 0,\n	avsFileFieldDataTypeShort   = 1,\n	avsFileFieldDataTypeFloat   = 2,\n	avsFileFieldDataTypeInteger = 3,\n	avsFileFieldDataTypeDouble  = 4\n} avsFileFieldDataType;\n
avsFile.h typedef enum avsFileFieldType {\n	avsFileFieldTypeUniform     = 0,\n	avsFileFieldTypeRectilinear = 1,\n	avsFileFieldTypeIrregular   = 2\n} avsFileFieldType;\n
avsFile.h typedef enum avsFileUCDCellType {\n	avsFileUCDCellTypePoint        	=0,\n	avsFileUCDCellTypeLine   		=1,\n	avsFileUCDCellTypeTriangle		=2,\n	avsFileUCDCellTypeQuadrilateral	=3,\n	avsFileUCDCellTypeTetrahedron	=4,\n	avsFileUCDCellTypePyramid		=5,\n	avsFileUCDCellTypePrism			=6,\n	avsFileUCDCellTypeHexahedron	=7\n} avsFileUCDCellType;\n
ctfInfo.h #define ctfInfoModeWithAmplitudeContrast    0x0f\n#define ctfInfoModeWithMTF                  0x10\n#define ctfInfoModeWithIlluminationAngle    0x20\n#define ctfInfoModeWithEnergySpread         0x40\ntypedef enum ctfInfoMode {\n	ctfInfoModePhaseCTFOnly   = 0,\n	ctfInfoModePhaseAndAmpCTF = 1 \n} ctfInfoMode;\n
ctfInfo.h typedef enum ctfInfoMTFMode {\n	ctfInfoMTFModeSingleExp = 0,\n	ctfInfoMTFModeSingleLorentzian = 1,\n	ctfInfoMTFModeBoth      = 2,\n	ctfInfoMTFModeLinear    = 3, \n	ctfInfoMTFModeBothSum   = 4 \n} ctfInfoMTFMode;\n
hf2000.h char* hf2000CommandList[] = {\n    "*R", \n	"#Q", \n	"#A", \n	"#G", \n	"#H", \n	"#X", \n	"?30", \n	"?31", \n	"?32", \n	"?33", \n	"?34", \n	"?35", \n	"?36", \n	"?37", \n	"?40", \n	"?41", \n	"?42", \n	"?43", \n	"?44", \n	"?45", \n	"?46", \n	"?47", \n	"?48", \n	"?49", \n	NULL\n};\n
lFRET.h typedef enum energyTransferPointMode {\n    energyTransferPointModeFixedPoint   = 0,\n    energyTransferPointModeUnfixedPoint = 1,\n    energyTransferPointModeConnect      = 2,     \n    energyTransferPointModeFar          = 3,   \n    energyTransferPointModeNear         = 4     \n} energyTransferPointMode;\n
llData.h typedef unsigned int llDataStatusType;\n
llData.h #define llDataStatusOK          ((llDataStatusType)0x00000000)\n#define llDataCanNotReadFile    ((llDataStatusType)0x00010000);\n
llData.h #define llDataCanNotWriteFile   ((llDataStatusType)0x00010001);\n
llData.h #ifdef GLOBAL_DECLARATION\nchar* llDataErrorMsgReferFile[] = {\n    "File Pointer ",\n    ""\n};\n
llData.h char* llDataRefernceData[] = {\n"Amos,L.A. & Klug,A. J.Mol.Biol(1975),99,51-73",\n"  Three-dimensional Image Reconstructions of the Contractile Tail of T4 Bacteriophage",\n"  Appendix: Combination of Data from Helical Particles : Correlation and Selection",\n"              Amos,L.A",\n"              delta(theta)= -n*delta(phi) + 2*PI*Z*delta(z)",\n"                Klug,A. Crick,A., F.H.C. & Wyckoff,H.W. Acta Crystallogr.sect.(1958),11,199-213",\nNULL\n}; \n
llData.h #else\nextern char* llDataErrorMsgReferFile[];\n
llData.h extern char* llDataReferenceData[]; \n
llData.h #endif\n#define DefaultStringLength (256)\n#define NearSide    (0)\n#define FarSide     (1)\n#define AverageSide (2)\n#define SidePosition (14)\n#define CommentLength  (80)\n#define WeightPosition (SidePosition+4+CommentLength)\n#define NNPosition     (WeightPosition+12)\n#define NLPosition     (NNPosition+5)\n#define LLDataFormat  "%12.5e%12.5e%12.5e\n"\n#define LLDataFormat0 "%12.5e%12.5e%12.5e"\n#define LLDataFormat1 "%12.5e %12.5e %12.5e"\n#define RRPosition     (0)\n#define FPosition      (RRPosition+12)\n#define PHIPosition    (FPosition +12)\n#define PVALUE_MODE  (0x01)\n#define QVALUE_MODE  (0x02)\n#define RVALUE_MODE  (0x04)\n#define Q2VALUE_MODE (0x08)\ntypedef int   llDataParaTypeInteger;\n
llData.h typedef float llDataParaTypeReal;\n
llData.h typedef enum llDataPole {\n	llDataPoleNormal = 0,\n	llDataPoleAnti   = 1\n} llDataPole;\n
llData.h typedef enum llDataMode {\n    llDataModeMemoryNotAllocate = 0, \n    llDataModeMemoryAllocate = 1\n} llDataMode;\n
llData.h typedef struct llComplex {\n    llDataParaTypeReal      R;   \n    llDataParaTypeReal      RR;  \n    llDataParaTypeReal      F;  \n    llDataParaTypeReal      PHI;\n    llDataParaTypeReal      Re; \n    llDataParaTypeReal      Im;\n} llComplex;\n
llData.h typedef struct oneLLData {\n    char					Head[DefaultStringLength]; \n	llDataParaTypeReal      Weight;  \n    llDataParaTypeInteger   nn;      \n    llDataParaTypeInteger   nl;      \n    llDataParaTypeInteger   nm;      \n    llComplex*              data;    \n	llDataParaTypeInteger   Side;    \n    llDataParaTypeInteger   nR;      \n	llDataParaTypeReal     Z;   \n	llDataParaTypeInteger iZ;\n	llDataParaTypeReal     RMin; \n	llDataParaTypeInteger iRMin;\n	llDataParaTypeReal     RMax;\n	llDataParaTypeInteger iRMax;\n	llDataParaTypeReal    delBR;\n	llDataParaTypeReal    Fmax;  \n    long dummy;\n} oneLLData;\n
llData.h typedef struct llData {\n    llDataMode            mode;\n    llDataParaTypeInteger llMax;\n    llDataParaTypeInteger nRMax;\n    llDataParaTypeReal    truePitch;\n    llDataParaTypeReal    Weight;\n    llDataParaTypeReal    rScale;\n	llDataPole            Pole;\n	llDataParaTypeReal    Side;\n	llDataParaTypeInteger RRInfoSet;\n	llDataParaTypeInteger FmaxSet;\n	llDataParaTypeInteger RValueSet;\n	llDataParaTypeInteger ZValueSet;\n    oneLLData* LL;\n} llData;\n
llData.h typedef struct llDataBoth {\n	llData Nea;\n	llData Far;\n} llDataBoth;\n
llData.h typedef struct llDataAttributes {\n    llDataMode            mode;\n    llDataParaTypeInteger llMax;\n    llDataParaTypeInteger nRMax;\n    llDataParaTypeReal    truePitch;\n    llDataParaTypeReal    Weight;\n    llDataParaTypeReal    rScale;\n	llDataPole            Pole;\n	llDataParaTypeReal    Side;\n    oneLLData* LL;\n} llDataAttributes;\n
llData.h typedef struct onelllDataIntensityInformation {\n	int LL;\n	int n;\n	int l;\n	int flagI;\n	double I;\n	int flagPeak;\n	double Peak;\n} onelllDataIntensityInformation;\n
llData.h typedef struct lllDataIntensityInformation {\n	onelllDataIntensityInformation* onedata;\n    llDataParaTypeInteger llMax;\n} lllDataIntensityInformation;\n
llData.h #ifdef __cplusplus\nextern "C" {\n#endif\nextern void llDataFileRead(FILE* fpt, llData* ll, llDataParaTypeInteger* status);\nextern void llDataFileReadFollowingllData(FILE* fpt, llData* ll, llData* Ref, llDataParaTypeInteger* status);\nextern void llDataFileReadFollowingAttributes(FILE* fpt, llData* ll, llDataAttributes* attr, llDataParaTypeInteger* status);\nextern void llDataFileWrite(FILE* fpt, llData* ll, llDataParaTypeInteger* status);\nextern void llDataInit(llData* ll);\nextern void llDataInitWithReference(llData* ll, llData* ref);\nextern void llDataInitWithReference2(llData* ll, llData* ref, int side);\nextern void llDataHeaderInit(llData* ll);\nextern void llDataDataInit(llData* ll);\nextern void llDataFree(llData* ll);\nextern void llDataHeaderFree(llData* ll);\nextern void llDataDataFree(llData* ll);\nextern void llDataInfoPrint(FILE* fpt, llData* ll, long WhichLayer, long WhatInfo);\nextern void llDataInfoPrintUsage(FILE* fpt);\nextern void llDataRValueSet(llData* dst, int mode);\nextern void llDataFmaxSet(llData* dst, int mode);\nextern void llDataZValueSet(llData* dst, int mode);\nextern llDataParaTypeInteger* llDataTableBetweenTwollDataCreate(llData* ll1, llData* ll2, int mode);\nextern inline llDataParaTypeReal nearSidePhaseGet(llDataParaTypeReal phase, \n    llDataParaTypeInteger nn, \n    llDataParaTypeInteger side, \n    llDataParaTypeInteger pole);\nextern inline llDataParaTypeReal farSidePhaseGet(llDataParaTypeReal phase, \n    llDataParaTypeInteger nn, \n    llDataParaTypeInteger side, \n    llDataParaTypeInteger pole);\nextern void lllDataAttributeCopy(llData* ll1, llData* ll2);\nextern void lllDataHeaderCopy(llData* ll1, llData* ll2);\nextern void lllDataCopy(llData* ll1, llData* ll2);\nextern void lllDataClear(llData* ll1);\nextern void lllDataMul(llData* ll1, llData* ll2);\nextern void lllDataPoleSet(llData* ll1, llDataPole pole);\nextern void lllDataSideSet(llData* ll1, llDataParaTypeInteger Side);\nextern void lllDataMultiplyReal(llData* ll1, llDataParaTypeReal f);\nextern void lllDataDevidedByReal(llData* ll1, llDataParaTypeReal f);\nextern void lllDataAdd(llData* ll1, llData* ll2);\nextern void lllDataAdd2(llData* ll, llData* ll1, llData* ll2);\nextern void lllDataAvgTo(llData* dst, llData* src, llDataParaTypeInteger Side);\nextern void lllDataAvgToNea(llData* nea, llData* avg);\nextern void lllDataAvgToFar(llData* far, llData* avg);\nextern void lllDataWeightSet(FILE* fpt, llData* ll, llDataParaTypeReal w, long mode); \nextern inline long llDataValueGet(llData* ll, long l, double R, double* re, double *im);\nextern inline long llDataValueGet2(llData* ll, long nn, long nl, double R, double* re, double *im);\nextern long llDataLayerNumberGet(llData* ll, long n, long l);\nextern long llDataNLNumberGet(llData* ll);\nextern void llDataFandPHISet(llData* ll);\nextern void llDataReAndImSet(llData* ll);\nextern void llDataRRSet(llData* ll);\nextern void llDataRRInfoSet(llData* ll);\nextern void llDataAttributesSet2(llData* dst, llData* src);\nextern long llDataSizeCheck(llData* ll1, llData* ll2, char* message);\nextern void lllDataIntensityInformationGet(llData* in, lllDataIntensityInformation* data, int mode);\nextern void llDataError(char* s);\nextern void llDataErrorMessage(void);\n#ifdef __cplusplus\n};\n
lllDataCTFCompensation.h typedef enum lllDataMultiCTFCompensationCompensationMode {\n	lllDataMultiCTFCompensationModeAbsCTFperSQRCTF = 0,\n	lllDataMultiCTFCompensationModeCTFperSQRCTF    = 1\n} lllDataMultiCTFCompensationCompensationMode;\n
lllDataCTFCompensation.h typedef enum lllDataMultiCTFCompensationMode {\n	lllDataMultiCTFCompensationModeOnlyAverage   = 0,\n	lllDataMultiCTFCompensationModeCTFCompensate = 1\n} lllDataMultiCTFCompensationMode;\n
lllDataLowPassFiltering.h typedef enum lllDataLowPassFilteringMode {\n	lllDataLowPassFilteringModeSameMemorySize  = 0,\n	lllDataLowPassFilteringModeSavedMemorySize = 1\n} lllDataLowPassFilteringMode;\n
lllDataLowPassFiltering.h extern void lllDataLowPassFiltering(llData* ll, double RMax, int mode);\n
lllDataLowPassFiltering.h extern void lllDataRadialLowPassFiltering(llData* ll, double RRMax, int mode);\n
lllDatarMaxLimit.h typedef enum lllDatarMaxLimitMode {\n	lllDatarMaxLimitModeNoMemorySave = 0 ,\n	lllDatarMaxLimitModeMemorySave   = 1\n} lllDatarMaxLimitMode;\n
mrcImage.h #define  mrcStatusMask_ExitFailure  ((mrcStatusMask)0x80000000L)\n#define  mrcStatusMask_Warning      ((mrcStatusMask)0x40000000L)\n#define  mrcStatusMask_Information  ((mrcStatusMask)0x20000000L)\n#define  mrcStatusMask_Message      ((mrcStatusMask)0x10000000L)\n#define  mrcStatusMask_1B           ((mrcStatusMask)0x08000000L)\n#define  mrcStatusMask_1A           ((mrcStatusMask)0x04000000L)\n#define  mrcStatusMask_19           ((mrcStatusMask)0x02000000L)\n#define  mrcStatusMask_18           ((mrcStatusMask)0x01000000L)\n#define  mrcStatusMask_17           ((mrcStatusMask)0x00800000L)\n#define  mrcStatusMask_16           ((mrcStatusMask)0x00400000L)\n#define  mrcStatusMask_15           ((mrcStatusMask)0x00200000L)\n#define  mrcStatusMask_14           ((mrcStatusMask)0x00100000L)\n#define  mrcStatusMask_ReferMRCInfo ((mrcStatusMask)0x00080000L)\n#define  mrcStatusMask_Mode         ((mrcStatusMask)0x00040000L)\n#define  mrcStatusMask_ReferMemory  ((mrcStatusMask)0x00020000L)\n#define  mrcStatusMask_ReferFile    ((mrcStatusMask)0x00010000L)\n#define  MRC_Status_OK              ((mrcStatusType)0x00000000L)\n#define  MRC_FileCanNotOpened       ((mrcStatusType)0x00000000L|mrcStatusMask_ReferFile)\n#define  MRC_ImageHeaderCanNotRead  ((mrcStatusType)0x00000001L|mrcStatusMask_ReferFile)\n#define  MRC_ImageDataCanNotRead    ((mrcStatusType)0x00000002L|mrcStatusMask_ReferFile)\n#define  MRC_ImageHeaderCanNotWrite ((mrcStatusType)0x00000003L|mrcStatusMask_ReferFile)\n#define  MRC_ImageDataCanNotWrite   ((mrcStatusType)0x00000004L|mrcStatusMask_ReferFile)\n#define  MRC_FileCanNotClosed       ((mrcStatusType)0x00000005L|mrcStatusMask_ReferFile)\n#define  MRC_MemoryNotAllocate      ((mrcStatusType)0x00000000L|mrcStatusMask_ReferMemory)\n#define  MRC_ModeNotSupported       ((mrcStatusType)0x00000000L|mrcStatusMask_Mode)\n#define  MRC_ModeZNot1FFTMode       ((mrcStatusType)0x00000001L|mrcStatusMask_Mode)\n#define  MRC_SizeOfZero             ((mrcStatusType)0x00000000L|mrcStatusMask_ReferMRCInfo)\n#define MRC_HEADER (1024)\n#define MRC_TAILER (1024)\ntypedef mrcImageParaTypeInteger mrcImageMode;\n
mrcImage.h #define MRC_char_image	    	 ((mrcImageMode)0)\n#define	MRC_short_image	    	 ((mrcImageMode)1)\n#define	MRC_float_image	    	 ((mrcImageMode)2)\n#define	MRC_complex_short_ft     ((mrcImageMode)3)\n#define	MRC_complex_float_ft     ((mrcImageMode)4)\n#define	MRC_long_image	         ((mrcImageMode)101)\n#define	MRC_double_image	     ((mrcImageMode)102)\n#define	MRC_complex_long_ft      ((mrcImageMode)103)\n#define	MRC_complex_double_ft    ((mrcImageMode)104)\n#define	MRC_complex_short_fft    ((mrcImageMode)1003)\n#define	MRC_complex_float_fft    ((mrcImageMode)1004)\n#define	MRC_complex_long_fft     ((mrcImageMode)1103)\n#define	MRC_complex_double_fft   ((mrcImageMode)1104)\n#define MRC_NotSuppotedMode      ((mrcImageMode)0xffffffffL)\n#define mrcCharImage	    	 ((mrcImageMode)0)\n#define	mrcShortImage	    	 ((mrcImageMode)1)\n#define	mrcFloatImage	    	 ((mrcImageMode)2)\n#define	mrcComplexShortFT        ((mrcImageMode)3)\n#define	mrcComplexFloatFT        ((mrcImageMode)4)\n#define	mrcComplexFloatOneDimFT  ((mrcImageMode)5)\n#define	mrcLongImage	         ((mrcImageMode)101)\n#define	mrcDoubleImage	         ((mrcImageMode)102)\n#define	mrcComplexLongFT         ((mrcImageMode)103)\n#define	mrcComplexDoubleFT       ((mrcImageMode)104)\n#define	mrcComplexShortFFT       ((mrcImageMode)1003)\n#define	mrcComplexFloatFFT       ((mrcImageMode)1004)\n#define	mrcComplexLongFFT        ((mrcImageMode)1103)\n#define	mrcComplexDoubleFFT      ((mrcImageMode)1104)\n#define mrcNotSuppotedMode       ((mrcImageMode)0xffffffffL)\n#define MRC_MAX_LABEL_N   (10)\n#define MRC_MAX_LABEL_LEN (80)\n#define MRC_MAX_EXTRA     (29)\n#define  mrcImageTailerMode2DProjection 0\ntypedef enum mrcImageInformationMode {\n	meanOfAll             = 0,\n    meanOfSphereSurface   = 1,\n    meanOfCylinderSurface = 2,\n    meanOfEdge            = 3 \n} mrcImageInformationMode;\n
mrcImage.h #define HeaderN       Header.Cont.N       \n#define HeaderMode    Header.Cont.Mode    \n#define HeaderStartN  Header.Cont.StartN  \n#define HeaderM       Header.Cont.M       \n#define HeaderLength  Header.Cont.Length  \n#define HeaderAlpha   Header.Cont.Alpha   \n#define HeaderBeta    Header.Cont.Beta    \n#define HeaderGamma   Header.Cont.Gamma   \n#define HeaderMAPC    Header.Cont.MAPC    \n#define HeaderMAPR    Header.Cont.MAPR    \n#define HeaderMAPS    Header.Cont.MAPS    \n#define HeaderAMin    Header.Cont.AMin    \n#define HeaderAMax    Header.Cont.AMax    \n#define HeaderAMean   Header.Cont.AMean   \n#define HeaderISPG    Header.Cont.ISPG    \n#define HeaderNSYMBT  Header.Cont.NSYMBT  \n#define HeaderEXTRA   Header.Cont.EXTRA\n#define HeaderOriginX Header.Cont.OriginX \n#define HeaderOriginY Header.Cont.OriginY  \n#define HeaderLabelN  Header.Cont.LabelN\n#define HeaderLabel   Header.Cont.Label\ntypedef enum mrcPixelDataType {\n    mrcPixelRePart = 0,\n    mrcPixelImPart,\n    mrcPixelMag,\n    mrcPixelPow,\n    mrcPixelLogMag,\n    mrcPixelLogPow,\n    mrcPixelPhase\n} mrcPixelDataType;\n
mrcImage.h typedef enum mrcPixelDataHowToGet {\n    mrcPixelHowNearest = 0,\n    mrcPixelHowLinear,\n    mrcPixelHowCubicConv,\n    mrcPixelHowPolySig\n} mrcPixelDataHowToGet;\n
nr2.h static float maxarg1;\n
nr2.h static float maxarg2;\n
psFile.h #define MAX_STRING_LENGTH 256\n#define PS_FILE_STATUS_ERROR     (0)\n#define PS_FILE_STATUS_OK        (1)\n#define PROLOG_STRING_NUM    (11)\n#define PROLOG_VERSION        (0)\n#define PROLOG_TITLE          (1)\n#define PROLOG_CREATOR        (2)\n#define PROLOG_CREATION_DATE  (3)\n#define PROLOG_FOR            (4)\n#define PROLOG_BOUND_BOX      (5)\n#define PROLOG_PAGES          (6)\n#define PROLOG_DOC_FONTS      (7)\n#define PROLOG_END_DOC        (8)\n#define PROLOG_END_PRO        (9)\ntypedef enum psImageScaleMode {\n    psImageScaleModeBottomLeft = 1,\n    psImageScaleModeCenter     = 2\n} psImageScaleMode;\n
