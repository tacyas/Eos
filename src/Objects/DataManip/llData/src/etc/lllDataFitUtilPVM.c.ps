%!PS-Adobe-1.0
%%Title: lllDataFitUtilPVM.c
%%Creator: Id: a2ps,v 1.32 1993/06/25 00:44:18 utashiro Exp 
%%CreationDate: Tue Oct 13 19:43:52 JST 1998
%%Pages: (atend)
%%PageOrder: Ascend
%%DocumentPaperSizes: A4
%%Orientation: Landscape
%%EndComments

/$a2psdict 100 dict def
$a2psdict begin
% Initialize page description variables.
/inch {72 mul} bind def
%% SelectTray
statusdict /a4tray known { statusdict begin a4tray end } if
/landscape true def
/twinpage true def
/sheetheight 11.64 inch def
/sheetwidth 8.27 inch def
/lmargin 1.2 inch def
/smargin 1.2 inch def
/paper_adjust 0.05 inch def
/noborder false def
/noheader false def
/headersize 0.22 inch def
/nofooter false def
/nopunchmark true def
/bodyfontsize 6.6 def
/kanjiAsciiRatio 1 def
/lines 66 def
/columns 86 def
/date (Oct 13 1998 19:43) def
/doasciimag false def
%!  PostScript Source Code
%
%  File: imag:/users/local/a2ps/header.ps
%  Created: Tue Nov 29 12:14:02 1988 by miguel@imag (Miguel Santana)
%  Version: 2.0
%  Description: PostScript prolog for a2ps ascii to PostScript program.
% 
%  Edit History:
%  - Original version by evan@csli (Evan Kirshenbaum).
%  - Modified by miguel@imag to:
%    1) Correct an overflow bug when printing page number 10 (operator
%	cvs).
%    2) Define two other variables (sheetwidth, sheetheight) describing
%	the physical page (by default A4 format).
%    3) Minor changes (reorganization, comments, etc).
%  - Modified by tullemans@apolloway.prl.philips.nl
%    1) Correct stack overflows with regard to operators cvs and copy.
%       The resulting substrings where in some cases not popped off 
%       the stack, what can result in a stack overflow.
%    2) Replaced copypage and erasepage by showpage. Page througput
%       degrades severely (see red book page 140) on our ps-printer
%       after printing sheet 16 (i.e. page 8) of a file which was 
%       actually bigger. For this purpose the definitions of startdoc
%       and startpage are changed.
%  - Modified by Tim Clark <T.Clark@uk.ac.warwick> to:
%    1) Print one page per sheet (portrait) as an option.
%    2) Reduce size of file name heading, if it's too big.
%    3) Save and restore PostScript state at begining/end. It now uses
%	conventional %%Page %%Trailer markers.
%    4) Print one wide page per sheet in landscape mode as an option.
%  - Modified by miguel@imag.fr to
%    1) Add new option to print n copies of a file.
%    2) Add new option to suppress heading printing.
%    3) Add new option to suppress page surrounding border printing.
%    4) Add new option to change font size. Number of lines and columns
%	are now automatically adjusted, depending on font size and
%	printing mode used.
%    5) Minor changes (best layout, usage message, etc).
%  - Modified by kanazawa@sra.co.jp to:
%    1) Handle Japanese code
%  - Modified by utashiro@sra.co.jp to:
%    1) Fix bug in printing long label
%    2) Handle carriage-return
%    3) Specify kanji-ascii character retio
%    4) Add footer label
%    5) Change filename->fname becuase ghostscript has operator filename
%    6) Support three different font style
%    7) Incorporate B4 paper support and punchmark contributed
%       by Masami Ueno <cabbage@kki.esi.yamanashi.ac.jp>
%

% Copyright (c) 1988, Miguel Santana, miguel@imag.imag.fr
%
% Permission is granted to copy and distribute this file in modified
% or unmodified form, for noncommercial use, provided (a) this copyright
% notice is preserved, (b) no attempt is made to restrict redistribution
% of this file, and (c) this file is not distributed as part of any
% collection whose redistribution is restricted by a compilation copyright.
%


% General macros.
/xdef {exch def} bind def
/getfont {exch findfont exch scalefont} bind def

% Page description variables and inch function are defined by a2ps program.

% Character size for differents fonts.
   landscape
   { /filenamefontsize 12 def }
   { /filenamefontsize 16 def }
ifelse
/datefontsize filenamefontsize 0.8 mul def
/headermargin filenamefontsize 0.25 mul def
/bodymargin bodyfontsize 0.7 mul def

% Font assignment to differents kinds of "objects"
/filenamefontname /Helvetica-Bold def
/stdfilenamefont filenamefontname filenamefontsize getfont def
/datefont /Helvetica datefontsize getfont def
/footerfont /Helvetica-Bold datefontsize getfont def
/mag { doasciimag { [ 1 0 0 asciimagsize 0 0 ] makefont } if } def
/bodynfont /Courier bodyfontsize getfont mag def
/bodybfont /Courier-Bold bodyfontsize getfont mag def
/bodyofont /Courier-BoldOblique bodyfontsize getfont mag def
/fontarray [ bodynfont bodybfont bodyofont ] def
/bodyfont bodynfont def

% Initializing kanji fonts
/kanji_initialized false def
/kanji_init {
   kanji_initialized not
   {
      /bodykfontsize bodyfontsize kanjiAsciiRatio mul def
      /bodyknfont /Ryumin-Light-H bodykfontsize getfont def
      /bodykbfont /GothicBBB-Medium-H bodykfontsize getfont def
      /bodykofont bodykbfont [ 1 0 .2 1 0 0 ] makefont def
      /KanjiRomanDiff 1.2 bodyfontsize mul 1.0 bodykfontsize mul sub def
      /KanjiRomanDiffHalf KanjiRomanDiff 2 div def
      /kfontarray [ bodyknfont bodykbfont bodykofont ] def
      /kanji_initialized true def
   } if
} def

% Backspace width
/backspacewidth
   bodyfont setfont (0) stringwidth pop
   def

% Logical page attributs (a half of a real page or sheet).
/pagewidth
   bodyfont setfont (0) stringwidth pop columns mul bodymargin dup add add
   def
/pageheight
   bodyfontsize 1.1 mul lines mul bodymargin dup add add headersize add
   def

% Coordinates for upper corner of a logical page and for sheet number.
% Coordinates depend on format mode used.
% In twinpage mode, coordinate x of upper corner is not the same for left
% and right pages: upperx is an array of two elements, indexed by sheetside.
/rightmargin smargin 3 div def
/leftmargin smargin 2 mul 3 div def
/topmargin lmargin twinpage {3} {2} ifelse div def
landscape
{  % Landscape format
   /punchx .4 inch def           % for PunchMark
   /punchy sheetwidth 2 div def  % for PunchMark
   /uppery rightmargin pageheight add bodymargin add def
   /sheetnumbery sheetwidth leftmargin pageheight add datefontsize add sub def
   twinpage
   {  % Two logical pages
      /upperx [ topmargin 2 mul			% upperx for left page
		dup topmargin add pagewidth add	% upperx for right page
	      ] def
      /sheetnumberx sheetheight topmargin 2 mul sub def
   }
   {  /upperx [ topmargin dup ] def
      /sheetnumberx sheetheight topmargin sub datefontsize sub def
   }
   ifelse
}
{  % Portrait format
   /punchx .3 inch def
   /punchy sheetheight 2 div def
   /uppery topmargin pageheight add def
   /upperx [ leftmargin dup ] def
   /sheetnumberx sheetwidth rightmargin sub datefontsize sub def
   /sheetnumbery
	 sheetheight 
	 topmargin pageheight add datefontsize add headermargin add
      sub
      def
}
ifelse

% Strings used to make easy printing numbers
/pnum 12 string def
/empty 12 string def

% Other initializations.
datefont setfont
/datewidth date stringwidth pop def
/pagenumwidth (Page 999) stringwidth pop def
/filenameroom
         pagewidth
	 filenamefontsize 4 mul datewidth add pagenumwidth add
      sub
   def


% Function startdoc: initializes printer and global variables.
/startdoc
    { /sheetside 0 def			% sheet side that contains current page
      /sheet 1 def			% sheet number
   } bind def

% Function newfile: init file name for each new file.
/newfile
    { cleanup
      /fname xdef
      stdfilenamefont setfont
      /filenamewidth fname stringwidth pop def
      /filenamefont
	 filenamewidth filenameroom gt
	 {
	       filenamefontname
	       filenamefontsize filenameroom mul filenamewidth div
	    getfont
	 }
	 {  stdfilenamefont }
	 ifelse
	 def
    } bind def

% Function printpage: Print a physical page.
/printpage
    { /sheetside 0 def
      twinpage
      {  noborder not
	    { sheetnumber }
	 if
      }
      {  noheader noborder not and
	    { sheetnumber }
	 if
      }
      ifelse
      showpage 
%      pagesave restore
      /sheet sheet 1 add def
    } bind def

% Function cleanup: terminates printing, flushing last page if necessary.
/cleanup
    { twinpage sheetside 1 eq and
         { printpage }
      if
    } bind def

%
% Function startpage: prints page header and page border and initializes
% printing of the file lines.  Page number is stored on the top of stack.
/startpage
    { /pagenum exch def
      sheetside 0 eq
	{ % /pagesave save def
	  landscape
	    { sheetwidth 0 inch translate	% new coordinates system origin
	      90 rotate				% landscape format
	      paper_adjust neg 0 translate
	    } if
	} if
      noborder not { printborder } if
      noheader not { printheader } if
      nofooter not { printfooter } if
      nopunchmark not { punchmark } if
	 upperx sheetside get  bodymargin  add
	    uppery
	    bodymargin bodyfontsize add  noheader {0} {headersize} ifelse  add
	 sub
      moveto
    } bind def

% Function printheader: prints page header.
/printheader
    { upperx sheetside get  uppery headersize sub 1 add  moveto
      datefont setfont
      gsave
        datefontsize headermargin rmoveto
	date show					% date/hour
      grestore
      gsave
	pagenum pnum cvs pop
	   pagewidth pagenumwidth sub
	   headermargin
	rmoveto
        (Page ) show pnum show				% page number
      grestore
      empty pnum copy pop
      gsave
        filenamefont setfont
	      filenameroom fname stringwidth pop sub 2 div datewidth add
	      filenamefontsize 2 mul 
	   add 
	   headermargin
	rmoveto
        fname show						% file name
      grestore
    } bind def

% Function printfooter: prints page footer.
/printfooter
    { upperx 0 get sheetnumbery moveto
      footerfont setfont
      fname show
    } bind def

% Function printborder: prints border page.
/printborder 
    { upperx sheetside get uppery moveto
      gsave					% print the four sides
        pagewidth 0 rlineto			% of the square
        0 pageheight neg rlineto
        pagewidth neg 0 rlineto
        closepath stroke
      grestore
      noheader not
         { 0 headersize neg rmoveto pagewidth 0 rlineto stroke }
      if
    } bind def

% Punch Marker
/punchmark {
  gsave
    newpath punchx punchy moveto
    punchx 2 add punchy -0.5 add lineto
    punchx 2 add punchy 0.5 add lineto
    punchx punchy lineto
    closepath
    0 setgray .8 setlinewidth stroke
  grestore
  } bind def

%
% Function endpage: adds a sheet number to the page (footnote) and prints
% the formatted page (physical impression). Activated at the end of each
% source page (lines reached or FF character).
/endpage
   { twinpage  sheetside 0 eq  and
        { /sheetside 1 def }
        { printpage }
     ifelse
   } bind def

% Function sheetnumber: prints the sheet number.
/sheetnumber
    { sheetnumberx sheetnumbery moveto
      datefont setfont
      sheet pnum cvs
	 dup stringwidth pop (0) stringwidth pop sub neg 0 rmoveto show
      empty pnum copy pop
    } bind def

% Function bs: go back one character width to emulate BS
/bs { backspacewidth neg 0 rmoveto } bind def

% Function s: print a source string
/s  { fontarray fonttype get setfont
      show
    } bind def

% Function ks: print a kanji source string
/ks { kfontarray fonttype get setfont
      KanjiRomanDiffHalf 0 rmoveto
      KanjiRomanDiff 0 3 -1 roll ashow
      KanjiRomanDiffHalf neg 0 rmoveto
    } def

% Function bl: beginning of line
/bl { gsave } bind def

% Function nl: newline
/nl {
      grestore
      0 bodyfontsize 1.1 mul neg rmoveto
    } bind def

% Function cr: carriage return
/cr { grestore } bind def

% Function hlr: half-line up
/hlr { 0 bodyfontsize 0.55 mul rmoveto } bind def

% Function hlr: half-line down
/hlf { 0 bodyfontsize 0.55 mul neg rmoveto } bind def

% Function hlr: half-character backward
/hcr { backspacewidth 2 div neg 0 rmoveto } bind def

% Function hlr: half-character forward
/hcf { backspacewidth 2 div 0 rmoveto } bind def

/R { /fonttype 0 def } bind def
/B { /fonttype 1 def } bind def
/I { /fonttype 2 def } bind def
R
/docsave save def
startdoc
%%EndProlog

(lllDataFitUtilPVM.c) newfile
/sheet 1 def
%%Page: 1 1
1 startpage
bl ( ) s (/* # %M% %Y% %I%) s nl
bl ( ) s (# The latest update : %G% at %U%) s nl
bl ( ) s (#) s nl
bl ( ) s (#%Z% lllDataFit ver %I%) s nl
bl ( ) s (#%Z% Created by ) s nl
bl ( ) s (#%Z%) s nl
bl ( ) s (#%Z% Usage : lllDataFit) s nl
bl ( ) s (#%Z% Attention) s nl
bl ( ) s (#%Z%) s nl
bl ( ) s (*/) s nl
bl ( ) s (static char __sccs_id[] = "%Z%lllDataFit ver%I%; Date:%D% %Z%";) s nl
bl ( ) s (#include <math.h>) s nl
bl ( ) s (#include <stdio.h>) s nl
bl ( ) s (#include <stdlib.h>) s nl
bl ( ) s (#include <unistd.h>) s nl
bl ( ) s nl
bl ( ) s (#undef DEBUG) s nl
bl ( ) s (#include "genUtil.h") s nl
bl ( ) s nl
bl ( ) s (#include "../inc/llData.h") s nl
bl ( ) s (#include "lllDataFit.h") s nl
bl ( ) s (#include "File.h") s nl
bl ( ) s (#include "Memory.h") s nl
bl ( ) s (#include "mrcImage.h") s nl
bl ( ) s nl
bl ( ) s nl
bl ( ) s (#ifdef PVM) s nl
bl ( ) s (#include "ctfInfo.h") s nl
bl ( ) s (#include "llDataPVM.h") s nl
bl ( ) s (#include "PVM.h") s nl
bl ( ) s nl
bl ( ) s (void ) s nl
bl ( ) s (lllDataFitServerStart\(lllDataFitPVMInfo* linfo, FILE* fpt, int numTask\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        int my_tid;) s nl
bl ( ) s (        char* arg[] = { \(char*\) 0 };) s nl
bl ( ) s nl
bl ( ) s (    /* PVM Start */) s nl
bl ( ) s (        pvm_catchout\(stdout\);) s nl
bl ( ) s (    my_tid = pvm_mytid\(\);) s nl
bl ( ) s nl
bl ( ) s (        pvm_catchout\(stdout\);) s nl
bl ( ) s (    if\(NULL!=fpt\) {) s nl
bl ( ) s (        linfo->tids = pvmServerStart\("llDataFitServer", arg, fpt, &numTask, 0\);) s nl
bl ( ) s (    } else {) s nl
bl ( ) s (        linfo->tids = pvmServerStart\("llDataFitServer", arg, NULL,            &numTas) s nl
bl ( ) s (k, 0\);) s nl
bl ( ) s (    }) s nl
bl ( ) s (    linfo->numTask = numTask;) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void ) s nl
bl ( ) s (lllDataFitServerEnd\(lllDataFitPVMInfo linfo\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        int i;) s nl
bl ( ) s nl
bl ( ) s (        for\(i=0; i<linfo.numTask; i++\) {) s nl
bl ( ) s (                pvm_kill\(linfo.tids[i]\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (        pvm_exit\(\);) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataFitPVMStart\(llData* llref, llData* llp, llDataFittedParam* p, int tid, long mo) s nl
bl ( ) s (de\)) s nl
bl ( ) s ({) s nl

endpage
2 startpage
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int info;) s nl
bl ( ) s nl
bl ( ) s nl
bl ( ) s (        DEBUGPRINT\("lllDataFitPVMStart Start"\);) s nl
bl ( ) s (        /* Send */) s nl
bl ( ) s (        llDataSendByPVM\(llref, tid, 0\);) s nl
bl ( ) s (        llDataSendByPVM\(llp,   tid, 0\);) s nl
bl ( ) s nl
bl ( ) s (        lllDataFittedParamSendByPVM\(p, tid, 0\);) s nl
bl ( ) s nl
bl ( ) s (        msgtag = 0;) s nl
bl ( ) s (        pvm_initsend\(PvmDataDefault\);) s nl
bl ( ) s (        pvm_pklong\(&mode, 1, 1\);) s nl
bl ( ) s (        info = pvm_send\(tid, msgtag\);) s nl
bl ( ) s (        if\(info<0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataFitPVMStart:"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataFitPVMEnd\(llData* llref, llData* llp, llDataFittedParam* p, int tid, long mode) s nl
bl ( ) s (\) ) s nl
bl ( ) s ({) s nl
bl ( ) s (        DEBUGPRINT\("lllDataFitPVMEnd Start"\);) s nl
bl ( ) s (        lllDataFittedParamRecieveByPVM\(p, tid, 1\);) s nl
bl ( ) s (        fflush\(stdout\);) s nl
bl ( ) s (        fflush\(stderr\);) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataFitPVMServer\(\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        llData                          llref;) s nl
bl ( ) s (        llData                          llp;) s nl
bl ( ) s (        llDataFittedParam       p;) s nl
bl ( ) s (        long mode;) s nl
bl ( ) s (        int  tid;) s nl
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int bufid;) s nl
bl ( ) s (        int info;) s nl
bl ( ) s nl
bl ( ) s (        while\(1\) {) s nl
bl ( ) s (                DEBUGPRINT\("lllDataFitPVMServer Start\\n"\);) s nl
bl ( ) s nl
bl ( ) s (                memoryClear\(&llref, sizeof\(llData\), 0\); ) s nl
bl ( ) s (                memoryClear\(&llp,   sizeof\(llData\), 0\); ) s nl
bl ( ) s (                memoryClear\(&p, sizeof\(llDataFittedParam\), 0\);  ) s nl
bl ( ) s nl
bl ( ) s (                tid = pvm_parent\(\);) s nl
bl ( ) s nl
bl ( ) s (                /* Recieve */) s nl
bl ( ) s (                llDataRecieveByPVM\(&llref,       tid, 0\);) s nl
bl ( ) s (                llDataRecieveByPVM\(&llp,         tid, 0\);) s nl
bl ( ) s (                lllDataFittedParamRecieveByPVM\(&p, tid, 0\);) s nl
bl ( ) s (                msgtag = 0; bufid = pvm_recv\(tid, msgtag\);) s nl
bl ( ) s (                if\(bufid<0\) {) s nl
bl ( ) s (                        fprintf\(stderr, "Cannot recieve mode\\n"\); pvm_perror\("lllData) s nl
bl ( ) s (FitPVMServer:"\);) s nl
bl ( ) s (                }) s nl
bl ( ) s (                info = pvm_upklong\(&mode, 1, 1\);) s nl
bl ( ) s (                if\(info<0\) {) s nl
bl ( ) s (                        fprintf\(stderr, "Cannot recieve mode\\n"\); pvm_perror\("lllData) s nl
bl ( ) s (FitPVMServer:"\);) s nl
bl ( ) s (                }) s nl
bl ( ) s nl

endpage
%%Page: 2 2
3 startpage
bl ( ) s (                /* Calc */) s nl
bl ( ) s (                DEBUGPRINT1\("lllDataFitPVMServer Fit Start: %d\\n", mode\);) s nl
bl ( ) s (                lllDataFit\(&llref, &llp, &p, mode\);) s nl
bl ( ) s (                DEBUGPRINT\("lllDataFitPVMServer Fit End \\n"\);) s nl
bl ( ) s (                fflush\(stderr\); ) s nl
bl ( ) s (                fflush\(stdout\); ) s nl
bl ( ) s nl
bl ( ) s (                /* Send */) s nl
bl ( ) s (                DEBUGPRINT\("lllDataFitPVMServer Send Results\\n"\);) s nl
bl ( ) s (                lllDataFittedParamSendByPVM\(&p, tid, 0\);) s nl
bl ( ) s (                DEBUGPRINT\("lllDataFitPVMServer Send End\\n"\);) s nl
bl ( ) s nl
bl ( ) s (                /* Memory Free */) s nl
bl ( ) s (                llDataFree\(&llref\);) s nl
bl ( ) s (                llDataFree\(&llp\);) s nl
bl ( ) s (                lllDataFittedParameterFree\(&p\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataFitWithFilePVMStart\(llData* llref, llData* llp, llDataFittedParam* p, char* fi) s nl
bl ( ) s (lename, int tid, long mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        char filename2[1024];) s nl
bl ( ) s nl
bl ( ) s (        sprintf\(filename2, "%s.anti", filename\);) s nl
bl ( ) s nl
bl ( ) s (        p->flagFitFile     = 1; ) s nl
bl ( ) s (        p->fitFileName     = filename;) s nl
bl ( ) s (        p->fitFileNameAnti = filename2;) s nl
bl ( ) s (        ) s nl
bl ( ) s (        lllDataFitPVMStart\(llref, llp, p, tid, mode\);) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataFitWithFilePVMEnd\(llData* llref, llData* llp, llDataFittedParam* p, char* file) s nl
bl ( ) s (name, int tid, long mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        lllDataFitPVMEnd\(llref, llp, p, tid, mode\);) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataFittedParamSendByPVM\(llDataFittedParam* p, int tid, int mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int info;) s nl
bl ( ) s (        lllDataParamToFitSendByPVM\(&\(p->Para\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitSendByPVM2\(&\(p->PPara\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitSendByPVM2\(&\(p->QPara\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitSendByPVM2\(&\(p->Q2Para\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitSendByPVM2\(&\(p->RPara\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitSendByPVM2\(&\(p->PParaInv\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitSendByPVM2\(&\(p->QParaInv\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitSendByPVM2\(&\(p->Q2ParaInv\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitSendByPVM2\(&\(p->RParaInv\), tid, mode\);) s nl
bl ( ) s nl
bl ( ) s (        pvm_initsend\(PvmDataDefault\);) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagFitFile\),  1, 1\);) s nl
bl ( ) s (        msgtag = 0; info = pvm_send\(tid, msgtag\);) s nl
bl ( ) s (        if\(info<0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataFittedParamSendByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (        if\(p->flagFitFile\) {) s nl
bl ( ) s (                DEBUGPRINT\("flagFitFile Send\\n"\)) s nl
bl ( ) s (                pvm_initsend\(PvmDataDefault\);) s nl

endpage
4 startpage
bl ( ) s (                pvm_pkbyte\(p->fitFileName, 1024, 1\);) s nl
bl ( ) s (                pvm_pkbyte\(p->fitFileNameAnti, 1024, 1\);) s nl
bl ( ) s (                msgtag = 0; info = pvm_send\(tid, msgtag\);) s nl
bl ( ) s (                if\(info<0\) {) s nl
bl ( ) s (                        pvm_perror\("lllDataFittedParamSendByPVM"\);) s nl
bl ( ) s (                }) s nl
bl ( ) s (        }) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataFittedParamRecieveByPVM\(llDataFittedParam* p, int tid, int mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        char s[1024];) s nl
bl ( ) s (        int msgtag;) s nl
bl ( ) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM\(&\(p->Para\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM2\(&\(p->PPara\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM2\(&\(p->QPara\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM2\(&\(p->Q2Para\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM2\(&\(p->RPara\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM2\(&\(p->PParaInv\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM2\(&\(p->QParaInv\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM2\(&\(p->Q2ParaInv\), tid, mode\);) s nl
bl ( ) s (        lllDataParamToFitRecieveByPVM2\(&\(p->RParaInv\), tid, mode\);) s nl
bl ( ) s nl
bl ( ) s (        msgtag = 0; pvm_recv\(tid, msgtag\);) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagFitFile\),  1, 1\);) s nl
bl ( ) s nl
bl ( ) s (        if\(p->flagFitFile\) {) s nl
bl ( ) s (                DEBUGPRINT\("flagFitFile Recieve\\n"\)) s nl
bl ( ) s (                msgtag = 0; pvm_recv\(tid, msgtag\);) s nl
bl ( ) s (                if\(0==mode\) {) s nl
bl ( ) s (                        p->fitFileName     = \(char*\)memoryAllocate\(sizeof\(char\)*1024,) s nl
bl ( ) s ( "in lllDataFitPVMFittedParamRecieve"\); ) s nl
bl ( ) s (                        p->fitFileNameAnti = \(char*\)memoryAllocate\(sizeof\(char\)*1024,) s nl
bl ( ) s ( "in lllDataFitPVMFittedParamRecieve kk"\); ) s nl
bl ( ) s (                }) s nl
bl ( ) s (                pvm_upkbyte\(p->fitFileName, 1024, 1\);) s nl
bl ( ) s (                pvm_upkbyte\(p->fitFileNameAnti, 1024, 1\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataParamToFitSendByPVM\(llDataParamToFit* p, int tid, int mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int info;) s nl
bl ( ) s (        int nitem;) s nl
bl ( ) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->Omega\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->x\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->z\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->r\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->phi\), tid, mode\);) s nl
bl ( ) s (        ) s nl
bl ( ) s (        pvm_initsend\(PvmDataDefault\);) s nl
bl ( ) s (        pvm_pkint  \(\(int*\)&\(p->Pole\),    1, 1\);) s nl
bl ( ) s (        pvm_pkfloat\(&\(p->R\),     1, 1\);) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagResolution\), 1, 1\);) s nl
bl ( ) s (        pvm_pkfloat\(&\(p->Resolution\),     1, 1\);) s nl
bl ( ) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagCTF\), 1, 1\);) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagllCTF\), 1, 1\);) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagLLTable\), 1, 1\);) s nl
bl ( ) s (        msgtag = 0; info = pvm_send\(tid, msgtag\);) s nl
bl ( ) s nl

endpage
%%Page: 3 3
5 startpage
bl ( ) s (        if\(info<0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataParamToFitSendByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s nl
bl ( ) s (        DEBUGPRINT3\("lllDataParamToFitRecieveByPVM: flag d CTF. %d llCTF. %d LLTable ) s nl
bl ( ) s (%d\\n", p->flagCTF, p->flagllCTF, p->flagLLTable\);) s nl
bl ( ) s (        if\(p->flagCTF\) {) s nl
bl ( ) s (                ctfInfoSendByPVM\(&\(p->CTF\), tid, 0\);) s nl
bl ( ) s nl
bl ( ) s (                pvm_initsend\(PvmDataDefault\);) s nl
bl ( ) s (                pvm_pkint  \(&\(p->ctfCompensationMode\), 1, 1\);) s nl
bl ( ) s (                pvm_pkfloat\(&\(p->ctfCutOff\), 1, 1\);) s nl
bl ( ) s (                msgtag = 0; info = pvm_send\(tid, msgtag\);) s nl
bl ( ) s (                if\(info<0\) {) s nl
bl ( ) s (                        pvm_perror\("lllDataParamToFitSendByPVM"\);) s nl
bl ( ) s (                }) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (        if\(p->flagllCTF\) {) s nl
bl ( ) s (                llDataSendByPVM\(&\(p->llCTF\), tid, 0\);) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (        if\(p->flagLLTable\) {) s nl
bl ( ) s (                pvm_initsend\(PvmDataDefault\);) s nl
bl ( ) s (                pvm_pkint\(p->llTable, p->flagLLTable, 1\);) s nl
bl ( ) s (                msgtag = 0; info = pvm_send\(tid, msgtag\);) s nl
bl ( ) s (                if\(info<0\) {) s nl
bl ( ) s (                        pvm_perror\("lllDataParamToFitSendByPVM"\);) s nl
bl ( ) s (                }) s nl
bl ( ) s (        }) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataParamToFitSendByPVM2\(llDataParamToFit* p, int tid, int mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int info;) s nl
bl ( ) s (        int nitem;) s nl
bl ( ) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->Omega\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->x\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->z\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->r\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionSendByPVM\(&\(p->phi\), tid, mode\);) s nl
bl ( ) s (        ) s nl
bl ( ) s (        pvm_initsend\(PvmDataDefault\);) s nl
bl ( ) s (        pvm_pkint  \(\(int*\)&\(p->Pole\),    1, 1\);) s nl
bl ( ) s (        pvm_pkfloat\(&\(p->R\),     1, 1\);) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagResolution\), 1, 1\);) s nl
bl ( ) s (        pvm_pkfloat\(&\(p->Resolution\),     1, 1\);) s nl
bl ( ) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagCTF\), 1, 1\);) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagllCTF\), 1, 1\);) s nl
bl ( ) s (        pvm_pkint  \(&\(p->flagLLTable\), 1, 1\);) s nl
bl ( ) s (        msgtag = 0; info = pvm_send\(tid, msgtag\);) s nl
bl ( ) s nl
bl ( ) s (        if\(info<0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataParamToFitSendByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataParamToFitRecieveByPVM\(llDataParamToFit* p, int tid, int mode\)) s nl
bl ( ) s ({) s nl

endpage
6 startpage
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int nitem;) s nl
bl ( ) s (        int flagCTF;) s nl
bl ( ) s (        int flagllCTF;) s nl
bl ( ) s (        int flagLLTable;) s nl
bl ( ) s (        ) s nl
bl ( ) s (        flagCTF = p->flagCTF;) s nl
bl ( ) s (        flagllCTF =  p->flagllCTF;) s nl
bl ( ) s (        flagLLTable =  p->flagLLTable;) s nl
bl ( ) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->Omega\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->x\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->z\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->r\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->phi\), tid, mode\);) s nl
bl ( ) s (        ) s nl
bl ( ) s (        msgtag = 0; pvm_recv\(tid, msgtag\);) s nl
bl ( ) s (        pvm_upkint  \(\(int*\)&\(p->Pole\),  1, 1\);) s nl
bl ( ) s (        pvm_upkfloat\(&\(p->R\),     1, 1\);) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagResolution\), 1, 1\);) s nl
bl ( ) s (        pvm_upkfloat\(&\(p->Resolution\),     1, 1\);) s nl
bl ( ) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagCTF\), 1, 1\);) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagllCTF\), 1, 1\);) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagLLTable\), 1, 1\);) s nl
bl ( ) s nl
bl ( ) s (        DEBUGPRINT4\("lllDataParamToFitRecieveByPVM: phi %f %f %f %f\\n", p->phi.Min, p) s nl
bl ( ) s (->phi.Max, p->phi.Delta, p->phi.Value\);) s nl
bl ( ) s (        DEBUGPRINT4\("lllDataParamToFitRecieveByPVM: z   %f %f %f %f\\n", p->z.Min, p->) s nl
bl ( ) s (z.Max, p->z.Delta, p->z.Value\);) s nl
bl ( ) s (        DEBUGPRINT3\("lllDataParamToFitRecieveByPVM: flag d CTF. %d llCTF. %d LLTable ) s nl
bl ( ) s (%d\\n", p->flagCTF, p->flagllCTF, p->flagLLTable\);) s nl
bl ( ) s (        if\(p->flagCTF\) {) s nl
bl ( ) s (                if\(flagCTF==0 && mode==0\) {) s nl
bl ( ) s (                        ctfInfoRecieveByPVM\(&\(p->CTF\), tid, 0\);) s nl
bl ( ) s (                } else {) s nl
bl ( ) s (                        ctfInfoRecieveByPVM\(&\(p->CTF\), tid, 1\);) s nl
bl ( ) s (                }) s nl
bl ( ) s (                msgtag = 0; pvm_recv\(tid, msgtag\);) s nl
bl ( ) s (                pvm_upkint  \(&\(p->ctfCompensationMode\), 1, 1\);) s nl
bl ( ) s (                pvm_upkfloat\(&\(p->ctfCutOff\), 1, 1\);) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (        if\(p->flagllCTF\) {) s nl
bl ( ) s (                if\(flagllCTF==0 && mode==0\) {) s nl
bl ( ) s (                        llDataRecieveByPVM\(&\(p->llCTF\), tid, 0\);) s nl
bl ( ) s (                } else {) s nl
bl ( ) s (                        llDataRecieveByPVM\(&\(p->llCTF\), tid, 1\);) s nl
bl ( ) s (                }) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (        if\(p->flagLLTable\) {) s nl
bl ( ) s (                if\(flagLLTable==0 && mode==0\) {) s nl
bl ( ) s (                        p->llTable = \(llDataParaTypeInteger*\)memoryAllocate\(sizeof\(ll) s nl
bl ( ) s (DataParaTypeInteger\)*p->flagLLTable, ""\);) s nl
bl ( ) s (                }) s nl
bl ( ) s (                msgtag = 0; pvm_recv\(tid, msgtag\);) s nl
bl ( ) s (                pvm_upkint\(p->llTable, p->flagLLTable, 1\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataParamToFitRecieveByPVM2\(llDataParamToFit* p, int tid, int mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int nitem;) s nl

endpage
%%Page: 4 4
7 startpage
bl ( ) s (        int flagCTF;) s nl
bl ( ) s (        int flagllCTF;) s nl
bl ( ) s (        int flagLLTable;) s nl
bl ( ) s (        ) s nl
bl ( ) s (        flagCTF = p->flagCTF;) s nl
bl ( ) s (        flagllCTF =  p->flagllCTF;) s nl
bl ( ) s (        flagLLTable =  p->flagLLTable;) s nl
bl ( ) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->Omega\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->x\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->z\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->r\), tid, mode\);) s nl
bl ( ) s (        lllDataParaTypeRegionRecieveByPVM\(&\(p->phi\), tid, mode\);) s nl
bl ( ) s (        ) s nl
bl ( ) s (        msgtag = 0; pvm_recv\(tid, msgtag\);) s nl
bl ( ) s (        pvm_upkint  \(\(int*\)&\(p->Pole\),  1, 1\);) s nl
bl ( ) s (        pvm_upkfloat\(&\(p->R\),     1, 1\);) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagResolution\), 1, 1\);) s nl
bl ( ) s (        pvm_upkfloat\(&\(p->Resolution\),     1, 1\);) s nl
bl ( ) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagCTF\), 1, 1\);) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagllCTF\), 1, 1\);) s nl
bl ( ) s (        pvm_upkint  \(&\(p->flagLLTable\), 1, 1\);) s nl
bl ( ) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataParaTypeRegionSendByPVM\(llDataParaTypeRegion* r, int tid, int mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int info;) s nl
bl ( ) s nl
bl ( ) s (        pvm_initsend\(PvmDataDefault\);) s nl
bl ( ) s (        pvm_pkfloat\(&\(r->Min\), 1, 1\);) s nl
bl ( ) s (        pvm_pkfloat\(&\(r->Max\), 1, 1\);) s nl
bl ( ) s (        pvm_pkfloat\(&\(r->Delta\), 1, 1\);) s nl
bl ( ) s (        pvm_pkfloat\(&\(r->Value\), 1, 1\);) s nl
bl ( ) s nl
bl ( ) s (        msgtag = 0; info = pvm_send\(tid, msgtag\);) s nl
bl ( ) s (        if\(info<0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataParaTypeRegionSendByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (void) s nl
bl ( ) s (lllDataParaTypeRegionRecieveByPVM\(llDataParaTypeRegion* r, int tid, int mode\)) s nl
bl ( ) s ({) s nl
bl ( ) s (        int msgtag;) s nl
bl ( ) s (        int info;) s nl
bl ( ) s (        int bufid;) s nl
bl ( ) s (        int bytes;) s nl
bl ( ) s (        int tids;) s nl
bl ( ) s (        ) s nl
bl ( ) s (        DEBUGPRINT\("lllDataParaTypeRegionRecieveByPVM Start\\n"\);) s nl
bl ( ) s (        msgtag = 0; ) s nl
bl ( ) s (        /*) s nl
bl ( ) s (        bufid = 0; ) s nl
bl ( ) s (        while\(bufid <= 0\) {) s nl
bl ( ) s (                bufid = pvm_probe\(tid, msgtag\);) s nl
bl ( ) s (                if\(0<bufid\) {) s nl
bl ( ) s (                        break;) s nl
bl ( ) s (                } else if\(bufid<0\) {) s nl
bl ( ) s (                        pvm_perror\("lllDataParaTypeRegionRecieveByPVM"\);) s nl
bl ( ) s (                        exit\(EXIT_FAILURE\);) s nl
bl ( ) s (                } ) s nl
bl ( ) s (        }) s nl

endpage
8 startpage
bl ( ) s (        */) s nl
bl ( ) s (        bufid = pvm_recv\(tid, msgtag\);) s nl
bl ( ) s (        if\(bufid < 0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataParaTypeRegionRecieveByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (        info = pvm_bufinfo\(bufid, &bytes, &msgtag, &tids\);) s nl
bl ( ) s (        if\(info<0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataParaTypeRegionRecieveByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (        DEBUGPRINT4\("bufinfo: %d %d %d %d\\n", bufid, bytes, msgtag, tids\);) s nl
bl ( ) s (        ) s nl
bl ( ) s (        info = pvm_upkfloat\(&\(r->Min\), 1, 1\);) s nl
bl ( ) s (        if\(info < 0\) {) s nl
bl ( ) s (                DEBUGPRINT\("lllDataParaTypeRegionRecieveByPVM: Error"\);) s nl
bl ( ) s (                pvm_perror\("lllDataParaTypeRegionRecieveByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (        info = pvm_upkfloat\(&\(r->Max\), 1, 1\);) s nl
bl ( ) s (        if\(info < 0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataParaTypeRegionRecieveByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (        info = pvm_upkfloat\(&\(r->Delta\), 1, 1\);) s nl
bl ( ) s (        if\(info < 0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataParaTypeRegionRecieveByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s nl
bl ( ) s (        info = pvm_upkfloat\(&\(r->Value\), 1, 1\);) s nl
bl ( ) s (        if\(info < 0\) {) s nl
bl ( ) s (                pvm_perror\("lllDataParaTypeRegionRecieveByPVM"\);) s nl
bl ( ) s (        }) s nl
bl ( ) s (}) s nl
bl ( ) s nl
bl ( ) s (#endif) s nl
bl ( ) s nl

endpage

%%Trailer
cleanup
docsave restore end
