

void
lctfDetermineUsage(FILE* fpt)
{
	fprintf(stderr, ">>> Mode <<< \n");
	fprintf(stderr, "	  0 : MinMax Methods (Henderson-like CTF determination) \n");
	fprintf(stderr, "	  16: Fitting Methods \n");
	fprintf(stderr, "	  32: Differential Methods \n");
	fprintf(stderr, "	  64: Covariance Methods \n");
	fprintf(stderr, "	  96: Differential & covariance  Methods \n");
	fprintf(stderr, "	 128: MinSquare Methods \n");
	fprintf(stderr, "	 160: Differential+MinSquare Methods by Imamura \n");
	fprintf(stderr, "	 161: Differential+MinSquare Methods+NoiseRemoval(+1) \n");
	fprintf(stderr, "	 163: Differential+MinSquare Methods+NoiseRemoval(+1)+EnvelopeFromLocalMaxima(+2) \n");
	fprintf(stderr, "\n");
}

lctfDetermine()
{
	switch(info.mode&0x000000F0) {
		case 0: {
			lctfDeterminationbyMinMaxMethods(&result, &mrc, &initial, 0x0000000F&info.mode);
			result.defocus2D[0] = result.defocus2D[1] = result.defocus;
			result.defocus0axis = 0;
			ctfInfoWrite(info.fptOut, result, "", 0);
			break;
		}
		case 16: {
			fprintf(stdout, "Fitting Start!!!");
			lctfDeterminationbyFittingMethods(&result, &var, &mrc, &initial, 0x0000000F&info.mode);
			result.defocus2D[0] = result.defocus2D[1] = result.defocus;
			result.defocus0axis = 0;
			ctfInfoWrite(info.fptOut, result, "", 0);
			ctfInfoWrite(info.fptOut, var,    "d", 0);
			break;
		}
		case 32 : {
			lctfDeterminationbyDifferentialMethods(&result, &mrc, &initial,&ThonRing, 0x0000000F&info.mode);
			result.defocus2D[0] = result.defocus2D[1] = result.defocus;
			result.defocus0axis = 0;
			ctfInfoWrite(info.fptOut, result, "", 0);
			break;
		}

		case 64 : {
			lctfDeterminationbyCovarianceMethods(&result, &mrc, &initial, &ThonRing,0x0000000F&info.mode);
			result.defocus2D[0] = result.defocus2D[1] = result.defocus;
			result.defocus0axis = 0;
			ctfInfoWrite(info.fptOut, result, "", 0);
			break;
		}

		case 96 : {
			lctfDeterminationbyMixMethods(&result, &mrc, &initial, &ThonRing,0x0000000F&info.mode);
			result.defocus2D[0] = result.defocus2D[1] = result.defocus;
			result.defocus0axis = 0;
			ctfInfoWrite(info.fptOut, result, "", 0);
			break;
		}
		case 128 : {
			lctfDeterminationbyMinSquareMethods(&result, &mrc, &initial, &ThonRing,&linfo,defocus,E,0x0000000F&info.mode);
			result.defocus2D[0] = result.defocus2D[1] = result.defocus;
			result.defocus0axis = 0;
			ctfInfoWrite(info.fptOut, result, "", 0);
			break;
		}
		case 160:{ /*with MinsquareMethod*/
			switch(0x000000F&info.mode) {
				case 0: {
					lctfDeterminationbyMinSquareMethods(&result, &mrc, &initial, &ThonRing,&linfo,defocus,E,0x0000000F&info.mode);
					lctfDeterminationByTangent(&result, &mrc, &initial,&linfo,defocus,E, 0x0000000F&info.mode);
					break;
				}
				case 1: {
					lctfDeterminationbyMinSquareMethods(&result, &mrc, &initial, &ThonRing,&linfo,defocus,E,0x0000000F&info.mode);
					lctfDeterminationByTangent(&result, &mrc, &initial,&linfo,defocus,E, 0x0000000F&info.mode);
					break;
				}
				case 3: {	
					lctfDeterminationbyMinSquareMethods(&result, &mrc, &initial, &ThonRing,&linfo,defocus,E,0x0000000F&info.mode);
					EnvelopeDetermine(&result, &mrc, &initial,&linfo,defocus,E, 0x0000000F&info.mode);
					break;
				}
				case 7: {
					lctfDeterminationbyMinSquareMethodsWithAcomp(&result, &mrc, &initial, &ThonRing,&linfo,defocus,E,0);
					break;
				}
				default: {
					fprintf(stderr, "Not supported Mode\n");
					break;
				}
			}
			result.defocus2D[0] = result.defocus2D[1] = result.defocus;
			result.defocus0axis = 0;
			ctfInfoWrite(info.fptOut, result, "", 0);
			ctfInfoWrite2(info.fptOut, linfo, "");
			break;
		}
		case 176 :{
			lastigmatismDetectionInfo llinfo;
			mrcSection          =  MemoryAllocate(mrcImage,info.section,"in ctfDetermine");
			defocusOfSection    =  MemoryAllocate(double,info.section,"in ctfDetermine");
			for(i = 0 ; i < info.section ; i++){
				mrcFileRead(&mrc, info.In, "in main", 0);
				info2ctfInfo(&initial, info, 0);
				mrcSection[i] = mrc;
				lmrcFSInfoScatteringAngularDistributionAverageSection(&mrcSection[i],(i-0.5)*180.0/info.section,(i+0.5)*180.0/info.section);

				lctfDeterminationbyMinSquareMethods(&result, &mrc, &initial, &ThonRing,&linfo,defocus,E,0x0000000F&info.mode);

				defocusOfSection[i] = lctfDeterminationByTangent(&result, &mrc, &initial,&linfo,defocus,E, /*0x0000000F&info.mode*/2);
				fprintf(stdout,"defocus = %lf\n",defocusOfSection[i]);
			}
			llinfo.defocus     = defocusOfSection;
			llinfo.sectionSize = info.section; 
			lastigmatismDetection(&result, llinfo, 0);
			ctfInfoWrite(info.fptOut, result, "", 0);
			//mrcFileWrite(&mrcSection[2], "test.mrc", "in main", 0);
			break;
		}
		default: {
			fprintf(stderr, "Not supported Mode\n");
			break;
		}
	}
	return 0;
}

