package require vtk
package require vtkinteraction
package require vtktesting

proc bye { } {
    vtkCommand DeleteAllObjects
    exit
}

proc windowLayoutSet { } {
	puts "windowLayoutSet"

	puts "mainManu"

	set f [ frame .mainMenu ] 

	puts "menuButton"
	menubutton $f.file -text "File" -underline 0 -menu $f.file.m
	menubutton $f.windowmode -text "WindowMode" -underline 0 -menu $f.windowmode.m
	menubutton $f.cameramode -text "CameraMode" -underline 0 -menu $f.cameramode.m
    menubutton $f.switch -text "TJSwitch" -underline 0 -menu $f.switch.m

	puts "File"
	set m [ menu $f.file.m ]
	$m add command -label "Open" -command {
	    renWin Render
	}
    $m add command -label "CameraChanger" -command {
  	  	toplevel .cam
    }
    $m add command -label "Reset" -command {
       istereo OnButtonFromWindow "Reset"
    }
	$m add command -label "Quit" -command {
	   vtkCommand DeleteAllObjects
	   exit
	}

    puts "WindowMode"
    set m [ menu $f.windowmode.m ]
    $m add command -label "Nomal" -command {
       istereo OnButtonFromWindow "NomalMode"
    }
    $m add command -label "CrossEye" -command {
       istereo OnButtonFromWindow "CrossMode" 
    }
    $m add command -label "ParallelEye" -command {
       istereo OnButtonFromWindow "ParallelMode"
    }

	puts "CameraMode"
	set m [ menu $f.cameramode.m ]
	$m add command -label "Rotate" -command {
	    #iren SetRenderWindow renWin
	    #iren AddObserver UserEvent {wm deiconify .vtkInteract}
	    #iren Initialize
	    #iren Start
        istereo OnButtonFromWindow "RotateMode"
	}
	
	$m add command -label "Spin" -command {
	    #iren Disable
	    #iren SetInteractorStyle vtkInteractorStyleTrackball
		#iren Enable
      istereo OnButtonFromWindow "SpinMode"
	}

    $m add command -label "Pan" -command {
      istereo OnButtonFromWindow "PanMode"
    }

    $m add command -label "Dolly" -command {
      istereo OnButtonFromWindow "DollyMode"
    }

    set m [ menu $f.switch.m ]
    $m add command -label "Trackball" -command {
      istereo OnButtonFromWindow "Trackball"
      puts "Trackball"
    }
    $m add command -label "JoyStick" -command {
      istereo OnButtonFromWindow "JoyStick"
      puts "JoyStick"
    }

	puts "pack"
	pack .mainMenu.file .mainMenu.windowmode .mainMenu.cameramode .mainMenu.switch -side left 

    set f [ frame .params ]
	button $f.quit -text Quit -command bye
    button $f.reset -text Reset -command {
      istereo OnButtonFromWindow "Reset"
	}
    button $f.rotate -text Rotate -command {
      istereo OnButtonFromWindow "RotateMode"
    }

	pack $f.quit -side left
	pack $f.reset -side left
    pack $f.rotate -side right

	puts "Button Success" 
}

proc CamPosition {x} {
	puts "CamPosition"
	istereo CamPosition x
	return
}

proc CylinderResolution {n} {
	cylinder SetResolution $n
}

proc setScale { } {

	frame .cylinderScale
	scale .cylinderScale.scax -from 3 -to 10 -length 200 -tickinterval 0 \
    	      -resolution 1 \
        	  -sliderlength 10 -width 8 -showvalue yes \
			  -orient horizontal -label "CylinderResolution" \
			  -command CylinderResolution -variable n 
	pack .cylinderScale.scax 
}																

proc setCameraScale { } {

	set f [frame .camScale]
	
    scale $f.scaCamx -from -100 -to 100 -length 200 -tickinterval 0 \
              -resolution 3 \
              -sliderlength 10 -width 8 -showvalue yes \
              -orient horizontal -label "CameraPosition x" \
              -variable x 

    scale $f.scaCamy -from -100 -to 100 -length 200 -tickinterval 0 \
              -resolution 3 \
              -sliderlength 10 -width 8 -showvalue yes \
              -orient horizontal -label "CameraPosition y" \
              -variable y

    scale $f.scaCamz -from -100 -to 100 -length 200 -tickinterval 0 \
              -resolution 3 \
              -sliderlength 10 -width 8 -showvalue yes \
              -orient horizontal -label "CameraPosition z" \
              -variable z

	button $f.set -text CameraSet -command {
		istereo CameraMove x y z
	}			  

    pack .camScale.scaCamx .camScale.scaCamy .camScale.scaCamz .camScale.set -side top
}                  


#-------------------------------------

proc cylinderSet { } {
	set n 8
    vtkCylinderSource cylinder
     cylinder SetResolution $n 
    
    vtkPolyDataMapper cylinderMapper
     cylinderMapper SetInput [cylinder GetOutput]
    vtkActor cylinderActor
     cylinderActor SetMapper cylinderMapper

	ren AddActor cylinderActor
	renRight AddActor cylinderActor
	renLeft  AddActor cylinderActor

    #eval [cylinderActor GetProperty] SetColor $tomato
     cylinderActor RotateX  30.0
     cylinderActor RotateY -45.0
     cylinderActor SetPosition 0.0 0.0 0.0
}

proc contourSet { } {
    puts "before vtkmrcImageReader"
    vtkmrcImageReader aVol
    puts "after vtkmrcImageReader"
    aVol SetFilename "./test.mrc"
    aVol SetDataType 0
    aVol SetDataHow  0
    aVol Update

    puts "Contour"
    vtkContourFilter cf
    cf SetInput [ aVol GetOutput ]
    cf SetValue 0 0
    cf ComputeScalarsOff
    cf ReleaseDataFlagOn

    vtkPolyDataMapper volMap
    volMap SetInput [ cf GetOutput ]
    volMap ImmediateModeRenderingOn

    vtkActor volActor
    volActor SetMapper volMap
    eval [ volActor GetProperty ] SetDiffuseColor 1.0 1.0 1.0
    eval [ volActor GetProperty ] SetColor        1.0 1.0 1.0
    eval [ volActor GetProperty ] SetSpecular     0.5
    eval [ volActor GetProperty ] SetDiffuse      0.4
    eval [ volActor GetProperty ] SetInterpolation 1

    ren AddActor volActor
    renRight AddActor volActor
    renLeft  AddActor volActor
}
	wm title . MainWindow
	wm protocol . WM_DELETE_WINDOW bye 


    vtkCamera cam
	 #cam SetFocalPoint 165 165 100
	 #cam SetPosition 1650 1650 -100
	 #cam SetEyeAngle 3.0
	 cam SetFocalPoint 0 0 0
	 cam SetPosition   0 0 100 
	 cam ParallelProjectionOn
	 set x 0
	 set y 0
	 set z 100

    vtkCamera camRight
     #camRight SetFocalPoint 165 165 100 
     #camRight SetPosition 1650 1650 -100
     #camRight SetEyeAngle 3.0
     camRight SetFocalPoint 0 0 0
     camRight SetPosition   0 0 100 
     camRight ParallelProjectionOn

    vtkCamera camLeft
     #camLeft SetFocalPoint 165 165 100 
     #camLeft SetPosition 1650 1650 -100
     #camLeft SetEyeAngle 3.0
     camLeft SetFocalPoint 0 0 0
     camLeft SetPosition   0 0 100 
     camLeft ParallelProjectionOn

	#vtkLight light
	# light SetFocalPoint 0.21406 1.5 0
	# light SetLightType 1 

#volActor SetPosition 0 0 0
#puts "volActor	xyz=[volActor GetPosition]"

	#eosStereoRenderer sRen

    vtkRenderer ren
     ren SetActiveCamera cam
     #ren AddLight light

    vtkRenderer renRight
     renRight SetActiveCamera camLeft
     #renRight AddLight light
	 renRight SetViewport 0.0 0.0 0.5 1.0

    vtkRenderer renLeft
     renLeft SetActiveCamera camRight
     #renLeft AddLight light
	 renLeft SetViewport 0.5 0.0 1.0 1.0

	vtkLightKit lightKit
	 lightKit AddLightsToRenderer ren
	vtkLightKit lightKitRight
	 lightKitRight AddLightsToRenderer renLeft
	 lightKitRight SetKeyLightAzimuth 3.5
	vtkLightKit lightKitLeft
	 lightKitLeft AddLightsToRenderer renRight
	 lightKitLeft SetKeyLightAzimuth -3.5
	cylinderSet
	#contourSet	
 
    vtkRenderWindow renWin
    renWin AddRenderer ren
	renWin SetFullScreen 1 
	renWin FullScreenOn
    set vtkw [ vtkTkRenderWidget .ren -width 400 -height 400 -rw renWin ]
	::vtk::bind_tk_render_widget $vtkw

    eosInteractorStyleStereo istereo
    istereo SetTclWindowInterp

    vtkRenderWindowInteractor iren 
    iren SetRenderWindow renWin
	iren SetDesiredUpdateRate .00001
	iren AddObserver UserEvent {wm deiconify .vtkInteract}
    iren SetInteractorStyle istereo
	iren Initialize
	iren Enable

    istereo SetRenderer ren renRight renLeft

	puts "Initialized: [ iren GetInitialized ]"
	puts "Enabled: [ iren GetEnabled ]"
	puts "istereo Success"

    #ren SetBackground 0.1 0.2 0.4
	windowLayoutSet
puts "finish windowLayoutSet"
	setCameraScale
puts "finish setCameraScale"
	#cylinder SetResolution $n
puts "finish"

	pack   .mainMenu $vtkw .params .camScale -side top -fill both -expand yes

    [ren GetActiveCamera] Zoom 1 
	$vtkw Render
	tkwait window .

