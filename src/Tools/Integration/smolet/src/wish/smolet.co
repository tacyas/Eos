#!../I686LINUX/smolet
set PlaneActor(current) 	0 
set PlaneActor(range) 	    0	
set angle               	1	
set PlaneActor(deltaZ)      0.2

set FileList(tif) FileList2

proc readBoxFileList { } {
	global FileList
	global Box 

	set i 1
	if [catch {open FileList2 r} file1] {
		puts stderr "Cannot open FileList : $file1 "
	} else {
		while {[gets $file1 line] >= 0} {
			regsub {([^\.]*)\.tif} $line {\1.box}  name
			puts "$line -> $name"

			if [ catch {open [ subst $name]  r } file2 ] {
				puts stderr "Cannot open FlieList : $file2 "
			} else {
				set j 1
				while {[gets $file2 line2 ] >= 0} {
					scan $line2 {%d %d %d %d %d} Box($i,$j,start,x) Box($i,$j,start,y) Box($i,$j,size,x) Box($i,$j,size,y) Box($i,$j,size,unc) 
					puts "$Box($i,$j,start,x) $Box($i,$j,start,y)"
					set Box($i,num) $j
					incr j
				}
			}
			set Box(num) $i
			incr i
		}
	}		
}

proc createBoxActor { } {
	global Box
	global PlaneActor

	for { set i 1 } { $i <= $Box(num) } { incr i } {
		puts "$i box number $Box($i,num)"
		for { set j 1 } { $j <= $Box($i,num) } { incr j } {
			puts "$i,$j"
			vtkPoints quadPoints($i,$j) 
			quadPoints($i,$j) SetNumberOfPoints 4
			quadPoints($i,$j) InsertPoint 0 $Box($i,$j,start,x) \
											 $Box($i,$j,start,y) \
											 [expr $i*$PlaneActor(deltaZ)]  
			quadPoints($i,$j) InsertPoint 1 $Box($i,$j,start,x) \
			                                 [expr $Box($i,$j,start,y) + $Box($i,$j,size,y) ] \
											 [expr $i*$PlaneActor(deltaZ)]  
			quadPoints($i,$j) InsertPoint 2 [expr $Box($i,$j,start,x) + $Box($i,$j,size,x) ] \
			                                 [expr $Box($i,$j,start,y) + $Box($i,$j,size,y) ] \
											 [expr $i*$PlaneActor(deltaZ)]  
			quadPoints($i,$j) InsertPoint 3 [expr $Box($i,$j,start,x) + $Box($i,$j,size,x) ] \
			                                 $Box($i,$j,start,y) \
											 [expr $i*$PlaneActor(deltaZ)]  

			vtkDataSetMapper quadMapper($i,$j)
			quadMapper($i,$j) SetInput $quadPoints([subst $i],[subst $j])
			vtkActor Box($i,$j,Actor)
			Box($i,$j,Actor) SetMapper $quadMapper([sbust $i],[subst $j])	
		}
	}

}

proc actorCreate { } { 
	global PlaneActor

	#puts "actorCreate Start" ; flush stdout	
	set i 1
	if [catch {open FileList2 r} file1] {
		puts stderr "Cannot open FileList: $file1"
	} else {
		while {[gets $file1 line] >= 0} {

			vtkTIFFReader tmpImage$i; set ImageIn($i) tmpImage$i 
			$ImageIn($i) SetFileName $line

			vtkTexture tmpTexture$i; set Texture($i) tmpTexture$i
			$Texture($i) SetInput [$ImageIn($i) GetOutput]
			$Texture($i) InterpolateOn
	
			vtkPlaneSource tmpPlane$i ; set Plane($i) tmpPlane$i
	
			vtkPolyDataMapper tmpPlaneMapper$i; set PlaneMapper($i) tmpPlaneMapper$i
			$PlaneMapper($i) SetInput [ $Plane($i) GetOutput]
	
 			vtkActor tmpPlaneActor$i; set PlaneActor($i) tmpPlaneActor$i
			$PlaneActor($i) SetMapper $PlaneMapper($i)
			$PlaneActor($i) SetTexture $Texture($i)
			$PlaneActor($i) SetPosition 0 0 [expr $i*0.2]
	
			#vtkImageActor Actor$i
			#Actor$i SetInput [ImageIn$i GetOutput]
			#Actor$i SetZSlice $j
			#ren1 AddActor Actor$i
			incr i
		}
	}	

	set PlaneActor(number) $i 
	close $file1

	#puts "actorCreate End"; flush stdout
}

proc actorSelect {angle} {
	global PlaneActor 

	#puts "Start actorSelect : $angle"; flush stdout

	#for { set a 1 } { $a <= $PlaneActor(number) } {incr a } {
	#	catch { ren1 AddActor $PlaneActor($a) }
	#}
	set min [expr $PlaneActor(current)-$PlaneActor(range)] ; if {$min <= 0 } { set min 1 }
	set max [expr $PlaneActor(current)+$PlaneActor(range)] ; if {$PlaneActor(number) < $max } { set max $PlaneActor(number)  } 

	set minn [expr $angle-$PlaneActor(range)] ; if {$min <= 0 } { set min 1 }
	set maxn [expr $angle+$PlaneActor(range)] ; if {$PlaneActor(number) < $max } { set max $PlaneActor(number)  } 

	if { $minn < $min } {
		for {set a $max } {$maxn <  $a && $min<= $a } {incr a -1 } {
			puts "remove $a"
			catch { ren1 RemoveActor $PlaneActor($a) }
		}
		for { set j $minn } {$j < $min && $j <= $maxn } { incr j } {
			puts "add $j"
			catch { ren1 AddActor $PlaneActor($j) }
		}
	} else {
		for {set a $min } {$a < $minn && $a <= $max } {incr a} {
			puts "remove $a" 	
			catch { ren1 RemoveActor $PlaneActor($a) }
		}
		for { set j $maxn } {$max < $j && $minn <= $j } { incr j -1 } {
			puts "add $j"
			catch { ren1 AddActor $PlaneActor($j) }
		}
	}

	set PlaneActor(current) $angle

	#ren1 ResetCameraClippingRange
	#[ren1 GetRenderWindow] Render 
	ren1 ResetCamera
	#[ren1 GetActiveCamera ] SetClippingRange -0.5 0.5 
	[ren1 GetRenderWindow] Render 
	#puts "End actorSelect "; flush stdout
}												 

#::vtk::bind_tk_render_widget $desktop(vtkw)

#message .msg -justify center -text "Hello smolet world!!"

#scale .scale -from 0 -to 121 -length 400 -variable angle -orient horizontal -label "tilt angle" -tickinterval 5 -showvalue true 
#pack .ren .scale .msg 

#wm withdraw .
proc leftButtonFunc { } {
	puts "leftButtonFunc"
}

proc desktopInit { } {
	global vtkw
	global renWin
	global PlaneActor

	vtkRenderWindow renWin
	set vtkw [ vtkTkRenderWidget .ren -width 600 -height 600 -rw renWin ]
	#::vtk::bind_tk_render_widget $vtkw

	vtkRenderer ren1
	renWin AddRenderer ren1

	vtkRenderWindowInteractor iren
	iren SetRenderWindow renWin

	ren1 SetBackground 0.5 0.5 0.5
	renWin SetSize 600 600 

	set camera1 [ ren1 GetActiveCamera]
	ren1 ResetCameraClippingRange
	renWin Render
	$camera1 SetObliqueAngles 60 90 

	vtkInteractorStyleJoystickCamera myStyle
	iren SetInteractorStyle myStyle
	myStyle SetLeftButtonPressMethod { leftButtonFunc }

	scale .scale -from 1 -to $PlaneActor(number) -length 400  \
		-variable angle -orient horizontal    \
		-label "tilt angle" -tickinterval 5   \
		-showvalue true -command { actorSelect }
	set ff [ frame .readBox ]
	button $ff.b    -text readBox                -command  { readBoxFileList ; createBoxActor}  
	entry  $ff.file -textvariable readBoxFile   
	bind   $ff.file	<Return> {readBoxFileList }
	pack $ff.b $ff.file -side left

	set ff [ frame .writeBox ]
	button $ff.b    -text writeBox               -command { writeBoxFileList } 
	entry  $ff.file -textvariable writeBoxFile   
	bind $ff.file <Return> {writeBoxFileList }  
	pack $ff.b $ff.file -side left

	pack .ren .scale .readBox .writeBox
	#pack .scale
}

actorCreate
desktopInit
actorSelect $angle

#::vtk::bind_tk_render_widget $vtkw

tkwait window .
