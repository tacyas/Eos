/*
# pdbView : $Revision$  
# $Date$ 
# Created by $Author$
# Usage : pdbView
# Attention
#   $Loccker$
#  	$State$ 
#
*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
              
#include "eosAxisSource.hh"

#define GLOBAL_DECLARATION
#include "../inc/config.h"

#define DEBUG
#include "genUtil.h"
#include "pdbFile.h"



/*
Example:
typedef struct lpdbViewInfo {
	float a;
	int   b;
} lpdbViewInfo;

typedef enum lpdbViewMode {
	a=0,
	b=1
} lpdbViewMode;
*/

int
main(int argc, char* argv[]) 
{
  eosAxisSource axisClass;
  eosAxisSource axisClass2;


	pdbViewInfo info;
	pdbFile pdb;

	init0(&info);
    argCheck(&info, argc, argv);
    init1(&info);

	DEBUGPRINT("Program Start\n");
   cout << "start C++\n";
    pdbFileRead(info.fptIn, &pdb);

    vtkRenderer *ren = vtkRenderer::New();
    vtkRenderWindow *renWindow = vtkRenderWindow::New();
    renWindow->AddRenderer(ren);
    vtkRenderWindowInteractor *iren = vtkRenderWindowInteractor::New();
    iren->SetRenderWindow(renWindow);

    axisClass.Draw(ren);

    //axisClass2.SetScale(2);
    axisClass2.SetLength(2);
    axisClass2.Draw(ren);

    //Create an actor and give it cone geometry
    vtkConeSource *cone = vtkConeSource::New();
    cone->SetResolution(30);
    cone->SetHeight(5);
    cone->SetRadius(3);
    vtkPolyDataMapper *coneMapper = vtkPolyDataMapper::New();
    coneMapper->SetInput(cone->GetOutput());
    vtkActor *coneActor = vtkActor::New();
    coneActor->SetMapper(coneMapper);
    coneActor->GetProperty()->SetColor(1.0,0.0,0.0);
    coneActor->SetPosition(0,5,0);

    //Mine Create
    vtkConeSource *cone2 = vtkConeSource::New();
    cone2->SetResolution(6);
    cone2->SetHeight(2);
    cone2->SetRadius(3);
    vtkPolyDataMapper *coneMapper2=vtkPolyDataMapper::New();
    coneMapper2->SetInput(cone2->GetOutput());
    vtkActor *coneActor2 = vtkActor::New();
    coneActor2->SetMapper(coneMapper2);
    coneActor2->GetProperty()->SetColor(0.2,0.8,0.7);

    //Cube
    vtkCubeSource *cube = vtkCubeSource::New();
    cube->SetCenter(0,0,0);
    cube->SetXLength(3);
    cube->SetYLength(3);
    cube->SetZLength(3);
    //cube->SetBounds(0.0,0.5,0.0,0.3,0.0,0.2);
    vtkPolyDataMapper *cubeMapper = vtkPolyDataMapper::New();
    cubeMapper->SetInput(cube->GetOutput());
    vtkActor *cubeActor = vtkActor::New();
    cubeActor->SetMapper(cubeMapper);
    cubeActor->GetProperty()->SetOpacity(0.5);
    cubeActor->GetProperty()->SetColor(0.4,0.4,0.7);

    //LineX
    vtkLineSource *lineX = vtkLineSource::New();
    lineX->SetPoint1(0,0,0);
    lineX->SetPoint2(5,0,0);
    vtkPolyDataMapper *lineXMapper = vtkPolyDataMapper::New();
    lineXMapper->SetInput(lineX->GetOutput());
    vtkActor *lineXActor = vtkActor::New();
    lineXActor->SetMapper(lineXMapper);
    lineXActor->GetProperty()->SetColor(1.0,0,0);


    //LineY
    vtkLineSource *lineY = vtkLineSource::New();
    lineY->SetPoint1(0,0,0);
    lineY->SetPoint2(0,5,0);
    vtkPolyDataMapper *lineYMapper = vtkPolyDataMapper::New();
    lineYMapper->SetInput(lineY->GetOutput());
    vtkActor *lineYActor = vtkActor::New();
    lineYActor->SetMapper(lineYMapper);
    lineYActor->GetProperty()->SetColor(0,1.0,0);


    //LineZ
    vtkLineSource *lineZ = vtkLineSource::New();
    lineZ->SetPoint1(0,0,0);
    lineZ->SetPoint2(0,0,5);
    vtkPolyDataMapper *lineZMapper = vtkPolyDataMapper::New();
    lineZMapper->SetInput(lineZ->GetOutput());
    vtkActor *lineZActor = vtkActor::New();
    lineZActor->SetMapper(lineZMapper);
    lineZActor->GetProperty()->SetColor(0,0,1.0);

    /*

    //CylinderTEST:Z
    vtkCylinderSource *axisT = vtkCylinderSource::New();
    axisT->SetHeight(axisClass.axisLength.Z);
    axisT->SetRadius(axisClass.axisRadius.Z);
    axisT->SetCenter(0,0,0);
    axisT->SetResolution(axisClass.axisFace);
    vtkPolyDataMapper *axisTMapper = vtkPolyDataMapper::New();
    axisTMapper->SetInput(axisT->GetOutput());
    vtkActor *axisTActor = vtkActor::New();
    axisTActor->SetMapper(axisTMapper);
    
    axisTActor->GetProperty()->SetColor(axisColor.Zcolor);
    axisTActor->RotateX(90);
    axisTActor->SetPosition(0,0,axisClass.axisPosition.Z);
    //axisTActor->SetPosition(0,0,0);


    //arrowZ:TEST
    vtkConeSource *arrowT = vtkConeSource::New();
    arrowT->SetResolution(axisClass.arrowFace);

    //arrowT->SetHeight(3);
    //arrowT->SetRadius(1.5);

    arrowT->SetHeight(axisClass.arrowLength.Z);
    arrowT->SetRadius(axisClass.arrowRadius.Z);
    vtkPolyDataMapper *arrowTMapper = vtkPolyDataMapper::New();
    arrowTMapper->SetInput(arrowT->GetOutput());
    vtkActor *arrowTActor = vtkActor::New();
    arrowTActor->SetMapper(arrowTMapper);
    arrowTActor->GetProperty()->SetColor(axisColor.Zcolor);
    arrowTActor->RotateY(-90);
    arrowTActor->SetPosition(0,0,axisClass.arrowPosition.Z);

    */


    //MineDotted
    //vtkPoints *point = vtkPoints::New();
    //point->SetPoints(5,5,5);

    //assign our actor to the renderer

    //ren->AddActor(coneActor);
    //ren->AddActor(coneActor2);
    //ren->AddActor(pointActor);
    //ren->AddActor(cubeActor);
    ren->AddActor(lineXActor);
    ren->AddActor(lineYActor);
    ren->AddActor(lineZActor);
    //ren->AddActor(axisActor);
    //ren->AddActor(arrowActor);

    ren->SetBackground(0,0,0);

    ren->ResetCamera();

    renWindow->SetSize(400,400);

    //draw the resulting scene
    renWindow->Render();

    //Begin mouse interaction
    iren->Start();


    //mine
    //vtkLine *line = vtkLine::New();
    //float lineCoords[2][1];

    //line->GetPointIds()->SetId(0,0);
    //line->GetPointIds()->SetId(1,1);

    //lineCoords[0][0]=.25;
    //lineCoords[1][0]=.75;





	exit(EXIT_SUCCESS);
}

void
additionalUsage()
{
	fprintf(stderr, "----- Additional Usage -----\n");
}
