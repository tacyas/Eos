/*
# %M% %Y% %I%
# The latest update : %G% at %U%
#
#%Z% mrcImage2DProjection ver %I%
#%Z% Created by 
#%Z%
#%Z% Usage : mrcImage2DProjection
#%Z% Attention
#%Z%
*/
static char __sccs_id[] = "%Z%mrcImage2DProjection ver%I%; Date:%D% %Z%";
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>                  
#define GLOBAL_DECLARATION
#include "../inc/config.h"
#define DEBUG
#include "genUtil.h"
#include "mrcImage.h"

/* prototype */
void lmrcImage2DProjection(mrcImage* out, mrcImage* in, float theta ,float phi);

void
main(int argc, char* argv[]) 
{
	long status;
	mrcImage2DProjectionInfo info;

/* variables */
	mrcImage in;
	mrcImage out;
	
/* input patameters ,file open */
	init0(&info);
	argCheck(&info, argc, argv);
	init1(&info);

/* begin */
	mrcFileRead(&in ,info.In ,"in main" ,0);

	lmrcImage2DProjection(&out ,&in ,info.Theta ,info.Phi );

	mrcFileWrite(&out ,info.Out ,"in main" ,0);
	exit(EXIT_SUCCESS);
}

void
additionalUsage()
{
}

void lmrcImage2DProjection(mrcImage* out, mrcImage* in, float theta ,float phi)
{
/* local struct */
  struct lvector{
    double x;
    double y;
    double z;
  }

/* variables */
  int x,y,z;
  double data,sum;
  struct vector e1,e2,e3;
  
/* intialization */
  out->Header = in->Header;
  out->HeaderN.z = 1;
  mrcInit(out,NULL);

/* begin */
  for (z = 0 ;z <= in->HeaderN.z ;z++){
    for (x = 0 ;x <= in->HeaderN.x ;x++){
      sum = 0.0;
      for (y = 0 ;y <= in->HeaderN.y ;y++){
	mrcPixelDataGet(in ,x ,y ,z ,&data, mrcPixelRePart, mrcPixelHowNearest);
	sum += data ;
      }
      mrcPixelDataSet(out ,x ,z  , 0,  sum, mrcPixelRePart);
    }
  }
  mrcStatDataSet(out,0);  
}

