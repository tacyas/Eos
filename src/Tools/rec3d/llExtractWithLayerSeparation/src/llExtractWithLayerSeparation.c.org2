/*
# %M% %Y% %I%
# The latest update : %G% at %U%
#
#%Z% llExtractWithLayerSeparation ver %I%
#%Z% Created by 
#%Z%
#%Z% Usage : llDatallExtractWithLayerSeparation
#%Z% Attention
#%Z%
*/

static char __sccs_id[] = "%Z%llDataWithLayerSeparation ver%I%; Date:%D% %Z%";
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>                  
#define GLOBAL_DECLARATION
#include "../inc/config.h"

#define DEBUG
#include "genUtil.h"
#include "String.h"
#include "Memory.h"
#include "mrcImage.h"
#include "llData.h"
#include "lllExtract.h"
#include "lllDatarMaxLimit.h"
#include "lllDataLowPassFiltering.h"
#include "lllDataDifferenceCalc.h"
#include "lllDataMergeDifferentN.h"
#include "lllDataContributionCalcDifferentN.h"
#include "lllDataFitParamInverse.h"
#include "lllDataFitAndAverage.h"
#include "lllDataAxisSearch.h"
#include "lllDataRescaling.h"

typedef struct lllExtractWithLayerSeparationInfo {
	char**           In;
	lllDataRescalingInfo*  rescaleInfo;
	llDataParamToFit range;
	FILE*            fptLog;
	llData*          llSepASAvg;
	llData*          llSepDifASAvg;

	/* Layer Line Separation Information */
	FILE**           fptllInfo;
	lllExtractInfo*  leInfo;

	/* Important Layer Line Separation */
	FILE**           fptllInfoImportant;
	lllExtractInfo*  leInfoImportant;

	int              flagtruePitch;
	double           truePitch;

	int				 flagRMax;
	double           RMax;

	int				 flagrMax;
	double           rMax;

	double           RMaxFirst;
	double           RMaxStep;

	int              MaxIteration;
	double           rms;
	double           lambda;

	int 			 flagdelBR;
	double			 delBR;

	int              flagRef;
	FILE*            Ref;
} lllExtractWithLayerSeparationInfo;

extern void lllExtractWithLayerSeparationInfoSet(lllExtractWithLayerSeparationInfo* linfo, 
											      llExtractWithLayerSeparationInfo  info);
extern void lllExtractWithLayerSeparation0(
	llData* llAvg, 
	char**  In, 
	int     fileNumber, 
	lllExtractWithLayerSeparationInfo* linfo);

extern void lllExtractWithLayerSeparation1(
	llData* llAvg, 
	char**  In, 
	int     fileNumber, 
	lllExtractWithLayerSeparationInfo* linfo);

extern void lllExtractWithLayerSeparation2(
	llData* llAvg, 
	char**  In, 
	int     fileNumber, 
	lllExtractWithLayerSeparationInfo* linfo);

void
main(int argc, char* argv[]) 
{
	llData    llAvg;
	llExtractWithLayerSeparationInfo   info;
	lllExtractWithLayerSeparationInfo linfo;
	llDataParaTypeInteger mode;	
	
	int i;

	init0(&info);
    argCheck(&info, argc, argv);
    init1(&info);

	lllExtractWithLayerSeparationInfoSet(&linfo, info);
	DEBUGPRINT("Program Start\n");
	switch(info.mode) {
		case 0: {
			lllExtractWithLayerSeparation0(&llAvg, info.In, info.flagIn, &linfo);
			break;
		}
		case 1: {
			lllExtractWithLayerSeparation1(&llAvg, info.In, info.flagIn, &linfo);
			break;
		}
		case 2: {
			lllExtractWithLayerSeparation2(&llAvg, info.In, info.flagIn, &linfo);
			break;
		}
		default: {
			fprintf(stderr, "Not supported mode: %ld\n", info.mode);
			exit(EXIT_FAILURE);
		}
	}
	/* Output */
	llDataFileWrite(info.fptOut, &llAvg, &mode);

	if(info.flagOut2) {
		for(i=0; i<info.flagOut2; i++) {
			llDataFileWrite(info.fptOut2[i], &(linfo.llSepASAvg[i]), &mode);
		}	
	}
	if(info.flagOut3) {
		for(i=0; i<info.flagOut3; i++) {
			llDataFileWrite(info.fptOut3[i], &(linfo.llSepDifASAvg[i]), &mode);
		}	

	}

	exit(EXIT_SUCCESS);
}

void
additionalUsage()
{
	fprintf(stderr, "----- Additional Usage -----\n");
	fprintf(stderr, "-m 0: The 1st version algorism\n");
	fprintf(stderr, "-m 1: The 2nd version algorism\n");
	fprintf(stderr, "-m 2: The 3rd version algorism\n");
	fprintf(stderr, ">> llDataSepartionControlFile <<\n");
	fprintf(stderr, "llMax(different)\n");
	fprintf(stderr, "nl Z numberOfN n0 n1 n2...\n");
}

void
lllExtractWithLayerSeparationInfoSet(lllExtractWithLayerSeparationInfo* linfo, 
									  llExtractWithLayerSeparationInfo  info)
{

	DEBUGPRINT("Fitting Parameter Set\n"); 
	linfo->range.Omega.Min   = 0.0;
	linfo->range.Omega.Max   = 0.0;
	linfo->range.Omega.Delta = 1.0;
	linfo->range.x.Min     = info.shiftmin;
	linfo->range.x.Max     = info.shiftmax;
	linfo->range.x.Delta   = info.delshift;
	linfo->range.z.Min     = info.zmin;
	linfo->range.z.Max     = info.zmax;
	linfo->range.z.Delta   = info.delz;
	linfo->range.phi.Min   = info.phimin*RADIAN;
	linfo->range.phi.Max   = info.phimax*RADIAN;
	linfo->range.phi.Delta = info.delphi*RADIAN;
	linfo->range.r.Min     = 1.0;
	linfo->range.r.Max     = 1.0;
	linfo->range.r.Delta   = 1.0;

	DEBUGPRINT("Information Setting\n"); 
	linfo->In        = info.In;
	linfo->fptLog    = info.fptLog;
	linfo->fptllInfo = info.fptllInfo;

	linfo->truePitch     = info.truePitch;
	linfo->flagtruePitch = info.flagtruePitch;
	linfo->RMax     = info.RMax;
	linfo->flagRMax = info.flagRMax;
	linfo->rMax     = info.rMax;
	linfo->flagrMax = info.flagrMax;
	if(info.flagRMaxFirst) {
		linfo->RMaxFirst = info.RMaxFirst;
	} else {
		linfo->RMaxFirst = info.RMax;
	}
	linfo->RMaxStep = info.RMaxStep;
	linfo->MaxIteration = info.MaxIteration;
	linfo->rms          = info.rms;
	linfo->lambda       = info.lambda;

	linfo->flagRef      = info.flagRef;
	linfo->Ref          = info.fptRef;
	
	linfo->flagdelBR = info.flagdelBR;
	linfo->delBR = info.delBR;
}

void 
lllExtractWithLayerSeparation0(
	llData* llAvg, 
	char**  In, 
	int     filNumber, 
	lllExtractWithLayerSeparationInfo* linfo)
{
	int i, l;
	long times;
	double rms, rmsFar, rmsNea, oldrms;
	FILE* fpt;

	lllDataFitAndAverageInfo lfitinfo;
	llDataFittedParam* paraFit;
	llDataParaTypeInteger mode;	
	llDataParamToFit range;

	llData    llTmpNea;
	llData    llTmpFar;
	mrcImage  mrcIn;     /* Fourier Space */
	llData*   llMixNea;  /* Mixed Layer Line */
	llData*   llMixFar;
	llData    llEstNea;  /* Estimated Layer Line */
	llData    llEstFar;
	llData*   llSepNea;  /* Separated Layer Line */
	llData*   llSepFar;
	llData    llSepWeight;  /* Separated Layer Line */
	llData*   llSepFitAvg;
	llData*   llSepDifNea;  /* Separated Layer Line */
	llData*   llSepDifFar;
	llData*   llSepASAvg;
	llData*   llSepDifASAvg;
	llData*   llDifNea;
	llData*   llDifFar;
	llData    llRef;
	llData    llNea;
	llData    llFar;

	range = linfo->range;	
	fpt   = linfo->fptLog;
	
	/* Initialization */
	linfo->leInfo = (lllExtractInfo*)memoryAllocate(sizeof(lllExtractInfo)*filNumber, "in main");
	linfo->rescaleInfo = (lllDataRescalingInfo*)memoryAllocate(sizeof(lllDataRescalingInfo)*filNumber, "in main");
	paraFit = (llDataFittedParam*)memoryAllocate(sizeof(llDataFittedParam)*filNumber, "in main");
	llMixNea  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	llMixFar  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");

	for(i=0; i<filNumber; i++) {
		/* Mixed Layer Line Extract */
		mrcFileRead(&mrcIn, In[i], "main routein", 0);

		lllDataSeparationInfoRead(&(linfo->leInfo[i]), &mrcIn, linfo->fptllInfo[i]);
		if(linfo->flagtruePitch) {
			linfo->leInfo[i].truePitch = linfo->truePitch;
		}
		if(linfo->flagrMax) {
			linfo->leInfo[i].rMax      = linfo->rMax;
		}
		if(linfo->flagRMax) {
			linfo->leInfo[i].RMax      = linfo->RMax;
		}
		linfo->leInfo[i].RMaxFirst = linfo->RMaxFirst;

		paraFit[i].Para        = range;

		/* FT Space -> Mixed G(R, n, l) Space */
		lllExtract(&llTmpNea, &llTmpFar, &mrcIn, &(linfo->leInfo[i])); 
		if(linfo->flagdelBR) {
			linfo->rescaleInfo[i].rScale = 1.0;
			linfo->rescaleInfo[i].delBR  = linfo->delBR;
			lllDataRescaling(&(llMixNea[i]), &llTmpNea, linfo->rescaleInfo[i], 0);
			lllDataRescaling(&(llMixFar[i]), &llTmpFar, linfo->rescaleInfo[i], 0);
			llDataFree(&llTmpNea);
			llDataFree(&llTmpFar);
		} else {
			llMixNea[i] = llTmpNea;
			llMixFar[i] = llTmpFar;
		}
		llMixNea[i].Weight    = llMixFar[i].Weight    = 1.0;
		
		mrcImageFree(&mrcIn, "in lllExtractWithLayerSeparation0");

		/* RMax Limitation */
		lllDataLowPassFiltering(&(llMixNea[i]), linfo->RMax, 0);
		lllDataLowPassFiltering(&(llMixFar[i]), linfo->RMax, 0);
	}

	llSepNea  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	llSepFar  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	llDifNea  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	llDifFar  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	rms = 0;
	for(i=0; i<filNumber; i++) {
		/* Layer Line Separation */
		lllExtractWithSeparation(&(llSepNea[i]), &(llMixNea[i]), &(linfo->leInfo[i]), 0); 
		lllExtractWithSeparation(&(llSepFar[i]), &(llMixFar[i]), &(linfo->leInfo[i]), 0); 

		lllDataLowPassFiltering(&(llSepNea[i]), linfo->RMaxFirst, 1);
		lllDataLowPassFiltering(&(llSepFar[i]), linfo->RMaxFirst, 1);

		/* Check of each filaments */
		llDataInitWithReference(&llEstNea, &(llMixNea[i])); 
		llDataInitWithReference(&llEstFar, &(llMixFar[i])); 

		lllDataMergeDifferentN(&llEstNea, &(llSepNea[i]), 1);
		lllDataMergeDifferentN(&llEstFar, &(llSepFar[i]), 1);

		rmsNea = lllDataDifferenceCalc(&(llDifNea[i]), &(llMixNea[i]), &llEstNea, 0);
		rmsFar = lllDataDifferenceCalc(&(llDifFar[i]), &(llMixFar[i]), &llEstFar, 0);

		llDataFree(&llEstNea);
		llDataFree(&llEstFar);
		rms = sqrt(SQR(rms) + (SQR(rmsNea) + SQR(rmsFar))/2.0); 
		DEBUGPRINT2("%d: rms %f\n", i, sqrt((SQR(rmsNea)+SQR(rmsFar))/2.0));


	}
	rms = sqrt(SQR(rms)/filNumber);
	fprintf(fpt, "The 0th Tern: %f\n", rms);
	DEBUGPRINT1("The 0th Tern: %f\n", rms);

	/* Initialization */	
	llSepDifNea  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	llSepDifFar  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	llSepDifASAvg = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	llSepASAvg  = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	for(i=0; i<filNumber; i++) {
		llDataInitWithReference2(&(llSepASAvg[i]), &(llSepNea[i]), AverageSide);
		llDataInitWithReference2(&(llSepDifASAvg[i]), &(llSepNea[i]), AverageSide);
	}
	llDataInitWithReference(&llRef, &(llSepASAvg[0]));
	llDataInitWithReference( llAvg, &(llSepASAvg[0]));
	llDataInitWithReference(&llNea, &(llSepNea[0]));
	llDataInitWithReference(&llFar, &(llSepFar[0]));
	llDataInitWithReference(&llSepWeight, &(llSepASAvg[0]));
	
	llSepFitAvg = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in main");
	for(i=0; i<filNumber; i++) {
		llDataInitWithReference(&(llSepFitAvg[i]), llAvg);
	}

	DEBUGPRINT("Iteration Start: Required llSepNea/llSepFar and llDifNea/llDifFar\n");
	times = 0;
	oldrms = rms*2;
	while(linfo->rms < fabs(oldrms-rms) && linfo->rms < rms && times < linfo->MaxIteration) {
		oldrms = rms;

		DEBUGPRINT("---- Low Pass Filtering : llSepASAvg ----\n");
		for(i=0; i<filNumber; i++) {
			lllDataLowPassFiltering(&(llSepASAvg[i]), linfo->RMaxFirst+(times+1)*linfo->RMaxStep, 1);
		}

		DEBUGPRINT("---- Estimation of Intra-parameter : llSepASAvg ----\n");
		for(i=0; i<filNumber; i++) {
			lllDataAxisSearchAndAverage(&(llSepASAvg[i]), &(llSepNea[i]), &(llSepFar[i]), &(paraFit[i]), 0);
		}
		fprintf(fpt, "%ld times: AxisSearch and Average\n", times);
		for(i=0; i<filNumber; i++) {
			fprintf(fpt, "%s : %f:= %f %f \n", 
										In[i],
										paraFit[i].QPara.R*RADIAN, 
									   	paraFit[i].Para.x.Value, 
									   	paraFit[i].Para.Omega.Value);
			DEBUGPRINT4("%s : %f:= %f %f \n", 
										In[i],
										paraFit[i].QPara.R*RADIAN, 
									   	paraFit[i].Para.x.Value, 
									   	paraFit[i].Para.Omega.Value);
		}

		DEBUGPRINT("---- Estimation of difference : llSepDifASAvg ----\n"); 
		for(i=0; i<filNumber; i++) {
			/* Initialize */
			llDataInitWithReference(&(llSepDifNea[i]), &(llSepNea[i]));
			llDataInitWithReference(&(llSepDifFar[i]), &(llSepFar[i]));
			/* Sepration */
			lllExtractWithSeparation(&(llSepDifNea[i]), &(llDifNea[i]), &(linfo->leInfo[i]), 1); 
			lllExtractWithSeparation(&(llSepDifFar[i]), &(llDifFar[i]), &(linfo->leInfo[i]), 1); 
			/* Dif-shift */ 
			lllDataAxisSearchAndAverage(&(llSepDifASAvg[i]), &(llSepDifNea[i]), &(llSepDifFar[i]), &(paraFit[i]), 1);

			lllDataLowPassFiltering(&(llSepDifASAvg[i]), linfo->RMaxFirst+(times+1)*linfo->RMaxStep, 1);
			/* Free */
			llDataFree(&(llSepDifNea[i]));
			llDataFree(&(llSepDifFar[i]));
		}

		DEBUGPRINT("----- Estimate new separated layer line: llSepASAvg -----\n");
		/*
			Estimation of new llSepNea and llSepFar 
			F(i) = F(i-1) + lambda*Dif(i-1); Dif(i-1) = Observe - F(i-1)
				If lambda = 1, Jacobi's method
				If lambda = 2, SIRT method
		*/
		for(i=0; i<filNumber; i++) {
			/* Multiply weight: lambda */
			lllDataMultiplyReal(&(llSepDifASAvg[i]), linfo->lambda);
			/* Estimate */
			lllDataAdd(&(llSepASAvg[i]), &(llSepDifASAvg[i]));
		}

		DEBUGPRINT("----- Preparation of a new reference: llRef -----\n");
		if(times==0) {
			if(linfo->flagRef) {
				llDataFileReadFollowingllData(linfo->Ref, &llRef, llAvg, &mode); 
			} else {
				DEBUGPRINT("Reference: The 0th image\n"); 
				lllDataCopy(&llRef, &(llSepASAvg[0]));
			}
			lllDataLowPassFiltering(&llRef, linfo->RMaxFirst, 1);
		} else {
			lllDataCopy(&llRef, llAvg);
			lllDataLowPassFiltering(&llRef, linfo->RMaxFirst+linfo->RMaxStep*times, 1);
		}

		DEBUGPRINT("----- Fit llSepASAvg to llRef into llSepFitAvg and average \n");
		DEBUGPRINT("      : Estimation of new inter-filament parameters -----\n");
		lfitinfo.times = times;
		lfitinfo.nFile = filNumber;
		lfitinfo.flagOutParam2  = 0; 
		lfitinfo.OutParam2  = NULL; 
		lfitinfo.In         = linfo->In;
		
		lllDataFitAndAverage(llAvg, llSepFitAvg, llSepASAvg, llRef, paraFit, lfitinfo); 
		DEBUGPRINT("Log for FitAndAverage\n");
		fprintf(fpt, "%ld times: Fit And Average\n", times);
		for(i=0; i<filNumber; i++) {
			fprintf(fpt, "%s: %f:= (%f %f %f %d)\n", 
									   In[i],
									   paraFit[i].Para.R*DEGREE, 
									   paraFit[i].Para.phi.Value*DEGREE, 
									   paraFit[i].Para.z.Value,
									   paraFit[i].Para.r.Value,
									   paraFit[i].Para.Pole);
			DEBUGPRINT6("%s: %f:= (%f %f %f %d)\n", 
									   In[i],
									   paraFit[i].Para.R*DEGREE, 
									   paraFit[i].Para.phi.Value*DEGREE, 
									   paraFit[i].Para.z.Value,
									   paraFit[i].Para.r.Value,
									   paraFit[i].Para.Pole);
		}

		DEBUGPRINT("----- Estimation of each filaments : llSepNea and llSepFar -----\n"); 
		lllDataAvgToNea(&llNea, llAvg);
		lllDataAvgToFar(&llFar, llAvg);
		lllDatarMaxLimit(&llNea, linfo->rMax, 0);
		lllDatarMaxLimit(&llFar, linfo->rMax, 0);
		for(i=0; i<filNumber; i++) {
			lllDataPhaseShiftInverse(&(llSepNea[i]), &llNea, &(paraFit[i]));  
			lllDataPhaseShiftInverse(&(llSepFar[i]), &llFar, &(paraFit[i])); 
		}

		DEBUGPRINT("----- Evaluation of each filaments : llDifNea and llDifFar -----\n");
		rms = 0;
		for(i=0; i<filNumber; i++) {
			llDataInitWithReference(&llEstNea, &(llMixNea[i])); 
			llDataInitWithReference(&llEstFar, &(llMixFar[i])); 

			lllDataMergeDifferentN(&llEstNea, &(llSepNea[i]), 1);
			lllDataMergeDifferentN(&llEstFar, &(llSepFar[i]), 1);

			rmsNea = lllDataDifferenceCalc(&(llDifNea[i]), &(llMixNea[i]), &llEstNea, 1);
			rmsFar = lllDataDifferenceCalc(&(llDifFar[i]), &(llMixFar[i]), &llEstFar, 1);

			llDataFree(&llEstNea);
			llDataFree(&llEstFar);

			rms = sqrt(SQR(rms) + (SQR(rmsNea) + SQR(rmsFar))/2.0); 
			DEBUGPRINT2( "rms: %s %f\n", In[i], sqrt((SQR(rmsNea)+SQR(rmsFar))/2.0));
			fprintf(fpt, "rms: %s %f\n", In[i], sqrt((SQR(rmsNea)+SQR(rmsFar))/2.0));
		}
		rms = sqrt(SQR(rms)/filNumber);
		DEBUGPRINT("Log for evaluation of each filament\n");
		fprintf(fpt, "%ld times: rms:= %g oldrms:=%g\n", times, rms, oldrms);

		DEBUGPRINT("----- Next Turn Please -----\n");
		fflush(fpt);
		times++;
	}

	linfo->llSepASAvg    = llSepFitAvg;
	linfo->llSepDifASAvg = llSepDifASAvg;
}


void 
lllExtractWithLayerSeparation1(
	llData* llAvg, 
	char**  In, 
	int     filNumber, 
	lllExtractWithLayerSeparationInfo* linfo)
{
	int i, times;
	mrcImage mrcIn;
	llDataParaTypeInteger mode;
	llDataFittedParam* paraFit;
	llData* llMixNea;
	llData* llMixFar;
	llData* llMixAvg;
	llData  llNea;
	llData  llFar;
	llData* llMixNeaCurrent;
	llData* llMixFarCurrent;
	llData* llMixAvgCurrent;
	llData  llSepNea;
	llData  llSepFar;
	llData* llSepAvg;
	llData  llRef;
	double  rms, oldrms;
	double  rmsNea, rmsFar;
	FILE*   fpt;

	fpt = linfo->fptLog;
	linfo->leInfo = (lllExtractInfo*)memoryAllocate(sizeof(lllExtractInfo)*filNumber, "in main");
	paraFit  = (llDataFittedParam*)memoryAllocate(sizeof(llDataFittedParam)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixNea = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixFar = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixAvg = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");

	DEBUGPRINT("Set llMixNea and llMixFar\n");
	for(i=0; i<filNumber; i++) {
		mrcFileRead(&mrcIn, In[i], "lllExtractWithLayerSepration1", 0);
		lllDataSeparationInfoRead(&(linfo->leInfo[i]), &mrcIn, linfo->fptllInfo[i]);
		if(linfo->flagtruePitch) {
			linfo->leInfo[i].truePitch = linfo->truePitch;
		}
		if(linfo->flagrMax) {
			linfo->leInfo[i].rMax      = linfo->rMax;
		}
		if(linfo->flagRMax) {
			linfo->leInfo[i].RMax      = linfo->RMax;
		}
		linfo->leInfo[i].RMaxFirst = linfo->RMaxFirst;

		paraFit[i].Para        = linfo->range;

		lllExtract(&(llMixNea[i]), &(llMixFar[i]), &mrcIn, &(linfo->leInfo[i]));
		mrcImageFree(&mrcIn, "");

		llMixNea[i].Weight = llMixFar[i].Weight = 1.0;

		lllDataLowPassFiltering(&(llMixNea[i]), linfo->leInfo[i].RMax, 0);
		lllDataLowPassFiltering(&(llMixFar[i]), linfo->leInfo[i].RMax, 0);
	}

	llMixNeaCurrent = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixFarCurrent = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixAvgCurrent = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llSepAvg        = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");

	for(i=0; i<filNumber; i++) {
		llDataInitWithReference(&(llMixNeaCurrent[i]), &(llMixNea[i]));
		llDataInitWithReference(&(llMixFarCurrent[i]), &(llMixFar[i]));
		llDataInitWithReference2(&(llMixAvgCurrent[i]), &(llMixNea[i]), AverageSide);

		lllDataCopy(&(llMixNeaCurrent[i]), &(llMixNea[i]));	
		lllDataCopy(&(llMixFarCurrent[i]), &(llMixFar[i]));	

		lllDataLowPassFiltering(&(llMixNeaCurrent[i]), linfo->leInfo[i].RMaxFirst, 1);
		lllDataLowPassFiltering(&(llMixFarCurrent[i]), linfo->leInfo[i].RMaxFirst, 1);
		/* Shift Check */
		lllExtractWithSeparation(&llSepNea, &(llMixNeaCurrent[i]), &(linfo->leInfo[i]), 0);
		lllExtractWithSeparation(&llSepFar, &(llMixFarCurrent[i]), &(linfo->leInfo[i]), 0);
		llDataInitWithReference2(&(llSepAvg[i]), &llSepNea, AverageSide);
		lllDataAxisSearchAndAverage(&(llSepAvg[i]), &llSepNea, &llSepFar, &(paraFit[i]), 0);
		llDataFree(&llSepNea);
		llDataFree(&llSepFar);

		/* Attention: Averaging without Omega */
		lllDataAxisSearchAndAverage(&(llMixAvgCurrent[i]), &(llMixNeaCurrent[i]), &(llMixFarCurrent[i]), &(paraFit[i]), 1);
		llDataInitWithReference2(&(llMixAvg[i]), &(llMixNea[i]), AverageSide);
		lllDataAxisSearchAndAverage(&(llMixAvg[i]), &(llMixNea[i]), &(llMixFar[i]), &(paraFit[i]), 1);
	}
	
	/* Determine paraFit */
	if(linfo->flagRef) {
		llDataFileReadFollowingllData(linfo->Ref, &llRef, &(llSepAvg[0]), &mode);
	} else {
		llDataInitWithReference(&llRef, &(llSepAvg[0]));
		lllDataCopy(&llRef, &(llSepAvg[0]));
	}

	lllDataLowPassFiltering(&llRef, linfo->RMaxFirst, 1);
	for(i=0; i<filNumber; i++) {
		fprintf(stdout, "Fit to %d: \n", i);
		lllDataFit(&llRef, &(llSepAvg[i]), &(paraFit[i]), PVALUE_MODE|0x10);
	}

	llDataInitWithReference2( llAvg,    &llRef, AverageSide);
	llDataInitWithReference2(&llNea,    llAvg, NearSide);
	llDataInitWithReference2(&llFar,    llAvg, FarSide);
	llDataInitWithReference2(&llSepNea, llAvg, NearSide);
	llDataInitWithReference2(&llSepFar, llAvg, FarSide);

	lllExtractWithSeparationUsingFittingParameter(llAvg, llMixAvg, paraFit, filNumber, linfo->leInfo, 1);
	lllDatarMaxLimit(llAvg, linfo->rMax, 0); 

	lllDataAvgToNea(&llNea, llAvg);
	lllDataAvgToFar(&llFar, llAvg);

	rms = 1e30;	
	oldrms = 2*rms;
	times = 0;
	while( linfo->rms < rms
		&& linfo->rms < fabs(oldrms - rms)
		&& times < linfo->MaxIteration) {
		oldrms = rms;

		rms = 0;
		for(i=0; i<filNumber; i++) {
			lllDataPhaseShiftInverse(&llSepNea, &llNea, &(paraFit[i]));
			lllDataPhaseShiftInverse(&llSepFar, &llFar, &(paraFit[i]));

			lllDataMergeDifferentN(&(llMixNeaCurrent[i]), &llSepNea, 1);
			lllDataMergeDifferentN(&(llMixFarCurrent[i]), &llSepFar, 1);

			rmsNea = lllDataDifferenceRValueCalc(&(llMixNea[i]), &(llMixNeaCurrent[i]), 1);
			rmsFar = lllDataDifferenceRValueCalc(&(llMixFar[i]), &(llMixFarCurrent[i]), 1);

			rms = sqrt(SQR(rms) + SQR(rmsNea) + SQR(rmsFar));
		}
		rms = (SQR(rms)/filNumber);
		fprintf(fpt, "%ld times: rms:= %g oldrms := %g\n", times, rms, oldrms);
		DEBUGPRINT3("%ld times: rms:= %g oldrms := %g\n", times, rms, oldrms);
		if(rms < linfo->rms) {
			break;
		}
	
		DEBUGPRINT("Determine new fitting parameters\n");
		lllDataLowPassFiltering(&llNea, linfo->RMaxFirst+linfo->RMaxStep*times, 1);
		lllDataLowPassFiltering(&llFar, linfo->RMaxFirst+linfo->RMaxStep*times, 1);
		for(i=0; i<filNumber; i++) {
			int CountMax = 4;
			int Delta    = 6;
			llDataFittedParam p;
			llDataFittedParam p0;
			int count = 0;
			double PNea, PFar, P;
			double minP, oldMinP;
			
			DEBUGPRINT2("%d/%d\n", i, filNumber);
			p0 = paraFit[i];
			p  = paraFit[i];
			minP = 1.0e30;
			while(count<CountMax
				|| 1e-4 < p0.Para.r.Delta 
				|| 1e-3 < p0.Para.phi.Delta 
				|| 1e-3 < p0.Para.z.Delta 
				) {	
				DEBUGPRINT1("%d: ", count);
				oldMinP = minP;
				for(p.Para.r.Value = p0.Para.r.Min; p.Para.r.Value <= p0.Para.r.Max; p.Para.r.Value+=p0.Para.r.Delta) {
					for(p.Para.z.Value = p0.Para.z.Min; p.Para.z.Value <= p0.Para.z.Max; p.Para.z.Value+=p0.Para.z.Delta) {
						for(p.Para.phi.Value = p0.Para.phi.Min; p.Para.phi.Value <= p0.Para.phi.Max; p.Para.phi.Value+=p0.Para.phi.Delta) {
							lllDataPhaseShiftInverse(&llSepNea, &llNea, &p);
							lllDataPhaseShiftInverse(&llSepFar, &llFar, &p);
							lllDataMergeDifferentN(&(llMixNeaCurrent[i]), &llSepNea, 1);
							lllDataMergeDifferentN(&(llMixFarCurrent[i]), &llSepFar, 1);
							PNea = lllDataDifferencePValueCalc(&(llMixNea[i]), &(llMixNeaCurrent[i]), 1);
							PFar = lllDataDifferencePValueCalc(&(llMixFar[i]), &(llMixFarCurrent[i]), 1);
							P = (PNea + PFar)/2.0;
							if(P<minP) {
								p0.Para.r.Value = p.Para.r.Value;	
								p0.Para.phi.Value = p.Para.phi.Value;	
								p0.Para.z.Value = p.Para.z.Value;	
								minP = P;
								DEBUGPRINT4("Min: %f %f %f %f\n", P*DEGREE, p0.Para.r.Value, p0.Para.phi.Value*DEGREE, p0.Para.z.Value);
							}
						}
					}
				}
				if(fabs(oldMinP - minP) < 1e-6) {
					break;
				}

				p0.Para.r.Min = MAX(p0.Para.r.Min, p0.Para.r.Value - p0.Para.r.Delta);
				p0.Para.r.Max = MIN(p0.Para.r.Max, p0.Para.r.Value + p0.Para.r.Delta);
				p0.Para.r.Delta = p0.Para.r.Delta/Delta;
				p0.Para.phi.Min = MAX(p0.Para.phi.Min, p0.Para.phi.Value - p0.Para.phi.Delta);
				p0.Para.phi.Max = MIN(p0.Para.phi.Max, p0.Para.phi.Value + p0.Para.phi.Delta);
				p0.Para.phi.Delta = p0.Para.phi.Delta/Delta;
				p0.Para.z.Min = MAX(p0.Para.z.Min, p0.Para.z.Value - p0.Para.z.Delta);
				p0.Para.z.Max = MIN(p0.Para.z.Max, p0.Para.z.Value + p0.Para.z.Delta);
				p0.Para.z.Delta = p0.Para.z.Delta/Delta;

				paraFit[i].Para.r.Value   = p0.Para.r.Value;
				paraFit[i].Para.phi.Value = p0.Para.phi.Value;
				paraFit[i].Para.z.Value   = p0.Para.z.Value;
				count++;
			}
		}
		/* You nead new paraFit[i] and llMixAvg[i] at this point */
		lllExtractWithSeparationUsingFittingParameter(llAvg, llMixAvg, paraFit, filNumber, linfo->leInfo, 1);
		lllDatarMaxLimit(llAvg, linfo->rMax, 0); 

		lllDataAvgToNea(&llNea, llAvg);
		lllDataAvgToFar(&llFar, llAvg);

		times++;
	}
}
		DEBUGPRINT("      : Estimation of new inter-filament parameters -----\n");
		lfitinfo.times = times;
		lfitinfo.nFile = filNumber;
		lfitinfo.flagOutParam2  = 0; 
		lfitinfo.OutParam2  = NULL; 
		lfitinfo.In         = linfo->In;
		
		lllDataFitAndAverage(llAvg, llSepFitAvg, llSepASAvg, llRef, paraFit, lfitinfo); 
		DEBUGPRINT("Log for FitAndAverage\n");
		fprintf(fpt, "%ld times: Fit And Average\n", times);
		for(i=0; i<filNumber; i++) {
			fprintf(fpt, "%s: %f:= (%f %f %f %d)\n", 
									   In[i],
									   paraFit[i].Para.R*DEGREE, 
									   paraFit[i].Para.phi.Value*DEGREE, 
									   paraFit[i].Para.z.Value,
									   paraFit[i].Para.r.Value,
									   paraFit[i].Para.Pole);
			DEBUGPRINT6("%s: %f:= (%f %f %f %d)\n", 
									   In[i],
									   paraFit[i].Para.R*DEGREE, 
									   paraFit[i].Para.phi.Value*DEGREE, 
									   paraFit[i].Para.z.Value,
									   paraFit[i].Para.r.Value,
									   paraFit[i].Para.Pole);
		}

		DEBUGPRINT("----- Estimation of each filaments : llSepNea and llSepFar -----\n"); 
		lllDataAvgToNea(&llNea, llAvg);
		lllDataAvgToFar(&llFar, llAvg);
		lllDatarMaxLimit(&llNea, linfo->rMax, 0);
		lllDatarMaxLimit(&llFar, linfo->rMax, 0);
		for(i=0; i<filNumber; i++) {
			lllDataPhaseShiftInverse(&(llSepNea[i]), &llNea, &(paraFit[i]));  
			lllDataPhaseShiftInverse(&(llSepFar[i]), &llFar, &(paraFit[i])); 
		}

		DEBUGPRINT("----- Evaluation of each filaments : llDifNea and llDifFar -----\n");
		rms = 0;
		for(i=0; i<filNumber; i++) {
			llDataInitWithReference(&llEstNea, &(llMixNea[i])); 
			llDataInitWithReference(&llEstFar, &(llMixFar[i])); 

			lllDataMergeDifferentN(&llEstNea, &(llSepNea[i]), 1);
			lllDataMergeDifferentN(&llEstFar, &(llSepFar[i]), 1);

			rmsNea = lllDataDifferenceCalc(&(llDifNea[i]), &(llMixNea[i]), &llEstNea, 1);
			rmsFar = lllDataDifferenceCalc(&(llDifFar[i]), &(llMixFar[i]), &llEstFar, 1);

			llDataFree(&llEstNea);
			llDataFree(&llEstFar);

			rms = sqrt(SQR(rms) + (SQR(rmsNea) + SQR(rmsFar))/2.0); 
			DEBUGPRINT2( "rms: %s %f\n", In[i], sqrt((SQR(rmsNea)+SQR(rmsFar))/2.0));
			fprintf(fpt, "rms: %s %f\n", In[i], sqrt((SQR(rmsNea)+SQR(rmsFar))/2.0));
		}
		rms = sqrt(SQR(rms)/filNumber);
		DEBUGPRINT("Log for evaluation of each filament\n");
		fprintf(fpt, "%ld times: rms:= %g oldrms:=%g\n", times, rms, oldrms);

		DEBUGPRINT("----- Next Turn Please -----\n");
		fflush(fpt);
		times++;
	}

	linfo->llSepASAvg    = llSepFitAvg;
	linfo->llSepDifASAvg = llSepDifASAvg;
}


void 
lllExtractWithLayerSeparation2(
	llData* llAvg, 
	char**  In, 
	int     filNumber, 
	lllExtractWithLayerSeparationInfo* linfo)
{
	int i, times;
	mrcImage mrcIn;
	llDataParaTypeInteger mode;
	llDataFittedParam* paraFit;
	llData* llMixNea;
	llData* llMixFar;
	llData* llMixAvg;
	llData  llNea;
	llData  llFar;
	llData* llMixNeaCurrent;
	llData* llMixFarCurrent;
	llData* llMixAvgCurrent;
	llData  llSepNea;
	llData  llSepFar;
	llData* llSepAvg;
	llData  llRef;
	double  rms, oldrms;
	double  rmsNea, rmsFar;
	FILE*   fpt; /* Log File Pointer */

	fpt = linfo->fptLog; /* Log File Set */

	DEBUGPRINT("Read Layer Line Separation Informationi\n");
	linfo->leInfo          = (lllExtractInfo*)memoryAllocate(sizeof(lllExtractInfo)*filNumber, "in main");
	linfo->leInfoImportant = (lllExtractInfo*)memoryAllocate(sizeof(lllExtractInfo)*filNumber, "in main");
	for(i=0; i<filNumber; i++) {
		lllDataSeparationInfoRead(&(linfo->leInfo[i]),          &mrcIn, linfo->fptllInfo[i]);
		lllDataSeparationInfoRead(&(linfo->leInfoImportant[i]), &mrcIn, linfo->fptllInfoImportant[i]);
		if(linfo->flagtruePitch) {
			linfo->leInfo[i].truePitch = linfo->truePitch;
		}
		if(linfo->flagrMax) {
			linfo->leInfo[i].rMax      = linfo->rMax;
		}
		if(linfo->flagRMax) {
			linfo->leInfo[i].RMax      = linfo->RMax;
		}
		linfo->leInfo[i].RMaxFirst = linfo->RMaxFirst;
		paraFit[i].Para        = linfo->range;
	}

	paraFit       = (llDataFittedParam*)memoryAllocate(sizeof(llDataFittedParam)*filNumber, "in lllExtractWithLayerSeparation1");

	DEBUGPRINT("Set llMixNea and llMixFar\n");
	llMixNea = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixFar = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixAvg = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	for(i=0; i<filNumber; i++) {
		mrcFileRead(&mrcIn, In[i], "lllExtractWithLayerSepration1", 0);
		lllExtract(&(llMixNea[i]), &(llMixFar[i]), &mrcIn, &(linfo->leInfo[i]));
		mrcImageFree(&mrcIn, "");

		llMixNea[i].Weight = llMixFar[i].Weight = 1.0;

		lllDataLowPassFiltering(&(llMixNea[i]), linfo->leInfo[i].RMax, 0);
		lllDataLowPassFiltering(&(llMixFar[i]), linfo->leInfo[i].RMax, 0);

		llDataInitWithReference2(&(llMixAvg[i]), &(llMixNea[i]), AverageSide);
	}

	
	DEBUGPRINT("Set llMixNeaCurrent and llMixFarCurrent using only important layer lines\n");
	llMixNeaCurrent = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixFarCurrent = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llMixAvgCurrent = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");
	llSepAvg        = (llData*)memoryAllocate(sizeof(llData)*filNumber, "in lllExtractWithLayerSeparation1");

	for(i=0; i<filNumber; i++) {
		llDataInitWithReference2(&(llMixNeaCurrent[i]), &(llMixNea[i]), NearSide);
		llDataInitWithReference2(&(llMixFarCurrent[i]), &(llMixFar[i]), FarSide);
		llDataInitWithReference2(&(llMixAvgCurrent[i]), &(llMixNea[i]), AverageSide);

		lllDataCopy(&(llMixNeaCurrent[i]), &(llMixNea[i]));	
		lllDataCopy(&(llMixFarCurrent[i]), &(llMixFar[i]));	

		lllDataLowPassFiltering(&(llMixNeaCurrent[i]), linfo->leInfo[i].RMaxFirst, 1);
		lllDataLowPassFiltering(&(llMixFarCurrent[i]), linfo->leInfo[i].RMaxFirst, 1);

		lllExtractWithSeparation(&llSepNea, &(llMixNeaCurrent[i]), &(linfo->leInfoImportant[i]), 0);
		lllExtractWithSeparation(&llSepFar, &(llMixFarCurrent[i]), &(linfo->leInfoImportant[i]), 0);

		/* Averaging without Omega */
		llDataInitWithReference2(&(llSepAvg[i]), &llSepNea, AverageSide);
		lllDataAxisSearchAndAverage(&(llSepAvg[i]), &llSepNea, &llSepFar, &(paraFit[i]), 0);

		llDataFree(&llSepNea);
		llDataFree(&llSepFar);
	
		/* Attention: mode=1 : No Search */
		lllDataAxisSearchAndAverage(&(llMixAvgCurrent[i]), &(llMixNeaCurrent[i]), &(llMixFarCurrent[i]), &(paraFit[i]), 1);
		lllDataAxisSearchAndAverage(&(llMixAvg[i]),        &(llMixNea[i]),        &(llMixFar[i]),        &(paraFit[i]), 1);
	}
	
	DEBUGPRINT("Read/Set reference data \n")	
	if(linfo->flagRef) {
		llDataFileReadFollowingllData(linfo->Ref, &llRef, &(llSepAvg[0]), &mode);
	} else {
		llDataInitWithReference(&llRef, &(llSepAvg[0]));
		lllDataCopy(&llRef, &(llSepAvg[0]));
	}

	DEBUGPRINT("Read/Set reference data \n")	
	lllDataLowPassFiltering(&llRef, linfo->RMaxFirst, 1);
	for(i=0; i<filNumber; i++) {
		fprintf(stdout, "Fit to %d: \n", i);
		lllDataFit(&llRef, &(llSepAvg[i]), &(paraFit[i]), PVALUE_MODE|0x10);
	}

	llDataInitWithReference2( llAvg,    &llRef, AverageSide);
	llDataInitWithReference2(&llNea,    llAvg, NearSide);
	llDataInitWithReference2(&llFar,    llAvg, FarSide);
	llDataInitWithReference2(&llSepNea, llAvg, NearSide);
	llDataInitWithReference2(&llSepFar, llAvg, FarSide);

	lllExtractWithSeparationUsingFittingParameter(llAvg, llMixAvg, paraFit, filNumber, linfo->leInfo, 1);
	lllDatarMaxLimit(llAvg, linfo->rMax, 0); 

	lllDataAvgToNea(&llNea, llAvg);
	lllDataAvgToFar(&llFar, llAvg);

	rms = 1e30;	
	oldrms = 2*rms;
	times = 0;
	while( linfo->rms < rms
		&& linfo->rms < fabs(oldrms - rms)
		&& times < linfo->MaxIteration) {
		oldrms = rms;

		rms = 0;
		for(i=0; i<filNumber; i++) {
			lllDataPhaseShiftInverse(&llSepNea, &llNea, &(paraFit[i]));
			lllDataPhaseShiftInverse(&llSepFar, &llFar, &(paraFit[i]));

			lllDataMergeDifferentN(&(llMixNeaCurrent[i]), &llSepNea, 1);
			lllDataMergeDifferentN(&(llMixFarCurrent[i]), &llSepFar, 1);

			rmsNea = lllDataDifferenceRValueCalc(&(llMixNea[i]), &(llMixNeaCurrent[i]), 1);
			rmsFar = lllDataDifferenceRValueCalc(&(llMixFar[i]), &(llMixFarCurrent[i]), 1);

			rms = sqrt(SQR(rms) + SQR(rmsNea) + SQR(rmsFar));
		}
		rms = (SQR(rms)/filNumber);
		fprintf(fpt, "%ld times: rms:= %g oldrms := %g\n", times, rms, oldrms);
		DEBUGPRINT3("%ld times: rms:= %g oldrms := %g\n", times, rms, oldrms);
		if(rms < linfo->rms) {
			break;
		}
	
		DEBUGPRINT("Determine new fitting parameters\n");
		lllDataLowPassFiltering(&llNea, linfo->RMaxFirst+linfo->RMaxStep*times, 1);
		lllDataLowPassFiltering(&llFar, linfo->RMaxFirst+linfo->RMaxStep*times, 1);
		for(i=0; i<filNumber; i++) {
			int CountMax = 4;
			int Delta    = 6;
			llDataFittedParam p;
			llDataFittedParam p0;
			int count = 0;
			double PNea, PFar, P;
			double minP, oldMinP;
			
			DEBUGPRINT2("%d/%d\n", i, filNumber);
			p0 = paraFit[i];
			p  = paraFit[i];
			minP = 1.0e30;
			while(count<CountMax
				|| 1e-4 < p0.Para.r.Delta 
				|| 1e-3 < p0.Para.phi.Delta 
				|| 1e-3 < p0.Para.z.Delta 
				) {	
				DEBUGPRINT1("%d: ", count);
				oldMinP = minP;
				for(p.Para.r.Value = p0.Para.r.Min; p.Para.r.Value <= p0.Para.r.Max; p.Para.r.Value+=p0.Para.r.Delta) {
					for(p.Para.z.Value = p0.Para.z.Min; p.Para.z.Value <= p0.Para.z.Max; p.Para.z.Value+=p0.Para.z.Delta) {
						for(p.Para.phi.Value = p0.Para.phi.Min; p.Para.phi.Value <= p0.Para.phi.Max; p.Para.phi.Value+=p0.Para.phi.Delta) {
							lllDataPhaseShiftInverse(&llSepNea, &llNea, &p);
							lllDataPhaseShiftInverse(&llSepFar, &llFar, &p);
							lllDataMergeDifferentN(&(llMixNeaCurrent[i]), &llSepNea, 1);
							lllDataMergeDifferentN(&(llMixFarCurrent[i]), &llSepFar, 1);
							PNea = lllDataDifferencePValueCalc(&(llMixNea[i]), &(llMixNeaCurrent[i]), 1);
							PFar = lllDataDifferencePValueCalc(&(llMixFar[i]), &(llMixFarCurrent[i]), 1);
							P = (PNea + PFar)/2.0;
							if(P<minP) {
								p0.Para.r.Value = p.Para.r.Value;	
								p0.Para.phi.Value = p.Para.phi.Value;	
								p0.Para.z.Value = p.Para.z.Value;	
								minP = P;
								DEBUGPRINT4("Min: %f %f %f %f\n", P*DEGREE, p0.Para.r.Value, p0.Para.phi.Value*DEGREE, p0.Para.z.Value);
							}
						}
					}
				}
				if(fabs(oldMinP - minP) < 1e-6) {
					break;

				p0.Para.r.Min = MAX(p0.Para.r.Min, p0.Para.r.Value - p0.Para.r.Delta);
				p0.Para.r.Max = MIN(p0.Para.r.Max, p0.Para.r.Value + p0.Para.r.Delta);
				p0.Para.r.Delta = p0.Para.r.Delta/Delta;
				p0.Para.phi.Min = MAX(p0.Para.phi.Min, p0.Para.phi.Value - p0.Para.phi.Delta);
				p0.Para.phi.Max = MIN(p0.Para.phi.Max, p0.Para.phi.Value + p0.Para.phi.Delta);
				p0.Para.phi.Delta = p0.Para.phi.Delta/Delta;
				p0.Para.z.Min = MAX(p0.Para.z.Min, p0.Para.z.Value - p0.Para.z.Delta);
				p0.Para.z.Max = MIN(p0.Para.z.Max, p0.Para.z.Value + p0.Para.z.Delta);
				p0.Para.z.Delta = p0.Para.z.Delta/Delta;

				paraFit[i].Para.r.Value   = p0.Para.r.Value;
				paraFit[i].Para.phi.Value = p0.Para.phi.Value;
				paraFit[i].Para.z.Value   = p0.Para.z.Value;
				count++;
			}
		}
		/* You nead new paraFit[i] and llMixAvg[i] at this point */
		lllExtractWithSeparationUsingFittingParameter(llAvg, llMixAvg, paraFit, filNumber, linfo->leInfo, 1);
		lllDatarMaxLimit(llAvg, linfo->rMax, 0); 

		lllDataAvgToNea(&llNea, llAvg);
		lllDataAvgToFar(&llFar, llAvg);

		times++;
	}
}


